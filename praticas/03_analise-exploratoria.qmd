---
title: "Análise exploratória de dados - Parte 1"
---

Nesta aula, vamos conhecer algumas funções do R e do pacote tidyverse que nos ajudam a fazer uma análise exploratória dos dados.

::: callout-note
## Dados

Utilizaremos dados de saneamento por municipio do estado de São Paulo, disponibilizados pela CETESB[^03_analise-exploratoria-1], referente à 2022.

**O arquivo csv pode ser baixado através [deste link](https://raw.githubusercontent.com/beatrizmilz/cetesb_saneamento/refs/heads/main/data-raw/dados-cetesb-tidy/2022.csv).**

Esses dados foram [originalmente disponibilizados em PDF](https://cetesb.sp.gov.br/aguas-interiores/wp-content/uploads/sites/12/2023/11/Apendice-J-Dados-de-Saneamento-por-municipio-%E2%80%93-2022.pdf), e foram [extraídos e organizados](https://github.com/beatrizmilz/cetesb_saneamento/) por Beatriz Milz.
:::

[^03_analise-exploratoria-1]: CETESB - Companhia Ambiental do Estado de São Paulo.

## Criando um projeto

O RStudio possui uma funcionalidade chamada **projetos**. Quando criamos um projeto no RStudio, uma nova pasta é criada no computador, e o RStudio define essa pasta como o diretório de trabalho. Além disso, o RStudio também cria um arquivo com a extensão `.Rproj` dentro dessa pasta, que contém informações sobre o projeto.

É recomendado que sempre trabalhemos em projetos no RStudio, pois isso facilita a organização dos arquivos e a reprodução do código.

É recomendado também salvar os arquivos referentes ao projeto (como scripts, bases de dados, resultados, etc) dentro do projeto. Isso não significa que precisamos colocar todos os arquivos dentro da pasta principal do projeto: podemos criar sub-pastas para organizar os arquivos.

Para criar um projeto no RStudio, primeiro precisamos acessar o menu de criação de projetos (*New project Wizard*). Podemos fazer isso de três formas:

-   No menu superior, clicando em `File > New Project...`

-   Clicando no ícone de novo projeto na barra de ferramentas do RStudio: ![](images/01_icone_novo_proj.png)

-   No canto superior esquerdo, clicando no botão referente à projetos, e depois em `New Project...`:

![Captura de tela do RStudio: Menu de projetos](images/01_botao_projetos.png){fig-align="center"}

Depois, escolhemos o tipo de projeto que queremos criar. No geral, escolhemos a opção `New Directory`, para criar uma nova pasta no computador:

![Captura de tela do RStudio: Criando um projeto](images/01_new_project.png){fig-align="center"}

Depois, escolhemos o tipo de projeto que queremos criar. Cada tipo de projeto apresenta arquivos específicos de template. O RStudio apresenta algumas opções de projeto, porém é possível adicionar novos tipos de projeto instalandos pacotes específicos.

No geral, escolhemos a opção `New Project`, para criar um projeto simples:

![Captura de tela do RStudio: Escolhendo o tipo de projeto](images/01_new_project_type.png){fig-align="center"}

Na tela seguinte, precisamos informar o nome do projeto (no campo *Directory name*) e o diretório onde ele será criado (no campo *Create project as subdirectory of*):

![Captura de tela do RStudio: Nomeando o projeto](images/01_new_project_name_dir.png){fig-align="center"}

Após preencher as informações solicitadas, clicamos em `Create Project`. O RStudio criará o projeto e o abrirá:

![Captura de tela do RStudio: projeto criado](images/01_projeto_criado.png){fig-align="center"}

::: callout-tip
**Note que o nome do projeto que criamos aparece no canto superior direito do RStudio.**
:::

## Salvando os dados no projeto

Para facilitar o trabalho, vamos salvar os dados que utilizaremos nesta aula dentro do projeto que acabamos de criar.

Primeiro, vamos criar uma pasta chamada `dados` dentro do projeto:

```{r}
#| eval: false
dir.create("dados")
```

Depois, vamos baixar os dados da CETESB e salvar na pasta `dados` que acabamos de criar:

```{r}
#| eval: false
download.file(
  url = "https://raw.githubusercontent.com/beatrizmilz/cetesb_saneamento/refs/heads/main/data-raw/dados-cetesb-tidy/2022.csv",
  destfile = "dados/dados-cetesb-2022.csv"
)
```

Confira se o arquivo foi baixado corretamente, e se está na pasta `dados` do projeto.

## Importando os dados

Para importar os dados que acabamos de baixar, vamos utilizar a função `read_csv()` do pacote `readr`, que faz parte do `tidyverse`.

Lembre-se de carregar o pacote `tidyverse` antes de utilizar a função `read_csv()`:

```{r}
library(tidyverse)
```

Agora, podemos importar os dados:

```{r}
dados_cetesb <- read_csv("dados/dados-cetesb-2022.csv")
```

Vamos conferir se os dados foram importados corretamente, utilizando a função `glimpse()`:

```{r}
glimpse(dados_cetesb)
```

A função `View()` também pode ser utilizada para visualizar os dados em uma tabela interativa:

```{r}
#| eval: false
View(dados_cetesb)
```

## Conhecendo a base de dados

Para conhecer melhor a base de dados, podemos utilizar algumas funções para explorar as colunas e os tipos de dados.

A função `nrow()` nos mostra o número de linhas da base de dados, e a função `ncol()` nos mostra o número de colunas:

```{r}
nrow(dados_cetesb)
ncol(dados_cetesb)
```


A função `colnames()` nos mostra os nomes das colunas:

```{r}
colnames(dados_cetesb)
```

Segue abaixo uma tabela com os nomes das colunas e suas descrições[^03_analise-exploratoria-1]:

[^03_analise-exploratoria-1]: O arquivo original não apresenta um dicionário de dados, portanto as descrições foram elaboradas com base no conteúdo do arquivo e na documentação do ICTEM (Indicador de Coleta e Tratabilidade de Esgoto da População Urbana de Município) disponível no site da CETESB.

| Nome da coluna | Descrição |
| --- | --- |
| ano | Ano de referência dos dados |
| uf | Unidade da Federação (estado) |
| ugrhi | Unidade de Gerenciamento de Recursos Hídricos |
| municipio | Nome do município |
| codigo_ibge | Código do município no IBGE |
| populacao_urbana | População urbana do município |
| atendimento_coleta_porc | Percentual de atendimento da coleta de esgoto |
| atendimento_tratamento_porc | Percentual de atendimento do tratamento de esgoto, **para o esgoto coletado** |
| eficiencia | Eficiência do sistema de esgoto |
| carga_poluidora_potencial | Carga poluidora potencial do esgoto coletado |
| carga_poluidora_remancescente | Carga poluidora remanescente do esgoto coletado |
| ictem | [Indicador de Coleta e Tratabilidade de Esgoto da População Urbana de Município (ICTEM)](https://cetesb.sp.gov.br/wp-content/uploads/sites/12/2013/11/11.pdf) |



A função `head()` nos mostra as primeiras linhas da base de dados, e a função `tail()` nos mostra as últimas linhas:

```{r}
head(dados_cetesb)
tail(dados_cetesb)
```

A função `summary()` nos mostra um resumo de estatísticas descritivas para todas as colunas. Mas cuidado: nem todos os resultados fazem sentido (exemplo: a coluna `codigo_ibge` é um identificador, e não devemos calcular estatísticas descritivas para ela).

```{r}
summary(dados_cetesb)
```

## Calculando estatísticas descritivas

Como vimos acima, a função `summary()` nos dá um resumo de estatísticas descritivas para todas as colunas.

Também podemos calcular estatísticas descritivas específicas para colunas numéricas, como média, mediana, desvio padrão, entre outras.

| função | descrição |
| --- | --- |
| `sum()` | calcula a soma dos valores |
| `mean()` | calcula a média |
| `median()` | calcula a mediana |
| `var()` | calcula a variância |
| `sd()` | calcula o desvio padrão |
| `min()` | calcula o valor mínimo |
| `max()` | calcula o valor máximo |
| `quantile()` | calcula os quantis (percentis) |


::: {.callout-important}
## O operador `$`
Quando estamos trabalhando com *data.frames* (ou *tibbles*) podemos utilizar o operador `$` para acessar uma coluna específica. O resultado será um vetor com os valores dessa coluna.

Por exemplo, para acessar a coluna `atendimento_coleta_porc`, podemos fazer:

```{r}
dados_cetesb$atendimento_coleta_porc 
```

:::

Vamos ver alguns exemplos de como calcular estatísticas descritivas utilizando as funções apresentadas acima:

```{r}
# Soma dos valores da coluna `populacao_urbana`
# Ou seja, a população urbana total do estado de São Paulo
sum(dados_cetesb$populacao_urbana)
```


```{r}
# Média dos valores da coluna `ictem`
mean(dados_cetesb$ictem)


# Mediana dos valores da coluna `ictem`
median(dados_cetesb$ictem)

# Variância dos valores da coluna `ictem`
var(dados_cetesb$ictem)


# Desvio padrão dos valores da coluna `ictem`
sd(dados_cetesb$ictem)

# Valor mínimo da coluna `ictem`
min(dados_cetesb$ictem)

# Valor máximo da coluna `ictem`
max(dados_cetesb$ictem)

# Quantis dos valores da coluna `ictem`
quantile(dados_cetesb$ictem)
```


## Visualizando os dados

Para visualizar os dados, podemos utilizar a função `ggplot()` do pacote `ggplot2`, que também faz parte do `tidyverse`.

Para quem está começando, recomendo utilizar o pacote `esquisse`, que facilita a criação de gráficos com o `ggplot2`.

```{r}
#| eval: false
install.packages("esquisse")
install.packages("plotly")
```

Depois de instalar o pacote, podemos carregá-lo e utilizar a função `esquisser()` para criar gráficos interativos:

```{r}
#| eval: false
library(esquisse)
esquisser(dados_cetesb)
```

O `esquisse` oferece uma interface amigável para criar gráficos com o `ggplot2`, permitindo que você arraste e solte variáveis, escolha tipos de gráficos e customize os elementos do gráfico. Ao usar o `esquisse`, você pode gerar o código correspondente ao gráfico que está criando, e depois copiá-lo para o seu script R.

Para criar um histograma simples, por exemplo, podemos usar o seguinte código:

```{r}
# inicia o gráfico com os dados `dados_cetesb`
ggplot(dados_cetesb) +
  # define a variável que será plotada no eixo x
  aes(x = atendimento_coleta_porc) +
  # adiciona a geometria de histograma
  geom_histogram() 
```

Podemos criar também um boxplot com um código semelhante:

```{r}
# inicia o gráfico com os dados `dados_cetesb`
ggplot(dados_cetesb) +
  # define a variável que será plotada no eixo y
  aes(y = atendimento_coleta_porc) +
  # adiciona a geometria de histograma
  geom_boxplot() 
```

::: callout-note
Nesta aula, o objetivo foi apresentar algumas funções básicas que veremos outras vezes ao longo do curso. Não se preocupe se não entendeu tudo agora, pois iremos aprofundar esses conceitos em aulas futuras.

Se você quiser praticar mais, recomendo que explore os materiais complementares.
:::

## Materiais complementares

-   Materiais do curso [Introdução à análise de dados no R](https://ipeadata-lab.github.io/curso_r_intro_202409/):
    -   [Diretório de trabalho e projetos](https://ipeadata-lab.github.io/curso_r_intro_202409/01_1_rproj.html)
    -   [Importando dados](https://ipeadata-lab.github.io/curso_r_intro_202409/03_importacao.html)
    -   [Conhecendo a base de dados](https://ipeadata-lab.github.io/curso_r_intro_202409/04_conhecendo.html)
