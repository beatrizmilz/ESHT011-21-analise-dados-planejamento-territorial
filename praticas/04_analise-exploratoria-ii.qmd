---
title: "Análise exploratória de dados - Parte 2"
format: html
---

Nesta segunda parte da análise exploratória de dados, vamos conhecer as funções mais importantes do pacote `dplyr` para manipulação de dados.

## Carregando pacotes

```{r}
#| warning: false
#| message: false
library(tidyverse)
```

## Carregando os dados

Vamos continuar trabalhando nos dados da CETESB, que já foram carregados na [primeira parte da análise exploratória (aula passada)](03_analise-exploratoria.qmd). Caso você não tenha feito isso, recomendo que você siga as instruções da aula anterior antes de continuar a aula de hoje.

```{r}
dados_cetesb <- read_csv("dados/dados-cetesb-2022.csv")
```

Outra forma de importar os dados é utilizando o link direto do repositório do GitHub onde os dados estão armazenados. Você pode fazer isso utilizando a função `read_csv()` do pacote `readr`:

```{r}
#| eval: false
dados_cetesb <- read_csv("https://raw.githubusercontent.com/beatrizmilz/ESHT011-21-analise-dados-planejamento-territorial/refs/heads/main/dados/dados-cetesb-2022.csv")
```

A função `glimpse()` do pacote `dplyr`, que conhecemos na aula passada, é uma forma rápida de visualizar a estrutura dos dados. Ela nos mostra o nome das colunas, o tipo de dado de cada coluna e os primeiros valores de cada coluna:

```{r}
glimpse(dados_cetesb)
```

## Conhecendo o operador pipe (`|>`)

O operador pipe (`|>` ou `%>%`) permite encadear operações de forma mais legível e intuitiva.

Por exemplo, podemos utilizar o operador pipe para aplicar a função `glimpse()` diretamente nos dados:

```{r}
dados_cetesb |> 
  glimpse()
```

Com apenas uma função, não é tão óbvio o benefício do operador pipe. No entanto, quando começamos a encadear várias funções, ele se torna muito útil. Veremos exemplos disso ao longo desta aula!

## Principais funções do `dplyr`

O pacote `dplyr` é uma das ferramentas mais poderosas para manipulação de dados no R. Ele oferece uma série de funções que facilitam a transformação e análise de dados. Vamos conhecer algumas das principais funções do `dplyr`:

-   `filter()`: filtra linhas com base em condições específicas.

-   `select()`: seleciona colunas específicas de um data frame.

-   `mutate()`: adiciona ou modifica colunas.

-   `arrange()`: ordena as linhas de um data frame com base em uma ou mais colunas.

-   `summarise()`: resume os dados, calculando estatísticas agregadas.

-   `group_by()`: agrupa os dados com base em uma ou mais colunas, permitindo aplicar funções de resumo a cada grupo.

Ao apresentar essas funções, não vamos abordar todos os casos de uso, mas sim o básico de cada uma delas. Você pode consultar os materiais listados no final da aula para aprender mais sobre cada função e suas possibilidades.

## Filtrando dados com `filter()`

A A função `filter()` é utilizada para filtrar linhas de um data frame com base em condições específicas.

Por exemplo, podemos filtrar os dados da CETESB para mostrar apenas os municípios que possuem uma população urbana maior que 1 milhão de habitantes:

```{r}
dados_cetesb |>
  filter(populacao_urbana > 1000000)
```

Podemos também filtrar as linhas dos municípios do Grande ABC. Neste caso, é mais fácil criar um vetor com os nomes dos municípios, e utilizar o operador `%in%` para filtrar os dados:

```{r}
municipios_grande_abc <- c("São Caetano do Sul", "São Bernardo do Campo", "Diadema", "Santo André", "Mauá", "Ribeirão Pires", "Rio Grande da Serra")

dados_cetesb |>
  filter(municipio %in% municipios_grande_abc)
```

Podemos também consultar quais são os municípios que coletam 100% do esgoto produzido:

```{r}
dados_cetesb |> 
  filter(atendimento_coleta_porc == 100)
```

Destes, podemos filtrar os que tratem 100% do esgoto coletado:

```{r}
dados_cetesb |> 
  filter(atendimento_coleta_porc == 100, atendimento_tratamento_porc == 100)
```

As possibilidades são muitas! Podemos combinar várias condições utilizando os operadores lógicos (como o `|` (OU) e o `!` (NEGAÇÃO).

## Selecionando colunas com `select()`

A função `select()` é utilizada para selecionar colunas específicas de um data frame.

Por exemplo, podemos selecionar apenas as colunas `municipio`, `populacao_urbana` e `atendimento_coleta_porc` dos dados da CETESB:

```{r}
dados_cetesb |>
  select(municipio, populacao_urbana, atendimento_coleta_porc)
```

Podemos também indicar quais colunas queremos excluir, utilizando o operador `-` antes do nome da coluna. Por exemplo, para excluir as colunas `ano` e `uf`, podemos fazer o seguinte:

```{r}
dados_cetesb |>
  select(-ano, -uf)
```

## Adicionando ou modificando colunas com `mutate()`

A função `mutate()` é utilizada para adicionar novas colunas ou modificar colunas existentes em um data frame.

A sintaxe básica da função `mutate()` é:

```{r}
#| eval: false
base_de_dados |> 
  mutate(nome_da_nova_coluna = o_que_queremos_que_seja_salvo_nela)
```

Por exemplo, podemos criar uma coluna nova chamada `populacao_urbana_mil` que representa a população urbana em mil habitantes:

```{r}
dados_cetesb |>
  # selecionando as colunas municipio e populacao_urbana
  # para facilitar a visualização
  select(municipio, populacao_urbana) |>
  mutate(populacao_urbana_mil = populacao_urbana / 1000)
```

A função `mutate()` também pode ser utilizada para modificar colunas existentes. Por exemplo, podemos mudar a classe de algumas colunas:

```{r}
dados_cetesb |>
  mutate(
    ugrhi = as.character(ugrhi),  # convertendo ugrhi para character
    codigo_ibge = as.character(codigo_ibge)  # convertendo codigo_ibge para character
  )
```

## Ordenando dados com `arrange()`

A função `arrange()` é utilizada para ordenar as linhas de um data frame com base em uma ou mais colunas.

Podemos ordenar os dados da CETESB pela coluna `carga_poluidora_remancescente`, em ordem crescente:

```{r}
dados_cetesb |>
  arrange(carga_poluidora_remancescente)
```

Também podemos ordenar os dados em ordem decrescente, utilizando a função `desc()`:

```{r}
dados_cetesb |>
  arrange(desc(populacao_urbana))
```

## Agrupando dados com `group_by()`

A função `group_by()` é utilizada para agrupar os dados com base em uma ou mais colunas. Isso é especialmente útil quando queremos aplicar funções de resumo a cada grupo.

Por exemplo, podemos agrupar os dados da CETESB pela coluna `ugrhi` (Unidade de Gerenciamento de Recursos Hídricos) e calcular a soma da população urbana para cada UGRHI:

```{r}
dados_cetesb |>
  group_by(ugrhi) 
```

A função `group_by()` não altera os dados, mas prepara o data frame para que possamos aplicar funções de resumo a cada grupo. Portanto, ela é frequentemente utilizada em conjunto com a função `summarise()`.

## Resumindo dados com `summarise()`

A função `summarise()` é utilizada para resumir os dados, calculando estatísticas agregadas. Ela é frequentemente utilizada em conjunto com a função `group_by()`.

Como vimos na aula anterior, a função `summary()` nos dá um resumo de estatísticas descritivas para todas as colunas. Porém, podemos querer calcular estatísticas descritivas apenas para algum subconjunto dos dados.

Imagine que queremos calcular algumas estatísticas descritivas considerando cada UGRHI (Unidade de Gerenciamento de Recursos Hídricos) separadamente. Podemos fazer isso utilizando as funções `group_by()` e `summarise()`.

```{r}
estatisticas_descritivas <- dados_cetesb |>
  # agrupar os dados pela coluna ugrhi
  group_by(ugrhi) |>
  # calcular estatísticas descritivas para cada grupo
  summarise(
    quantidade_municipios = n(),
    soma_populacao_urbana = sum(populacao_urbana),
    media_ictem = mean(ictem) |> round(2),
    mediana_ictem = median(ictem) |> round(2),
    desvio_padrao_ictem = sd(ictem) |> round(2)
  )

knitr::kable(estatisticas_descritivas)
```

Podemos salvar o resultado em um arquivo CSV ou Excel, utilizando as funções `readr::write_csv()` ou `writexl::write_excel_csv()`:

```{r}
#| eval: false
write_csv(estatisticas_descritivas,
          "dados/estatisticas-descritivas-ugrhi.csv")

writexl::write_xlsx(estatisticas_descritivas,
                    "dados/estatisticas-descritivas-ugrhi.xlsx")
```

## Materiais complementares

-   Materiais do curso [Introdução à análise de dados no R](https://ipeadata-lab.github.io/curso_r_intro_202409/):
    -   [Transformando dados](https://ipeadata-lab.github.io/curso_r_intro_202409/05_transformacao.html)
    -   [Análise exploratória de dados](https://ipeadata-lab.github.io/curso_r_intro_202409/06_analise_exploratoria.html)
