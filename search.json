[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Análise de dados para o Planejamento Territorial",
    "section": "",
    "text": "Introdução\nBoas vindas!\nEste site apresenta o material de apoio para aulas práticas das disciplinas “Análise de dados para o Planejamento Territorial” e “Métodos Quantitativos para Pesquisa em PGT”, oferecidas no segundo quadrimestre de 2025 na Universidade Federal do ABC (UFABC).\nO conteúdo das aulas teóricas está disponível no Moodle.",
    "crumbs": [
      "Introdução"
    ]
  },
  {
    "objectID": "index.html#calendário",
    "href": "index.html#calendário",
    "title": "Análise de dados para o Planejamento Territorial",
    "section": "Calendário",
    "text": "Calendário\n\n\n\nSemana\nPeríodo\nPráticas\n\n\n\n\n1\n02/06/2025 - 06/06/2025\nIntrodução ao R e RStudio\n\n\n1\n02/06/2025 - 06/06/2025\nLinguagem R",
    "crumbs": [
      "Introdução"
    ]
  },
  {
    "objectID": "index.html#sobre-este-material",
    "href": "index.html#sobre-este-material",
    "title": "Análise de dados para o Planejamento Territorial",
    "section": "Sobre este material",
    "text": "Sobre este material\nEste material contém partes adaptadas de:\n\nMaterial criado por Luis Felipe Bortolatto Cunha, que atuou como professor Assistente (estágio docência) em oferecimentos anteriores da disciplina.\nMaterial do curso Introdução à análise de dados no R, ministrado por Beatriz Milz, Pedro Cavalcanti e Rafael Pereira.\n\n\nLicença\nEsse material está disponível sob a licença CC BY-SA 4.0.",
    "crumbs": [
      "Introdução"
    ]
  },
  {
    "objectID": "praticas/01_intro_r_rstudio.html",
    "href": "praticas/01_intro_r_rstudio.html",
    "title": "1  Introdução ao R e RStudio",
    "section": "",
    "text": "1.1 Introdução\nAo longo deste curso, os softwares R e RStudio serão usados como uma ferramenta para auxiliar na análise de dados para o planejamento territorial.\nÉ importante ressaltar o uso do R e do RStudio não pode ser dissociado do processo de pesquisa, que envolve a observação, formulação de hipóteses, coleta de dados e análise de dados, sendo este o foco deste curso.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introdução ao R e RStudio</span>"
    ]
  },
  {
    "objectID": "praticas/01_intro_r_rstudio.html#o-que-é-o-r",
    "href": "praticas/01_intro_r_rstudio.html#o-que-é-o-r",
    "title": "1  Introdução ao R e RStudio",
    "section": "1.2 O que é o R?",
    "text": "1.2 O que é o R?\nR é uma linguagem de programação com o foco em estatística, análise e visualização de dados.\nEla é uma linguagem de código aberto, o que significa que qualquer pessoa pode utilizá-la gratuitamente. Além disso, as pessoas com mais experiência na linguagem podem contribuir com o desenvolvimento de novas funcionalidades e pacotes.\nCaso queira saber mais sobre a linguagem R, acesse o site oficial (R-Project).\nAo instalar o R, você terá acesso a um programa chamado “R Console” que permite escrever e executar códigos em R:\n\n\n\nCaptura de tela do R Console no Windows\n\n\nPorém o R Console não é muito amigável para escrever códigos complexos ou realizar análises de dados. Por isso, é recomendado utilizar um ambiente de desenvolvimento integrado (IDE). A IDE mais utilizada por pessoas que programam em R é o RStudio.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introdução ao R e RStudio</span>"
    ]
  },
  {
    "objectID": "praticas/01_intro_r_rstudio.html#o-que-é-o-rstudio",
    "href": "praticas/01_intro_r_rstudio.html#o-que-é-o-rstudio",
    "title": "1  Introdução ao R e RStudio",
    "section": "1.3 O que é o RStudio?",
    "text": "1.3 O que é o RStudio?\n\nO RStudio é um IDE focada em programação em R, e é desenvolvido pela Posit. Ele facilita a escrita de códigos, execução de scripts, e visualização dos resultados.\nExistem algumas versões do RStudio. Neste curso, utilizaremos o RStudio Desktop, pois é a versão de código aberto (portanto é gratuita). Daqui em diante, sempre que mencionarmos “RStudio”, estaremos nos referindo ao RStudio Desktop.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introdução ao R e RStudio</span>"
    ]
  },
  {
    "objectID": "praticas/01_intro_r_rstudio.html#instalando-o-r-e-o-rstudio",
    "href": "praticas/01_intro_r_rstudio.html#instalando-o-r-e-o-rstudio",
    "title": "1  Introdução ao R e RStudio",
    "section": "1.4 Instalando o R e o RStudio",
    "text": "1.4 Instalando o R e o RStudio\nDurante as aulas, utilizaremos os computadores do laboratório da universidade. Porém, caso você tenha acesso a um computador pessoal, recomendamos que instale o R e o RStudio nele, para praticar fora do período das aulas.\n\n1.4.1 Instalação do R\nPara instalar o R, acesse o site CRAN e escolha o link de download de acordo com o seu sistema operacional:\n\n\n\n\n\n\n\nCaptura de tela do site CRAN\n\n\nInstale o R utilizando o instalador baixado.\n\n\n1.4.2 Instalação do RStudio\nApós instalar o R, acesse o site RStudio Desktop e escolha o link de download de acordo com o seu sistema operacional:\n\n\n\n\n\n\n\nCaptura de tela do site RStudio Desktop\n\n\nInstale o RStudio utilizando o instalador baixado.\n\n\n\n\n\n\nDica\n\n\n\nCaso o seu computador tenha limitações para instalação de programas, você pode utilizar o Posit Cloud, uma versão online do RStudio. Entretanto, a versão gratuita do Posit Cloud tem algumas limitações, como limite de tempo de uso (25 horas por mês) e de memória RAM (1 GB).\nO vídeo abaixo apresenta um tutorial sobre como utilizar o Posit Cloud:",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introdução ao R e RStudio</span>"
    ]
  },
  {
    "objectID": "praticas/01_intro_r_rstudio.html#conhecendo-o-rstudio",
    "href": "praticas/01_intro_r_rstudio.html#conhecendo-o-rstudio",
    "title": "1  Introdução ao R e RStudio",
    "section": "1.5 Conhecendo o RStudio",
    "text": "1.5 Conhecendo o RStudio\nAo abrir o RStudio, veremos a seguinte tela:\n Aos poucos, conheceremos os painéis e funcionalidades do RStudio. Neste momento, podemos destacar os três painéis que são apresentados:\n\nConsole: painel onde os códigos são executados. É similar ao “R Console”, citado anteriormente.\nEnvironment: painel onde as variáveis e dados carregados ficam listados.\nFiles: painel onde podemos navegar por arquivos no computador. A página inicial é o diretório de trabalho: esse conceito será explicado mais adiante.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introdução ao R e RStudio</span>"
    ]
  },
  {
    "objectID": "praticas/01_intro_r_rstudio.html#scripts",
    "href": "praticas/01_intro_r_rstudio.html#scripts",
    "title": "1  Introdução ao R e RStudio",
    "section": "1.6 Scripts",
    "text": "1.6 Scripts\nNo RStudio, podemos escrever e executar códigos no Console, porém os códigos são perdidos quando fechamos o programa. Para salvar os códigos e reutilizá-los posteriormente, utilizamos scripts.\nOs scripts são arquivos de texto onde podemos escrever códigos R e salvá-los para utilizar posteriormente. É recomendado que qualquer código que você deseje reutilizar ou que seja importante para a análise que você fizer seja salvo em um script.\nExistem algumas formas de criar um novo script:\n\nNo menu superior, clicando em File &gt; New File &gt; R Script.\nUtilizando o atalho Ctrl + Shift + N (Windows) ou Cmd + Shift + N (Mac).\nClicando no ícone de um arquivo com um sinal de + no canto superior esquerdo do RStudio e selecionando R Script:\n\n\n\n\nCaptura de tela do RStudio: Opção para criar novo Script\n\n\nApós abrir um script, o RStudio exibirá 4 paineis:\n\n\n\nCaptura de tela do RStudio\n\n\n\n\n\n\n\n\nDica\n\n\n\nO script é um arquivo salvo no nosso computador. Lembre-se de salvar os scripts com frequência para evitar perder o nosso trabalho.\nPodemos salvar um script de algumas formas, como:\n\nClicando em File &gt; Save no menu superior.\nClicando no ícone do disquete ().\nUtilizando o atalho Ctrl + S (Windows) ou Cmd + S (Mac).\n\n\n\n\n1.6.1 Como executar os códigos?\nPodemos escrever e executar códigos no Console ou em um script.\nNo Console, escrevemos o código diretamente e pressionamos Enter para executá-lo.\nEm um Script, escrevemos o código e podemos executá-lo de algumas formas:\n\nSelecionando o trecho de código que queremos executar e clicando no botão Run do RStudio, ou utilizando o atalho Ctrl + Enter (Windows) ou Cmd + Enter (Mac).\nClicando no trecho que queremos executar e clicando no botão Run do RStudio, ou utilizando o atalho Ctrl + Enter (Windows) ou Cmd + Enter (Mac).\n\n\n\n1.6.2 Comentários\nComentários são textos que não são executados pelo R. Podemos usar comentários para explicar o que um bloco de código faz, para anotar ideias e explicar escolhas feitas, ou para desativar temporariamente um trecho de código.\nNo R, todo texto em uma linha após um hashtag (#) é um comentário. Por exemplo:\n\n# Este é um comentário",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introdução ao R e RStudio</span>"
    ]
  },
  {
    "objectID": "praticas/01_intro_r_rstudio.html#funções",
    "href": "praticas/01_intro_r_rstudio.html#funções",
    "title": "1  Introdução ao R e RStudio",
    "section": "1.7 Funções",
    "text": "1.7 Funções\nAgora que já sabemos onde escrever nossos códigos em R (no Console ou em um script), é importante entender o conceito de funções.\nUma função é tipo de objeto no R, que quando executado, executa um bloco de código específico. As funções são úteis para evitar repetição de códigos e organizar o nosso trabalho.\nNo R, existem muitas funções prontas que podemos utilizar. Por exemplo, a função Sys.Date() retorna a data atual do sistema:\n\n# Consutar a data atual do sistema (computador)\nSys.Date()\n\n[1] \"2025-05-29\"\n\n\nPara utilizar uma função, escrevemos o nome dela seguido de parênteses. Dentro dos parênteses, podemos colocar dados e informações úteis para a função executar a tarefa desejada, e são chamados de argumentos.\nPor exemplo, a função sqrt() calcula a raiz quadrada de um número. Para utilizá-la, podemos escrever sqrt() e informar esse número entre parênteses:\n\n# Calcular a raiz quadrada de 25\nsqrt(25)\n\n[1] 5\n\n\n\n\n\n\n\n\nDica\n\n\n\nAo adquirir experiência com o R, podemos criar nossas próprias funções. Isso é útil para automatizar tarefas repetitivas e para organizar o código.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introdução ao R e RStudio</span>"
    ]
  },
  {
    "objectID": "praticas/01_intro_r_rstudio.html#pacotes",
    "href": "praticas/01_intro_r_rstudio.html#pacotes",
    "title": "1  Introdução ao R e RStudio",
    "section": "1.8 Pacotes",
    "text": "1.8 Pacotes\nPacotes do R são coleções de funções, dados e documentação que estendem a funcionalidade básica da linguagem.\nO CRAN (Comprehensive R Archive Network) é o repositório oficial de pacotes do R. Ele contém milhares de pacotes que podem ser instalados e utilizados gratuitamente. Em maio de 2025, o CRAN continha mais de 22.000 pacotes disponíveis.\nPara instalar um pacote, utilizamos a função install.packages() e informando o nome do pacote como texto entre aspas. Por exemplo, para instalar o pacote {tidyverse}, utilizamos o seguinte comando:\n\n# Instalar o pacote tidyverse\ninstall.packages(\"tidyverse\") \n\nApenas precisamos instalar um pacote uma vez.\nDepois de instalado, podemos carregá-lo com a função library(), para que as funções do pacote fiquem disponíveis para uso:\n\n# Carregar o pacote tidyverse\nlibrary(tidyverse) \n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nPrecisamos carregar o pacote sempre que abrirmos um novo script, ou quando reiniciamos o RStudio. Uma pratica frequente é carregar os principais pacotes necessários no início do script.\n\n\n\n\n\n\nCuidado\n\n\n\nUma outra forma de acessar uma função é utilizando o operador ::. Por exemplo, para acessar a função read_csv() do pacote {readr}, podemos escrever readr::read_csv().\nEssa sintaxe é menos frequente, porém útil para evitar problemas de conflito de funções com o mesmo nome em pacotes diferentes. Esse problema acontece mais frequentemente quando carregamos muitos pacotes em um mesmo script.\nPor exemplo: o pacote {dplyr} apresenta uma função filter(), e o pacote {stats} também apresenta uma função filter(). Se não usarmos o operador ::, a função utilizada será a do pacote que foi carregado por último. Usando o operador ::, podemos escolher qual função queremos utilizar.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introdução ao R e RStudio</span>"
    ]
  },
  {
    "objectID": "praticas/01_intro_r_rstudio.html#documentação",
    "href": "praticas/01_intro_r_rstudio.html#documentação",
    "title": "1  Introdução ao R e RStudio",
    "section": "1.9 Documentação",
    "text": "1.9 Documentação\nAs funções e pacotes do R apresentam textos com explicações e exemplos de uso, chamados de documentação.\nAs documentações podem ser acessadas online, ou diretamente no RStudio.\n\n1.9.1 Documentação no RStudio\nNo RStudio, podemos acessar a documentação de uma função ou pacote das seguintes formas:\n\nPara buscar informações sobre funções de pacotes já carregados (com library), podemos utilizar a função help(), informando o nome da função que queremos buscar como argumento (ex: help(mean)), ou utilizar o operador ?, seguido do nome da função (ex: ?mean).\n\n\n# Abrir a documentação da função mean()\nhelp(mean)\n?mean  \n\n\nPara fazer uma por funções presentes em todos os pacotes instalados no computador, podemos utilizar o operador ??, seguido pelo termo que queremos buscar (ex: ??mean). Essa é uma busca mais ampla, que procura pelo termo no nome e na descrição das funções.\n\n\n# Buscar por funções que contenham o termo \"mean\"\n??mean \n\n\nPodemos utilizar o painel Help para buscar informações sobre funções e pacotes:\n\n\n\n\nCaptura de tela do RStudio: Painel Help\n\n\nAlém disso, a maioria dos pacotes vem com textos explicativos sobre como usá-los, chamadas de vignettes. Elas estão disponíveis online, mas também podem ser acessadas diretamente no RStudio.\nPara acessar no RStudio, podemos usar a função browseVignettes() para listar as vignettes disponíveis para um pacote específico. A lista será apresentada em uma janela do navegador (ex: Google Chrome, Firefox, Safari, etc):\n\n# Listar as vignettes do pacote dplyr\nbrowseVignettes(\"dplyr\")\n\n\n\n\nCaptura de tela: Lista de Vignettes do pacote dplyr\n\n\n\n\n1.9.2 Documentação online\nComo citado anteriormente, é possível acessar a documentação dos pacotes diretamente no RStudio e também online. No geral, o conteúdo disponível online é igual ao disponível no RStudio, mas pode ser mais fácil de buscar e navegar.\nUma forma de acessar a documentação online é fazendo uma busca no Google com os termos “R documentation {nome da função}”. Por exemplo: “R documentation mean()”.\nAlguns pacotes apresentam também sites próprios com documentações e vignettes.\nPor exemplo, o pacote {dplyr} (que usaremos no curso) tem um site próprio onde conseguimos acessar a documentação. Os pacotes do tidyverse apresentam sites similares, com páginas com os seguintes conteúdos:\n\nEm Get started encontramos uma introdução ao pacote, e exemplos de uso para quem quer aprender a usá-lo.\nEm Reference, encontramos a lista de funções disponíveis no pacote, e podemos acessar a documentação de cada uma delas:\n\n\n\n\nCaptura de tela: Site do pacote dplyr - Reference\n\n\n\nEm Articles podemos acessar as vignettes:\n\n\n\n\nCaptura de tela: Site do pacote dplyr - Vignettes\n\n\n\n\n1.9.3 Cheatsheets\nAs cheatsheets (ou folhas de cola) são documentos resumidos com informações sobre funções e pacotes. Elas são úteis para consulta rápida.\nA Posit (empresa que desenvolve o RStudio) disponibiliza cheatsheets para diversos pacotes e tópicos. Elas podem ser acessadas no site Posit Cheatsheets.\nA lista a seguir apresenta algumas cheatsheets sobre temas que serão abordados ao longo do curso:\n\nRStudio IDE\nImportação de dados com o tidyverse\nTransformação de dados com dplyr\nVisualização de dados com ggplot2\nArrumando dados com tidyr",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introdução ao R e RStudio</span>"
    ]
  },
  {
    "objectID": "praticas/01_intro_r_rstudio.html#materiais-complementares",
    "href": "praticas/01_intro_r_rstudio.html#materiais-complementares",
    "title": "1  Introdução ao R e RStudio",
    "section": "1.10 Materiais complementares",
    "text": "1.10 Materiais complementares\n\nMateriais do curso Introdução à análise de dados no R:\n\nInstalação\nConhecendo o R e o RStudio\n\nLivro R para Ciência de Dados 2ed:\n\nIntrodução &gt; Pré-requisitos em diante\nFluxo de Trabalho: obtendo ajuda",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introdução ao R e RStudio</span>"
    ]
  },
  {
    "objectID": "praticas/02_conceitos-basicos-r.html",
    "href": "praticas/02_conceitos-basicos-r.html",
    "title": "2  Linguagem R",
    "section": "",
    "text": "2.1 Operações matemáticas\nExistem muitos conceitos básicos que são fundamentais para quem está começando a programar em R.\nNesta aula, vamos abordar alguns conceitos considerados mais importantes para as próximas aulas.\nO R permite realizar operações matemáticas básicas, como soma, subtração, multiplicação, divisão, potenciação, entre outras.\n1 + 1 # Soma\n\n[1] 2\n\n1 - 1 # Subtração\n\n[1] 0\n\n2 * 3 # Multiplicação\n\n[1] 6\n\n10 / 2 # Divisão\n\n[1] 5\n\n2 ^ 3 # Potenciação\n\n[1] 8\nA ordem matemática das operações também vale no R. Por exemplo, a expressão 2 + 3 * 4 será calculada como 2 + (3 * 4):\n2 + 3 * 4\n\n[1] 14",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Linguagem R</span>"
    ]
  },
  {
    "objectID": "praticas/02_conceitos-basicos-r.html#objetos",
    "href": "praticas/02_conceitos-basicos-r.html#objetos",
    "title": "2  Linguagem R",
    "section": "2.2 Objetos",
    "text": "2.2 Objetos\nNo R, um objeto é uma estrutura de dados que armazena valores: podemos armazenar um valor único, um conjunto de valores, uma base de dados, entre outros.\nÉ muito útil armazenar valores em objetos, pois podemos reutilizá-los em diferentes partes do código, sem precisar digitar o valor novamente.\n\n2.2.1 Objetos existentes no R\nExistem alguns objetos já criados no R, como por exemplo o objeto letters, que armazena as letras do alfabeto:\n\npi\n\n[1] 3.141593\n\nletters\n\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n[20] \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\"\n\n\n\n\n\n\n\n\nAviso\n\n\n\nO R é case-sensitive, ou seja, ele diferencia letras maiúsculas de minúsculas. Portanto, nome é diferente de Nome.\nPor exemplo, o objeto pi armazena o valor de π (com um número limitado de casas decimais). O nome do objeto é escrito em minúsculas:\n\npi\n\n[1] 3.141593\n\n\nSe tentarmos acessar o objeto com o nome em maiúsculas, o R irá retornar um erro, pois esse objeto não existe:\n\nPi\n\nError: object 'Pi' not found\n\n\n\n\n\n\n2.2.2 Criando um objeto\nPara criar um objeto, precisamos definir um nome, e atribuir um valor à este nome. Para isso, usamos o operador de atribuição: &lt;-. Um atalho para esse operador é o Ctrl + - no Windows, ou Option + - no Mac .\nNo exemplo a seguir, criamos um objeto chamado nome_do_curso e atribuímos a ele o texto \"Universidade Federal do ABC\":\n\nnome_do_curso &lt;- \"Universidade Federal do ABC\"\n\nPodemos acessar o valor armazenado em um objeto digitando o nome do objeto:\n\nnome_do_curso\n\n[1] \"Universidade Federal do ABC\"\n\n\nO objeto apenas será alterado se utilizarmos o operador de atribuição novamente. Por exemplo, a função tolower() transforma todas as letras de um texto em minúsculas:\n\ntolower(nome_do_curso)\n\n[1] \"universidade federal do abc\"\n\n\nMas como não utilizamos a atribuição, o objeto nome_do_curso não foi alterado:\n\nnome_do_curso\n\n[1] \"Universidade Federal do ABC\"\n\n\nPara alterar o objeto, precisamos atribuir o resultado da função tolower() ao objeto nome_do_curso:\n\nnome_do_curso &lt;- tolower(nome_do_curso)\n\nAgora, o objeto nome_do_curso foi alterado:\n\nnome_do_curso\n\n[1] \"universidade federal do abc\"\n\n\nPortanto, cuidado: ao criar um objeto com nome igual à outro objeto existente, o objeto anterior será substituído pelo novo objeto.\n\n\n2.2.3 Consultando os objetos criados\nPara consultar os objetos criados, podemos usar a função ls() (list objects), que lista todos os objetos criados no Painel Environment:\n\nls()\n\n[1] \"nome_do_curso\"   \"pandoc_dir\"      \"quarto_bin_path\"\n\n\nOutra forma é consultar o Painel Environment no RStudio, que exibe todos os objetos criados, e permite acessar o valor de cada objeto:\n\n\n\nCaptura de tela do RStudio: Painel Environment\n\n\n\n\n2.2.4 Removendo objetos\nCaso queira remover um objeto, podemos usar a função rm() (remove objects). Por exemplo, para remover o objeto nome_do_curso:\n\nrm(nome_do_curso)\n\nPodemos consultar novamente os objetos existentes e verificar se o objeto foi removido:\n\nls()\n\n[1] \"nome_do_curso\"   \"pandoc_dir\"      \"quarto_bin_path\"\n\n\nCaso queira remover todos os objetos carregados, podemos usar a função rm(list = ls()).\n\n# Remover todos os objetos do Global Environment\nrm(list = ls())\n\n\n\n2.2.5 Nomeando objetos\nExistem regras e boas práticas para nomear objetos no R. As regras são obrigatórias: se não seguirmos, o código irá gerar um erro. As boas práticas são recomendações, com o objetivo de evitar erros futuros, e facilitar a leitura do código.\n\n\n\n\n\n\nDica\n\n\n\nRecomendamos seguir essas recomendações não apenas para o nome dos objetos, mas também para nome de pastas e arquivos, nome de colunas, entre outros.\n\n\n\n2.2.5.1 Regras para nomear objetos no R\n\nO nome não deve começar com um número. Ex: 1objeto não é um nome válido.\n\n\n1objeto &lt;- \"exemplo\"\n\nError in parse(text = input): &lt;text&gt;:1:2: unexpected symbol\n1: 1objeto\n     ^\n\n\n\nO nome não deve começar com underline (_). Ex: _objeto não é um nome válido.\n\n\n_objeto &lt;- \"exemplo\"\n\nError in parse(text = input): &lt;text&gt;:1:2: unexpected symbol\n1: _objeto\n     ^\n\n\n\nO nome do objeto não deve conter traços (-), pois o R interpreta o traço como um operador de subtração. Ex: meu-objeto não é um nome válido.\n\n\nobjeto-1 &lt;- \"exemplo\"\n\nError: object 'objeto' not found\n\n\n\n\n2.2.5.2 Boas práticas para nomear objetos no R\n\nO nome não deve começar com um ponto. Isso não gerará um erro, porém é contra-indicado pois essa sintaxe é utilizada para nomear objetos ocultos no R (portanto, não aparecerá no Painel Environment), e isso pode dificultar o acesso posteriormente. Ex: .objeto não deve ser usado.\nNão utilizar acentos, cedilhas, ou outros caracteres especiais. Isso pode gerar problemas de compatibilidade com outros sistemas (chamamos de encoding). Ex: aviões não é um nome recomendado.\nNão utilizar espaços, pois dificulta o acesso ao objeto posteriormente: precisaremos utilizar a crase em volta do nome do objeto para acessá-lo.\nExistem diferentes estilos para nomear objetos1, como snake_case, onde todas as letras devem ser minúsculas, e as palavras separadas por underline. O importante é escolher um estilo e manter a consistência.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Linguagem R</span>"
    ]
  },
  {
    "objectID": "praticas/02_conceitos-basicos-r.html#tipos-de-dados",
    "href": "praticas/02_conceitos-basicos-r.html#tipos-de-dados",
    "title": "2  Linguagem R",
    "section": "2.3 Tipos de dados",
    "text": "2.3 Tipos de dados\nExistem diferentes tipos de dados que podemos armazenar em objetos no R, como números, textos, lógicos, fatores, datas, entre outros.\nÉ muito importante identificar o tipo de dado que estamos trabalhando, pois cada tipo de dado permite usar funções específicas.\nA função class() permite verificar a classe de um objeto. Por exemplo, podemos verificar a classe do objeto pi:\n\nclass(pi)\n\n[1] \"numeric\"\n\n\n\n2.3.1 Numérico\nOs objetos numéricos no R podem ser de dois tipos:\n\ninteiros (integer): armazena apenas números inteiros, ou seja, sem casas decimais. Ex: 1, 2, 3, 4, 5.\nnuméricos (numeric ou double): armazena números que podem conter casas decimais. Ex: 1, 2, 3.14, 4, 5.\n\nNa maioria dos casos, utilizamos o tipo numeric para armazenar números, pois ele é mais flexível.\nPor exemplo, para criar um objeto que armazena o número 42:\n\nexemplo_numero &lt;- 42\nclass(exemplo_numero)\n\n[1] \"numeric\"\n\n\nPara criar um objeto que armazena um valor usado para converter dólar em reais (R$), podemos usar o tipo numeric:\n\nconversao_dolar &lt;- 5.45\nclass(conversao_dolar)\n\n[1] \"numeric\"\n\n\n\n\n2.3.2 Lógico (booleano)\nO tipo lógico (logical) armazena valores booleanos: TRUE (verdadeiro) ou FALSE (falso). Os valores binários podem ser convertidos para números, onde TRUE será 1, e FALSE será 0.\nPor exemplo, para criar objetos com os valores lógicos TRUE e FALSE:\n\nexemplo_logico_verdadeiro &lt;- TRUE\nclass(exemplo_logico_verdadeiro)\n\n[1] \"logical\"\n\nexemplo_logico_falso &lt;- FALSE\nclass(exemplo_logico_falso)\n\n[1] \"logical\"\n\n\n\n\n2.3.3 Character (texto)\nO tipo texto (character, ou também conhecido como string) armazena textos. Para criar um objeto com um texto, precisamos colocar o texto entre aspas:\n\nnome_do_curso &lt;- \"Universidade Federal do ABC\"\nclass(nome_do_curso)\n\n[1] \"character\"\n\n\n\n\n2.3.4 Fator (categórico)\nO tipo fator (factor) armazena variáveis categóricas, ou seja, variáveis que possuem um número limitado de categorias. Os valores possíveis de categoria são chamados de levels. Os fatores podem ser ordenados ou não ordenados.\nOs fatores são muito úteis para a visualização de dados e para alguns modelos usados em análise de dados.\nNeste momento, não vamos aprofundar no conceito de fatores: falaremos mais sobre eles nas próximas aulas.\n\n\n2.3.5 Datas\nO tipo data (Date) armazena datas no formato aaaa-mm-dd (ano-mês-dia).\nPara criar um objeto com uma data, podemos usar a função as.Date(), que converte um texto para o tipo Date. Por exemplo, para criar um objeto com a data de início do curso:\n\ndata_inicio_curso &lt;- as.Date(\"2025-06-02\")\nclass(data_inicio_curso)\n\n[1] \"Date\"\n\n\nA função Sys.Date() retorna a data atual do sistema:\n\ndata_sistema &lt;- Sys.Date()\nclass(data_sistema)\n\n[1] \"Date\"\n\n\nPodemos fazer operações com datas:\n\n# Diferença entre duas datas\ndata_inicio_curso - data_sistema \n\nTime difference of 4 days\n\n# Somar um dia à data atual\ndata_sistema + 1  \n\n[1] \"2025-05-30\"\n\n# Somar um dia à data de início do curso\nas.Date(\"2025-06-02\") + 1 \n\n[1] \"2025-06-03\"",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Linguagem R</span>"
    ]
  },
  {
    "objectID": "praticas/02_conceitos-basicos-r.html#conversões-entre-tipos-de-dados",
    "href": "praticas/02_conceitos-basicos-r.html#conversões-entre-tipos-de-dados",
    "title": "2  Linguagem R",
    "section": "2.4 Conversões entre tipos de dados",
    "text": "2.4 Conversões entre tipos de dados\nExistem várias funções que podemos usar para transformar variáveis de um tipo para outro. Essas funções tem começam com as. seguido pelo tipo de dado que queremos que seja convertido. Por exemplo:\n\nas.character(): converte valores para texto\nas.numeric(): converte valores para número\nas.logical(): converte valores para lógico\nas.factor(): converte valores para fator\nas.Date(): converte valores para data\n\n\n#  Converter número para texto\nas.character(2024) \n\n[1] \"2024\"\n\n# Converter lógico para número\nas.numeric(TRUE)\n\n[1] 1\n\n# Converter texto para data\nas.Date(\"2024-10-01\")\n\n[1] \"2024-10-01\"\n\n# Converter texto para lógico\nas.logical(\"TRUE\")\n\n[1] TRUE\n\n\nPorém, nem toda conversão fará sentido. Por exemplo, podemos converter um número para texto, porém nem toda conversão de texto para número funcionará como esperado:\n\n# Converter para número com a função as.numeric()\nas.numeric(\"2025\") \n\n[1] 2025\n\nas.numeric(\"Aprendendo R\") \n\nWarning: NAs introduced by coercion\n\n\n[1] NA\n\n\nQuando a conversão não é possível, o R irá retornar um valor NA (Not Available), que indica um valor faltante. Falaremos mais sobre valores faltantes na próxima seção.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Linguagem R</span>"
    ]
  },
  {
    "objectID": "praticas/02_conceitos-basicos-r.html#valores-faltantes-na",
    "href": "praticas/02_conceitos-basicos-r.html#valores-faltantes-na",
    "title": "2  Linguagem R",
    "section": "2.5 Valores faltantes (NA)",
    "text": "2.5 Valores faltantes (NA)\nValores faltantes, conhecidos também como missing values, são valores que não estão disponíveis, ou que não foram informados. No R, esses valores são representados pelo valor NA (Not Available).\nPodemos testar se um valor é NA usando a função is.na(): essa função retornará TRUE se o valor for NA, e FALSE caso contrário.\n\nis.na(NA)\n\n[1] TRUE\n\n\nAlgo importante é que o R não consegue fazer operações matemáticas com valores NA. Por exemplo, se tentarmos realizar qualquer operação matemática com NA, o resultado será NA:\n\nNA + 1\n\n[1] NA\n\nNA + NA\n\n[1] NA\n\nNA * 2\n\n[1] NA\n\n\nÉ importante identificar os valores NA em nossos dados, pois eles podem afetar o resultado de nossas análises. Por exemplo, se tentarmos calcular a média de um conjunto com valores NA, o resultado será NA:\n\nnumeros_com_na &lt;- c(1, 2, NA, 4, 5)\nmean(numeros_com_na)\n\n[1] NA\n\n\nEm aulas futuras falaremos sobre como identificar os NA em nossos dados, e algumas estratégias para lidar com eles. Neste momento, podemos utilizar o argumento na.rm = TRUE para que os NA sejam removidos antes de executar a função que calcula a média:\n\nmean(numeros_com_na, na.rm = TRUE)\n\n[1] 3",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Linguagem R</span>"
    ]
  },
  {
    "objectID": "praticas/02_conceitos-basicos-r.html#tipos-de-objetos",
    "href": "praticas/02_conceitos-basicos-r.html#tipos-de-objetos",
    "title": "2  Linguagem R",
    "section": "2.6 Tipos de objetos",
    "text": "2.6 Tipos de objetos\nExistem diferentes tipos de objetos no R, e cada tipo de objeto possui diferentes propriedades. Os principais tipos de objetos que utilizaremos ao longo do curso são: vetores, data.frames e listas.\n\n2.6.1 Vetores\nVetores armazenam um conjunto de valores de uma dimensão. Eles podem ser criados com a função c(), que significa combine (combinar). Por exemplo, para criar um vetor com os números de 1 a 5:\n\nvetor_de_numeros &lt;- c(1, 2, 3, 4, 5)\n\nOs vetores podem armazenar diferentes tipos de dados, como números, textos, fatores, entre outros. Porém cada vetor pode armazenar apenas um tipo de dado. Por exemplo, se tentarmos criar um vetor que armazena números e textos, o R irá converter todos os valores para texto. Essa propriedade é chamada de coerção.\n\nvetor_misto &lt;- c(1, 2, \"três\", 4, 5)\nclass(vetor_misto)\n\n[1] \"character\"\n\nvetor_misto\n\n[1] \"1\"    \"2\"    \"três\" \"4\"    \"5\"   \n\n\nNo geral, podemos converter dados sem perder informação seguindo essa ordem: Lógico &gt; Inteiro &gt; Numérico &gt; Texto.\n\n\n2.6.2 Matrizes\nAs matrizes são conjunto de valores com duas dimensões: linhas e colunas. Assim como os vetores, as matrizes podem armazenar apenas um tipo de dado.\nPara criar uma matriz, usamos a função matrix(). Por exemplo, para criar uma matriz com 2 linhas e 3 colunas, armazenando os números de 1 a 6, podemos usar o seguinte código:\n\nmatriz &lt;- matrix(data = 1:6, nrow = 2, ncol = 3)\nmatriz\n\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n\n\n\n\n2.6.3 Data.frames\nOs data.frames são conjuntos de valores com duas dimensões: linhas e colunas. Porém, diferente do que vimos para as matrizes, os data.frames podem armazenar diferentes tipos de dados em cada coluna.\nEsse é o principal tipo de objeto que utilizaremos nesse curso, pois ele é muito útil para armazenar dados tabulares.\nExistem alguns data.frames já criados no R, como o airquality, que armazena dados sobre a qualidade do ar na cidade de Nova York, em 1973. Essas são as primeiras linhas do data.frame airquality:\n\nhead(airquality)\n\n  Ozone Solar.R Wind Temp Month Day\n1    41     190  7.4   67     5   1\n2    36     118  8.0   72     5   2\n3    12     149 12.6   74     5   3\n4    18     313 11.5   62     5   4\n5    NA      NA 14.3   56     5   5\n6    28      NA 14.9   66     5   6\n\n\nPara criar um data.frame, podemos usar a função data.frame(). Entretanto, o mais comum é importar dados de arquivos, como CSV, Excel, ou de bancos de dados. Falaremos sobre como importar dados na próxima aula.\n\n\n2.6.4 Listas\nAs listas são os objetos mais flexíveis do R: podemos armazenar diferentes tipos de objetos dentro de uma mesma lista. Por exemplo, podemos armazenar um vetor, uma matriz, um data.frame, e até mesmo outra lista dentro de uma lista.\nPodemos criar uma lista com a função list(). Os elementos da lista podem ser nomeados ou não. Vamos criar uma lista nomeada, com três elementos: o número π, o data.frame airquality, e o vetor letters:\n\nlista_exemplo &lt;- list(numero_pi = pi,\n                      df_qualidade_do_ar = airquality,\n                      letras = letters)\nclass(lista_exemplo)\n\n[1] \"list\"\n\n\nA função str() (structure) exibe a estrutura da lista, mostrando os elementos e seus tipos:\n\nstr(lista_exemplo)\n\nList of 3\n $ numero_pi         : num 3.14\n $ df_qualidade_do_ar:'data.frame': 153 obs. of  6 variables:\n  ..$ Ozone  : int [1:153] 41 36 12 18 NA 28 23 19 8 NA ...\n  ..$ Solar.R: int [1:153] 190 118 149 313 NA NA 299 99 19 194 ...\n  ..$ Wind   : num [1:153] 7.4 8 12.6 11.5 14.3 14.9 8.6 13.8 20.1 8.6 ...\n  ..$ Temp   : int [1:153] 67 72 74 62 56 66 65 59 61 69 ...\n  ..$ Month  : int [1:153] 5 5 5 5 5 5 5 5 5 5 ...\n  ..$ Day    : int [1:153] 1 2 3 4 5 6 7 8 9 10 ...\n $ letras            : chr [1:26] \"a\" \"b\" \"c\" \"d\" ...",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Linguagem R</span>"
    ]
  },
  {
    "objectID": "praticas/02_conceitos-basicos-r.html#materiais-complementares",
    "href": "praticas/02_conceitos-basicos-r.html#materiais-complementares",
    "title": "2  Linguagem R",
    "section": "2.7 Materiais complementares",
    "text": "2.7 Materiais complementares\n\nMateriais do curso Introdução à análise de dados no R:\n\nDiretório de trabalho e projetos\nLinguagem R\n\nLivro R para Ciência de Dados 2ed:\n\nFluxo de Trabalho: básico\n\nLivro Zen do R:\n\nCapítulo .RData e .Rhistory",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Linguagem R</span>"
    ]
  },
  {
    "objectID": "praticas/02_conceitos-basicos-r.html#footnotes",
    "href": "praticas/02_conceitos-basicos-r.html#footnotes",
    "title": "2  Linguagem R",
    "section": "",
    "text": "A documentação da função snakecase::to_any_case() fornece uma lista de estilos de nomenclatura disponíveis no pacote snakecase.↩︎",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Linguagem R</span>"
    ]
  }
]