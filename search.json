[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Análise de dados para o Planejamento Territorial",
    "section": "",
    "text": "Introdução\nBoas vindas!\nEste site apresenta o material de apoio para aulas práticas das disciplinas “Análise de dados para o Planejamento Territorial” e “Métodos Quantitativos para Pesquisa em PGT”, oferecidas no segundo quadrimestre de 2025 na Universidade Federal do ABC (UFABC).\nO conteúdo das aulas teóricas está disponível no Moodle.",
    "crumbs": [
      "Introdução"
    ]
  },
  {
    "objectID": "index.html#introdução",
    "href": "index.html#introdução",
    "title": "Análise de dados para o Planejamento Territorial",
    "section": "",
    "text": "Importante\n\n\n\nEste material foi feito para guiar as aulas práticas, mas você verá que ele está bem detalhado. Dessa forma, você pode usá-lo para revisar os conceitos e praticar as atividades (dentro e fora do horário das aulas).",
    "crumbs": [
      "Introdução"
    ]
  },
  {
    "objectID": "index.html#calendário",
    "href": "index.html#calendário",
    "title": "Análise de dados para o Planejamento Territorial",
    "section": "Calendário",
    "text": "Calendário\n\n\n\nSemana\nPeríodo\nPráticas\n\n\n\n\n1\n02/06/2025 - 06/06/2025\nIntrodução ao R e RStudio\n\n\n2\n02/06/2025 - 06/06/2025\nLinguagem R",
    "crumbs": [
      "Introdução"
    ]
  },
  {
    "objectID": "index.html#sobre-este-material",
    "href": "index.html#sobre-este-material",
    "title": "Análise de dados para o Planejamento Territorial",
    "section": "Sobre este material",
    "text": "Sobre este material\nEste material contém partes adaptadas de:\n\nMaterial criado por Luis Felipe Bortolatto Cunha, que atuou como professor Assistente (estágio docência) em oferecimentos anteriores da disciplina.\nMaterial do curso Introdução à análise de dados no R, ministrado por Beatriz Milz, Pedro Cavalcanti e Rafael Pereira.\n\n\nLicença\nEsse material está disponível sob a licença CC BY-SA 4.0.",
    "crumbs": [
      "Introdução"
    ]
  },
  {
    "objectID": "praticas/01_intro_r_rstudio.html",
    "href": "praticas/01_intro_r_rstudio.html",
    "title": "1  Introdução ao R e RStudio",
    "section": "",
    "text": "1.1 Introdução\nAo longo deste curso, os softwares R e RStudio serão usados como uma ferramenta para auxiliar na análise de dados para o planejamento territorial.\nÉ importante ressaltar o uso do R e do RStudio não pode ser dissociado do processo de pesquisa, que envolve a observação, formulação de hipóteses, coleta de dados e análise de dados, sendo este o foco deste curso.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introdução ao R e RStudio</span>"
    ]
  },
  {
    "objectID": "praticas/01_intro_r_rstudio.html#o-que-é-o-r",
    "href": "praticas/01_intro_r_rstudio.html#o-que-é-o-r",
    "title": "1  Introdução ao R e RStudio",
    "section": "1.2 O que é o R?",
    "text": "1.2 O que é o R?\nR é uma linguagem de programação com o foco em estatística, análise e visualização de dados.\nEla é uma linguagem de código aberto, o que significa que qualquer pessoa pode utilizá-la gratuitamente. Além disso, as pessoas com mais experiência na linguagem podem contribuir com o desenvolvimento de novas funcionalidades e pacotes.\nCaso queira saber mais sobre a linguagem R, acesse o site oficial (R-Project).\nAo instalar o R, você terá acesso a um programa chamado “R Console” que permite escrever e executar códigos em R:\n\n\n\nCaptura de tela do R Console no Windows\n\n\nPorém o R Console não é muito amigável para escrever códigos complexos ou realizar análises de dados. Por isso, é recomendado utilizar um ambiente de desenvolvimento integrado (IDE). A IDE mais utilizada por pessoas que programam em R é o RStudio.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introdução ao R e RStudio</span>"
    ]
  },
  {
    "objectID": "praticas/01_intro_r_rstudio.html#o-que-é-o-rstudio",
    "href": "praticas/01_intro_r_rstudio.html#o-que-é-o-rstudio",
    "title": "1  Introdução ao R e RStudio",
    "section": "1.3 O que é o RStudio?",
    "text": "1.3 O que é o RStudio?\n\nO RStudio é um IDE focada em programação em R, e é desenvolvido pela Posit. Ele facilita a escrita de códigos, execução de scripts, e visualização dos resultados.\nExistem algumas versões do RStudio. Neste curso, utilizaremos o RStudio Desktop, pois é a versão de código aberto (portanto é gratuita). Daqui em diante, sempre que mencionarmos “RStudio”, estaremos nos referindo ao RStudio Desktop.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introdução ao R e RStudio</span>"
    ]
  },
  {
    "objectID": "praticas/01_intro_r_rstudio.html#instalando-o-r-e-o-rstudio",
    "href": "praticas/01_intro_r_rstudio.html#instalando-o-r-e-o-rstudio",
    "title": "1  Introdução ao R e RStudio",
    "section": "1.4 Instalando o R e o RStudio",
    "text": "1.4 Instalando o R e o RStudio\nDurante as aulas, utilizaremos os computadores do laboratório da universidade. Porém, caso você tenha acesso a um computador pessoal, recomendamos que instale o R e o RStudio nele, para praticar fora do período das aulas.\n\n1.4.1 Instalação do R\nPara instalar o R, acesse o site CRAN e escolha o link de download de acordo com o seu sistema operacional:\n\n\n\n\n\n\n\nCaptura de tela do site CRAN\n\n\nInstale o R utilizando o instalador baixado.\n\n\n1.4.2 Instalação do RStudio\nApós instalar o R, acesse o site RStudio Desktop e escolha o link de download de acordo com o seu sistema operacional:\n\n\n\n\n\n\n\nCaptura de tela do site RStudio Desktop\n\n\nInstale o RStudio utilizando o instalador baixado.\n\n\n\n\n\n\nDica\n\n\n\nCaso o seu computador tenha limitações para instalação de programas, você pode utilizar o Posit Cloud, uma versão online do RStudio. Entretanto, a versão gratuita do Posit Cloud tem algumas limitações, como limite de tempo de uso (25 horas por mês) e de memória RAM (1 GB).\nO vídeo abaixo apresenta um tutorial sobre como utilizar o Posit Cloud:",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introdução ao R e RStudio</span>"
    ]
  },
  {
    "objectID": "praticas/01_intro_r_rstudio.html#conhecendo-o-rstudio",
    "href": "praticas/01_intro_r_rstudio.html#conhecendo-o-rstudio",
    "title": "1  Introdução ao R e RStudio",
    "section": "1.5 Conhecendo o RStudio",
    "text": "1.5 Conhecendo o RStudio\nAo abrir o RStudio, veremos a seguinte tela:\n Aos poucos, conheceremos os painéis e funcionalidades do RStudio. Neste momento, podemos destacar os três painéis que são apresentados:\n\nConsole: painel onde os códigos são executados. É similar ao “R Console”, citado anteriormente.\nEnvironment: painel onde as variáveis e dados carregados ficam listados.\nFiles: painel onde podemos navegar por arquivos no computador. A página inicial é o diretório de trabalho: esse conceito será explicado mais adiante.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introdução ao R e RStudio</span>"
    ]
  },
  {
    "objectID": "praticas/01_intro_r_rstudio.html#scripts",
    "href": "praticas/01_intro_r_rstudio.html#scripts",
    "title": "1  Introdução ao R e RStudio",
    "section": "1.6 Scripts",
    "text": "1.6 Scripts\nNo RStudio, podemos escrever e executar códigos no Console, porém os códigos são perdidos quando fechamos o programa. Para salvar os códigos e reutilizá-los posteriormente, utilizamos scripts.\nOs scripts são arquivos de texto onde podemos escrever códigos R e salvá-los para utilizar posteriormente. É recomendado que qualquer código que você deseje reutilizar ou que seja importante para a análise que você fizer seja salvo em um script.\nExistem algumas formas de criar um novo script:\n\nNo menu superior, clicando em File &gt; New File &gt; R Script.\nUtilizando o atalho Ctrl + Shift + N (Windows) ou Cmd + Shift + N (Mac).\nClicando no ícone de um arquivo com um sinal de + no canto superior esquerdo do RStudio e selecionando R Script:\n\n\n\n\nCaptura de tela do RStudio: Opção para criar novo Script\n\n\nApós abrir um script, o RStudio exibirá 4 paineis:\n\n\n\nCaptura de tela do RStudio\n\n\n\n\n\n\n\n\nDica\n\n\n\nO script é um arquivo salvo no nosso computador. Lembre-se de salvar os scripts com frequência para evitar perder o nosso trabalho.\nPodemos salvar um script de algumas formas, como:\n\nClicando em File &gt; Save no menu superior.\nClicando no ícone do disquete ().\nUtilizando o atalho Ctrl + S (Windows) ou Cmd + S (Mac).\n\n\n\n\n1.6.1 Como executar os códigos?\nPodemos escrever e executar códigos no Console ou em um script.\nNo Console, escrevemos o código diretamente e pressionamos Enter para executá-lo.\nEm um Script, escrevemos o código e podemos executá-lo de algumas formas:\n\nSelecionando o trecho de código que queremos executar e clicando no botão Run do RStudio, ou utilizando o atalho Ctrl + Enter (Windows) ou Cmd + Enter (Mac).\nClicando no trecho que queremos executar e clicando no botão Run do RStudio, ou utilizando o atalho Ctrl + Enter (Windows) ou Cmd + Enter (Mac).\n\n\n\n1.6.2 Comentários\nComentários são textos que não são executados pelo R. Podemos usar comentários para explicar o que um bloco de código faz, para anotar ideias e explicar escolhas feitas, ou para desativar temporariamente um trecho de código.\nNo R, todo texto em uma linha após um hashtag (#) é um comentário. Por exemplo:\n\n# Este é um comentário",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introdução ao R e RStudio</span>"
    ]
  },
  {
    "objectID": "praticas/01_intro_r_rstudio.html#funções",
    "href": "praticas/01_intro_r_rstudio.html#funções",
    "title": "1  Introdução ao R e RStudio",
    "section": "1.7 Funções",
    "text": "1.7 Funções\nAgora que já sabemos onde escrever nossos códigos em R (no Console ou em um script), é importante entender o conceito de funções.\nUma função é tipo de objeto no R, que quando executado, executa um bloco de código específico. As funções são úteis para evitar repetição de códigos e organizar o nosso trabalho.\nNo R, existem muitas funções prontas que podemos utilizar. Por exemplo, a função Sys.Date() retorna a data atual do sistema:\n\n# Consutar a data atual do sistema (computador)\nSys.Date()\n\n[1] \"2025-06-03\"\n\n\nPara utilizar uma função, escrevemos o nome dela seguido de parênteses. Dentro dos parênteses, podemos colocar dados e informações úteis para a função executar a tarefa desejada, e são chamados de argumentos.\nPor exemplo, a função sqrt() calcula a raiz quadrada de um número. Para utilizá-la, podemos escrever sqrt() e informar esse número entre parênteses:\n\n# Calcular a raiz quadrada de 25\nsqrt(25)\n\n[1] 5\n\n\nAlgumas funções podem receber mais de um argumento. Por exemplo, a função round() arredonda um número para um determinado número de casas decimais. Para utilizá-la, podemos escrever round() e informar o número e o número de casas decimais entre parênteses:\n\npi\n\n[1] 3.141593\n\n# Sem argumentos: arredondar o número pi para um número inteiro (0 casas decimais)\nround(pi)\n\n[1] 3\n\n# Com argumentos: arredondar o número pi para 2 casas decimais\nround(pi, digits = 2)\n\n[1] 3.14\n\n\nPodemos consultar a documentação de uma função para entender como ela funciona, quais argumentos ela aceita e como utilizá-la. Falaremos mais sobre isso na seção de documentação.\n\n\n\n\n\n\nDica\n\n\n\nAo adquirir experiência com o R, podemos criar nossas próprias funções. Isso é útil para automatizar tarefas repetitivas e para organizar o código.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introdução ao R e RStudio</span>"
    ]
  },
  {
    "objectID": "praticas/01_intro_r_rstudio.html#pacotes",
    "href": "praticas/01_intro_r_rstudio.html#pacotes",
    "title": "1  Introdução ao R e RStudio",
    "section": "1.8 Pacotes",
    "text": "1.8 Pacotes\nPacotes do R são coleções de funções, dados e documentação que estendem a funcionalidade básica da linguagem.\nPara instalar um pacote, utilizamos a função install.packages() e informando o nome do pacote como texto entre aspas. Por exemplo, para instalar o pacote {tidyverse}, utilizamos o seguinte comando:\n\n# Instalar o pacote tidyverse\ninstall.packages(\"tidyverse\") \n\nApenas precisamos instalar um pacote uma vez.\nDepois de instalado, podemos carregá-lo com a função library(), para que as funções do pacote fiquem disponíveis para uso:\n\n# Carregar o pacote tidyverse\nlibrary(tidyverse) \n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nPrecisamos carregar o pacote sempre que abrirmos um novo script, ou quando reiniciamos o RStudio. Uma pratica frequente é carregar os principais pacotes necessários no início do script.\n\n\n\n\n\n\nCuidado\n\n\n\nUma outra forma de acessar uma função é utilizando o operador ::. Por exemplo, para acessar a função read_csv() do pacote {readr}, podemos escrever readr::read_csv().\nEssa sintaxe é menos frequente, porém útil para evitar problemas de conflito de funções com o mesmo nome em pacotes diferentes. Esse problema acontece mais frequentemente quando carregamos muitos pacotes em um mesmo script.\nPor exemplo: o pacote {dplyr} apresenta uma função filter(), e o pacote {stats} também apresenta uma função filter(). Se não usarmos o operador ::, a função utilizada será a do pacote que foi carregado por último. Usando o operador ::, podemos escolher qual função queremos utilizar.\n\n\n\n1.8.1 Repositório de pacotes\nExistem diferentes repositórios de pacotes do R, que são locais onde os pacotes são armazenados e disponibilizados para instalação.\nO CRAN (Comprehensive R Archive Network) é o repositório oficial de pacotes do R. Ele contém milhares de pacotes que podem ser instalados e utilizados gratuitamente. Em maio de 2025, o CRAN continha mais de 22.000 pacotes disponíveis. Para que um pacote seja adicionado ao CRAN, ele deve atender a critérios de qualidade de software.\nA rOpenSci é uma organização que mantêm uma coleção de pacotes que foram revisados por pares e que atendem a critérios de qualidade. Esses pacotes são voltados para pesquisa, ciência aberta e reprodutibilidade.\n\n\n\nCaptura de tela da página da rOpenSci: página de pacotes no tema Geoespacial\n\n\nA rOpenSci também mantém o R-universe, uma plataforma que permite que pacotes sejam publicados e compartilhados de forma mais fácil. O R Universe é uma alternativa ao CRAN, e permite que pacotes sejam publicados sem a necessidade de passar pelo processo de revisão do CRAN.\n\n\n\nCaptura de tela da página do R-Universe\n\n\nOutros repositórios de pacotes também existem, como o Bioconductor, que é voltado para análise de dados biológicos e genômicos.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introdução ao R e RStudio</span>"
    ]
  },
  {
    "objectID": "praticas/01_intro_r_rstudio.html#documentação",
    "href": "praticas/01_intro_r_rstudio.html#documentação",
    "title": "1  Introdução ao R e RStudio",
    "section": "1.9 Documentação",
    "text": "1.9 Documentação\nAs funções e pacotes do R apresentam textos com explicações e exemplos de uso, chamados de documentação.\nAs documentações podem ser acessadas online, ou diretamente no RStudio.\n\n1.9.1 Documentação no RStudio\nNo RStudio, podemos acessar a documentação de uma função ou pacote das seguintes formas:\n\nPara buscar informações sobre funções de pacotes já carregados (com library), podemos utilizar a função help(), informando o nome da função que queremos buscar como argumento (ex: help(mean)), ou utilizar o operador ?, seguido do nome da função (ex: ?mean).\n\n\n# Abrir a documentação da função mean()\nhelp(mean)\n?mean  \n\n\nPara fazer uma por funções presentes em todos os pacotes instalados no computador, podemos utilizar o operador ??, seguido pelo termo que queremos buscar (ex: ??mean). Essa é uma busca mais ampla, que procura pelo termo no nome e na descrição das funções.\n\n\n# Buscar por funções que contenham o termo \"mean\"\n??mean \n\n\nPodemos utilizar o painel Help para buscar informações sobre funções e pacotes:\n\n\n\n\nCaptura de tela do RStudio: Painel Help\n\n\nAlém disso, a maioria dos pacotes vem com textos explicativos sobre como usá-los, chamadas de vignettes. Elas estão disponíveis online, mas também podem ser acessadas diretamente no RStudio.\nPara acessar no RStudio, podemos usar a função browseVignettes() para listar as vignettes disponíveis para um pacote específico. A lista será apresentada em uma janela do navegador (ex: Google Chrome, Firefox, Safari, etc):\n\n# Listar as vignettes do pacote dplyr\nbrowseVignettes(\"dplyr\")\n\n\n\n\nCaptura de tela: Lista de Vignettes do pacote dplyr\n\n\n\n\n1.9.2 Documentação online\nComo citado anteriormente, é possível acessar a documentação dos pacotes diretamente no RStudio e também online. No geral, o conteúdo disponível online é igual ao disponível no RStudio, mas pode ser mais fácil de buscar e navegar.\nUma forma de acessar a documentação online é fazendo uma busca no Google com os termos “R documentation {nome da função}”. Por exemplo: “R documentation mean()”.\nAlguns pacotes apresentam também sites próprios com documentações e vignettes.\nPor exemplo, o pacote {dplyr} (que usaremos no curso) tem um site próprio onde conseguimos acessar a documentação. Os pacotes do tidyverse apresentam sites similares, com páginas com os seguintes conteúdos:\n\nEm Get started encontramos uma introdução ao pacote, e exemplos de uso para quem quer aprender a usá-lo.\nEm Reference, encontramos a lista de funções disponíveis no pacote, e podemos acessar a documentação de cada uma delas:\n\n\n\n\nCaptura de tela: Site do pacote dplyr - Reference\n\n\n\nEm Articles podemos acessar as vignettes:\n\n\n\n\nCaptura de tela: Site do pacote dplyr - Vignettes\n\n\n\n\n1.9.3 Cheatsheets\nAs cheatsheets (ou folhas de cola) são documentos resumidos com informações sobre funções e pacotes. Elas são úteis para consulta rápida.\nA Posit (empresa que desenvolve o RStudio) disponibiliza cheatsheets para diversos pacotes e tópicos. Elas podem ser acessadas no site Posit Cheatsheets.\nA lista a seguir apresenta algumas cheatsheets sobre temas que serão abordados ao longo do curso:\n\nRStudio IDE\nImportação de dados com o tidyverse\nTransformação de dados com dplyr\nVisualização de dados com ggplot2\nArrumando dados com tidyr",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introdução ao R e RStudio</span>"
    ]
  },
  {
    "objectID": "praticas/01_intro_r_rstudio.html#materiais-complementares",
    "href": "praticas/01_intro_r_rstudio.html#materiais-complementares",
    "title": "1  Introdução ao R e RStudio",
    "section": "1.10 Materiais complementares",
    "text": "1.10 Materiais complementares\n\nMateriais do curso Introdução à análise de dados no R:\n\nInstalação\nConhecendo o R e o RStudio\n\nLivro R para Ciência de Dados 2ed:\n\nIntrodução &gt; Pré-requisitos em diante\nFluxo de Trabalho: obtendo ajuda",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introdução ao R e RStudio</span>"
    ]
  },
  {
    "objectID": "praticas/02_conceitos-basicos-r.html",
    "href": "praticas/02_conceitos-basicos-r.html",
    "title": "2  Conceitos básicos do R",
    "section": "",
    "text": "2.1 Operações matemáticas\nExistem muitos conceitos básicos que são fundamentais para quem está começando a programar em R.\nNesta aula, vamos abordar alguns conceitos considerados mais importantes para as próximas aulas.\nO R permite realizar operações matemáticas básicas, como soma, subtração, multiplicação, divisão, potenciação, entre outras.\n1 + 1 # Soma\n\n[1] 2\n\n1 - 1 # Subtração\n\n[1] 0\n\n2 * 3 # Multiplicação\n\n[1] 6\n\n10 / 2 # Divisão\n\n[1] 5\n\n2 ^ 3 # Potenciação\n\n[1] 8\nA ordem matemática das operações também vale no R. Por exemplo, a expressão 2 + 3 * 4 será calculada como 2 + (3 * 4):\n2 + 3 * 4\n\n[1] 14",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Conceitos básicos do R</span>"
    ]
  },
  {
    "objectID": "praticas/02_conceitos-basicos-r.html#objetos",
    "href": "praticas/02_conceitos-basicos-r.html#objetos",
    "title": "2  Conceitos básicos do R",
    "section": "2.2 Objetos",
    "text": "2.2 Objetos\nNo R, um objeto é uma estrutura de dados que armazena valores: podemos armazenar um valor único, um conjunto de valores, uma base de dados, entre outros.\nÉ muito útil armazenar valores em objetos, pois podemos reutilizá-los em diferentes partes do código, sem precisar digitar o valor novamente.\n\n2.2.1 Objetos existentes no R\nExistem alguns objetos já criados no R, como por exemplo o objeto letters, que armazena as letras do alfabeto:\n\npi\n\n[1] 3.141593\n\nletters\n\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n[20] \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\"\n\n\n\n\n\n\n\n\nAviso\n\n\n\nO R é case-sensitive, ou seja, ele diferencia letras maiúsculas de minúsculas. Portanto, nome é diferente de Nome.\nPor exemplo, o objeto pi armazena o valor de π (com um número limitado de casas decimais). O nome do objeto é escrito em minúsculas:\n\npi\n\n[1] 3.141593\n\n\nSe tentarmos acessar o objeto com o nome em maiúsculas, o R irá retornar um erro, pois esse objeto não existe:\n\nPi\n\nError: object 'Pi' not found\n\n\n\n\n\n\n2.2.2 Criando um objeto\nPara criar um objeto, precisamos definir um nome, e atribuir um valor à este nome. Para isso, usamos o operador de atribuição: &lt;-. Um atalho para esse operador é o Ctrl + - no Windows, ou Option + - no Mac .\nNo exemplo a seguir, criamos um objeto chamado nome_do_curso e atribuímos a ele o texto \"Universidade Federal do ABC\":\n\nnome_do_curso &lt;- \"Universidade Federal do ABC\"\n\nPodemos acessar o valor armazenado em um objeto digitando o nome do objeto:\n\nnome_do_curso\n\n[1] \"Universidade Federal do ABC\"\n\n\nO objeto apenas será alterado se utilizarmos o operador de atribuição novamente. Por exemplo, a função tolower() transforma todas as letras de um texto em minúsculas:\n\ntolower(nome_do_curso)\n\n[1] \"universidade federal do abc\"\n\n\nMas como não utilizamos a atribuição, o objeto nome_do_curso não foi alterado:\n\nnome_do_curso\n\n[1] \"Universidade Federal do ABC\"\n\n\nPara alterar o objeto, precisamos atribuir o resultado da função tolower() ao objeto nome_do_curso:\n\nnome_do_curso &lt;- tolower(nome_do_curso)\n\nAgora, o objeto nome_do_curso foi alterado:\n\nnome_do_curso\n\n[1] \"universidade federal do abc\"\n\n\nPortanto, cuidado: ao criar um objeto com nome igual à outro objeto existente, o objeto anterior será substituído pelo novo objeto.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Conceitos básicos do R</span>"
    ]
  },
  {
    "objectID": "praticas/02_conceitos-basicos-r.html#tipos-de-objetos",
    "href": "praticas/02_conceitos-basicos-r.html#tipos-de-objetos",
    "title": "2  Conceitos básicos do R",
    "section": "2.3 Tipos de objetos",
    "text": "2.3 Tipos de objetos\nExistem diferentes tipos de objetos no R, e cada tipo de objeto possui diferentes propriedades. Os principais tipos de objetos que utilizaremos ao longo do curso são: vetores e data.frames.\n\n2.3.1 Vetores\nVetores armazenam um conjunto de valores de uma dimensão. Eles podem ser criados com a função c(), que significa combine (combinar). Por exemplo, para criar um vetor com os números de 1 a 5:\n\nvetor_de_numeros &lt;- c(1, 2, 3, 4, 5)\n\nOs vetores podem armazenar diferentes tipos de dados, como números, textos, fatores, entre outros. Porém cada vetor pode armazenar apenas um tipo de dado. Por exemplo, se tentarmos criar um vetor que armazena números e textos, o R irá converter todos os valores para texto. Essa propriedade é chamada de coerção.\n\nvetor_misto &lt;- c(1, 2, \"três\", 4, 5)\nclass(vetor_misto)\n\n[1] \"character\"\n\nvetor_misto\n\n[1] \"1\"    \"2\"    \"três\" \"4\"    \"5\"   \n\n\nNo geral, podemos converter dados sem perder informação seguindo essa ordem: Lógico &gt; Inteiro &gt; Numérico &gt; Texto.\n\n\n2.3.2 Data.frames\nOs data.frames são conjuntos de valores com duas dimensões: linhas e colunas. Porém, diferente do que vimos para as matrizes, os data.frames podem armazenar diferentes tipos de dados em cada coluna.\nEsse é o principal tipo de objeto que utilizaremos nesse curso, pois ele é muito útil para armazenar dados tabulares.\nExistem alguns data.frames já criados no R, como o airquality, que armazena dados sobre a qualidade do ar na cidade de Nova York, em 1973. Essas são as primeiras linhas do data.frame airquality:\n\nhead(airquality)\n\n  Ozone Solar.R Wind Temp Month Day\n1    41     190  7.4   67     5   1\n2    36     118  8.0   72     5   2\n3    12     149 12.6   74     5   3\n4    18     313 11.5   62     5   4\n5    NA      NA 14.3   56     5   5\n6    28      NA 14.9   66     5   6\n\n\nPara criar um data.frame, podemos usar a função data.frame(). Entretanto, o mais comum é importar dados de arquivos, como CSV, Excel, ou de bancos de dados. Falaremos sobre como importar dados na próxima aula.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Conceitos básicos do R</span>"
    ]
  },
  {
    "objectID": "praticas/02_conceitos-basicos-r.html#materiais-complementares",
    "href": "praticas/02_conceitos-basicos-r.html#materiais-complementares",
    "title": "2  Conceitos básicos do R",
    "section": "2.4 Materiais complementares",
    "text": "2.4 Materiais complementares\n\nMateriais do curso Introdução à análise de dados no R:\n\nDiretório de trabalho e projetos\nLinguagem R",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Conceitos básicos do R</span>"
    ]
  },
  {
    "objectID": "praticas/03_analise-exploratoria.html",
    "href": "praticas/03_analise-exploratoria.html",
    "title": "3  Análise exploratória de dados - Parte 1",
    "section": "",
    "text": "3.1 Criando um projeto\nNesta aula, vamos conhecer algumas funções do R e do pacote tidyverse que nos ajudam a fazer uma análise exploratória dos dados.\nO RStudio possui uma funcionalidade chamada projetos. Quando criamos um projeto no RStudio, uma nova pasta é criada no computador, e o RStudio define essa pasta como o diretório de trabalho. Além disso, o RStudio também cria um arquivo com a extensão .Rproj dentro dessa pasta, que contém informações sobre o projeto.\nÉ recomendado que sempre trabalhemos em projetos no RStudio, pois isso facilita a organização dos arquivos e a reprodução do código.\nÉ recomendado também salvar os arquivos referentes ao projeto (como scripts, bases de dados, resultados, etc) dentro do projeto. Isso não significa que precisamos colocar todos os arquivos dentro da pasta principal do projeto: podemos criar sub-pastas para organizar os arquivos.\nPara criar um projeto no RStudio, primeiro precisamos acessar o menu de criação de projetos (New project Wizard). Podemos fazer isso de três formas:\nDepois, escolhemos o tipo de projeto que queremos criar. No geral, escolhemos a opção New Directory, para criar uma nova pasta no computador:\nDepois, escolhemos o tipo de projeto que queremos criar. Cada tipo de projeto apresenta arquivos específicos de template. O RStudio apresenta algumas opções de projeto, porém é possível adicionar novos tipos de projeto instalandos pacotes específicos.\nNo geral, escolhemos a opção New Project, para criar um projeto simples:\nNa tela seguinte, precisamos informar o nome do projeto (no campo Directory name) e o diretório onde ele será criado (no campo Create project as subdirectory of):\nApós preencher as informações solicitadas, clicamos em Create Project. O RStudio criará o projeto e o abrirá:",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Análise exploratória de dados - Parte 1</span>"
    ]
  },
  {
    "objectID": "praticas/03_analise-exploratoria.html#criando-um-projeto",
    "href": "praticas/03_analise-exploratoria.html#criando-um-projeto",
    "title": "3  Análise exploratória de dados - Parte 1",
    "section": "",
    "text": "No menu superior, clicando em File &gt; New Project...\nClicando no ícone de novo projeto na barra de ferramentas do RStudio: \nNo canto superior esquerdo, clicando no botão referente à projetos, e depois em New Project...:\n\n\n\n\nCaptura de tela do RStudio: Menu de projetos\n\n\n\n\n\n\nCaptura de tela do RStudio: Criando um projeto\n\n\n\n\n\n\n\nCaptura de tela do RStudio: Escolhendo o tipo de projeto\n\n\n\n\n\n\nCaptura de tela do RStudio: Nomeando o projeto\n\n\n\n\n\n\nCaptura de tela do RStudio: projeto criado\n\n\n\n\n\n\n\n\nDica\n\n\n\nNote que o nome do projeto que criamos aparece no canto superior direito do RStudio.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Análise exploratória de dados - Parte 1</span>"
    ]
  },
  {
    "objectID": "praticas/03_analise-exploratoria.html#salvando-os-dados-no-projeto",
    "href": "praticas/03_analise-exploratoria.html#salvando-os-dados-no-projeto",
    "title": "3  Análise exploratória de dados - Parte 1",
    "section": "3.2 Salvando os dados no projeto",
    "text": "3.2 Salvando os dados no projeto\nPara facilitar o trabalho, vamos salvar os dados que utilizaremos nesta aula dentro do projeto que acabamos de criar.\nPrimeiro, vamos criar uma pasta chamada dados dentro do projeto:\n\ndir.create(\"dados\")\n\nDepois, vamos baixar os dados da CETESB e salvar na pasta dados que acabamos de criar:\n\ndownload.file(\n  url = \"https://raw.githubusercontent.com/beatrizmilz/cetesb_saneamento/refs/heads/main/data-raw/dados-cetesb-tidy/2022.csv\",\n  destfile = \"dados/dados-cetesb-2022.csv\"\n)\n\nConfira se o arquivo foi baixado corretamente, e se está na pasta dados do projeto.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Análise exploratória de dados - Parte 1</span>"
    ]
  },
  {
    "objectID": "praticas/03_analise-exploratoria.html#importando-os-dados",
    "href": "praticas/03_analise-exploratoria.html#importando-os-dados",
    "title": "3  Análise exploratória de dados - Parte 1",
    "section": "3.3 Importando os dados",
    "text": "3.3 Importando os dados\nPara importar os dados que acabamos de baixar, vamos utilizar a função read_csv() do pacote readr, que faz parte do tidyverse.\nLembre-se de carregar o pacote tidyverse antes de utilizar a função read_csv():\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nAgora, podemos importar os dados:\n\ndados_cetesb &lt;- read_csv(\"dados/dados-cetesb-2022.csv\")\n\nRows: 645 Columns: 12\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): uf, municipio\ndbl (10): ano, ugrhi, codigo_ibge, populacao_urbana, atendimento_coleta_porc...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nVamos conferir se os dados foram importados corretamente, utilizando a função glimpse():\n\nglimpse(dados_cetesb)\n\nRows: 645\nColumns: 12\n$ ano                           &lt;dbl&gt; 2022, 2022, 2022, 2022, 2022, 2022, 2022…\n$ uf                            &lt;chr&gt; \"SP\", \"SP\", \"SP\", \"SP\", \"SP\", \"SP\", \"SP\"…\n$ ugrhi                         &lt;dbl&gt; 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2…\n$ municipio                     &lt;chr&gt; \"Campos do Jordão\", \"Santo Antônio do Pi…\n$ codigo_ibge                   &lt;dbl&gt; 3509700, 3548203, 3548609, 3502507, 3503…\n$ populacao_urbana              &lt;dbl&gt; 52384, 4067, 5251, 35684, 1844, 2619, 88…\n$ atendimento_coleta_porc       &lt;dbl&gt; 52.6, 46.7, 98.0, 70.0, 95.6, 100.0, 88.…\n$ atendimento_tratamento_porc   &lt;dbl&gt; 100.0, 100.0, 100.0, 0.0, 95.6, 0.0, 100…\n$ eficiencia                    &lt;dbl&gt; 93.0, 80.0, 91.3, 0.0, 99.0, 0.0, 75.0, …\n$ carga_poluidora_potencial     &lt;dbl&gt; 2829, 220, 284, 1927, 100, 141, 476, 442…\n$ carga_poluidora_remancescente &lt;dbl&gt; 1445, 138, 30, 1927, 9, 141, 161, 1858, …\n$ ictem                         &lt;dbl&gt; 5.97, 4.63, 9.97, 1.55, 9.86, 1.50, 7.61…\n\n\nA função View() também pode ser utilizada para visualizar os dados em uma tabela interativa:\n\nView(dados_cetesb)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Análise exploratória de dados - Parte 1</span>"
    ]
  },
  {
    "objectID": "praticas/03_analise-exploratoria.html#conhecendo-a-base-de-dados",
    "href": "praticas/03_analise-exploratoria.html#conhecendo-a-base-de-dados",
    "title": "3  Análise exploratória de dados - Parte 1",
    "section": "3.4 Conhecendo a base de dados",
    "text": "3.4 Conhecendo a base de dados\nPara conhecer melhor a base de dados, podemos utilizar algumas funções para explorar as colunas e os tipos de dados.\nA função colnames() nos mostra os nomes das colunas:\n\ncolnames(dados_cetesb)\n\n [1] \"ano\"                           \"uf\"                           \n [3] \"ugrhi\"                         \"municipio\"                    \n [5] \"codigo_ibge\"                   \"populacao_urbana\"             \n [7] \"atendimento_coleta_porc\"       \"atendimento_tratamento_porc\"  \n [9] \"eficiencia\"                    \"carga_poluidora_potencial\"    \n[11] \"carga_poluidora_remancescente\" \"ictem\"                        \n\n\nA função head() nos mostra as primeiras linhas da base de dados, e a função tail() nos mostra as últimas linhas:\n\nhead(dados_cetesb)\n\n# A tibble: 6 × 12\n    ano uf    ugrhi municipio               codigo_ibge populacao_urbana\n  &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt;                         &lt;dbl&gt;            &lt;dbl&gt;\n1  2022 SP        1 Campos do Jordão            3509700            52384\n2  2022 SP        1 Santo Antônio do Pinhal     3548203             4067\n3  2022 SP        1 São Bento do Sapucaí        3548609             5251\n4  2022 SP        2 Aparecida                   3502507            35684\n5  2022 SP        2 Arapeí                      3503158             1844\n6  2022 SP        2 Areias                      3503505             2619\n# ℹ 6 more variables: atendimento_coleta_porc &lt;dbl&gt;,\n#   atendimento_tratamento_porc &lt;dbl&gt;, eficiencia &lt;dbl&gt;,\n#   carga_poluidora_potencial &lt;dbl&gt;, carga_poluidora_remancescente &lt;dbl&gt;,\n#   ictem &lt;dbl&gt;\n\ntail(dados_cetesb)\n\n# A tibble: 6 × 12\n    ano uf    ugrhi municipio       codigo_ibge populacao_urbana\n  &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt;                 &lt;dbl&gt;            &lt;dbl&gt;\n1  2022 SP       22 Rosana              3544251            12828\n2  2022 SP       22 Sandovalina         3545506             3074\n3  2022 SP       22 Santo Anastácio     3547700            19434\n4  2022 SP       22 Taciba              3552908             5410\n5  2022 SP       22 Tarabai             3553906             7035\n6  2022 SP       22 Teodoro Sampaio     3554300            18996\n# ℹ 6 more variables: atendimento_coleta_porc &lt;dbl&gt;,\n#   atendimento_tratamento_porc &lt;dbl&gt;, eficiencia &lt;dbl&gt;,\n#   carga_poluidora_potencial &lt;dbl&gt;, carga_poluidora_remancescente &lt;dbl&gt;,\n#   ictem &lt;dbl&gt;\n\n\nA função summary() nos mostra um resumo de estatísticas descritivas para todas as colunas. Mas cuidado: nem todos os resultados fazem sentido (exemplo: a coluna codigo_ibge é um identificador, e não devemos calcular estatísticas descritivas para ela).\n\nsummary(dados_cetesb)\n\n      ano            uf                ugrhi        municipio        \n Min.   :2022   Length:645         Min.   : 1.00   Length:645        \n 1st Qu.:2022   Class :character   1st Qu.: 7.00   Class :character  \n Median :2022   Mode  :character   Median :13.00   Mode  :character  \n Mean   :2022                      Mean   :12.38                     \n 3rd Qu.:2022                      3rd Qu.:17.00                     \n Max.   :2022                      Max.   :22.00                     \n                                                                     \n  codigo_ibge      populacao_urbana   atendimento_coleta_porc\n Min.   :3500105   Min.   :     653   Min.   : 12.80         \n 1st Qu.:3514601   1st Qu.:    4498   1st Qu.: 88.30         \n Median :3528700   Median :   11524   Median : 98.70         \n Mean   :3528698   Mean   :   69406   Mean   : 91.06         \n 3rd Qu.:3543204   3rd Qu.:   39045   3rd Qu.:100.00         \n Max.   :3557303   Max.   :12284940   Max.   :100.00         \n                                                             \n atendimento_tratamento_porc   eficiencia    carga_poluidora_potencial\n Min.   :  0.00              Min.   : 0.00   Min.   :    35           \n 1st Qu.:100.00              1st Qu.:74.97   1st Qu.:   243           \n Median :100.00              Median :83.45   Median :   622           \n Mean   : 89.73              Mean   :77.04   Mean   :  3748           \n 3rd Qu.:100.00              3rd Qu.:88.80   3rd Qu.:  2108           \n Max.   :100.00              Max.   :99.10   Max.   :663387           \n NA's   :5                   NA's   :5                                \n carga_poluidora_remancescente     ictem      \n Min.   :     1.0              Min.   : 0.75  \n 1st Qu.:    49.0              1st Qu.: 6.78  \n Median :   156.0              Median : 8.21  \n Mean   :  1409.2              Mean   : 7.76  \n 3rd Qu.:   617.8              3rd Qu.: 9.94  \n Max.   :231038.0              Max.   :10.00  \n NA's   :5",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Análise exploratória de dados - Parte 1</span>"
    ]
  },
  {
    "objectID": "praticas/03_analise-exploratoria.html#calculando-estatísticas-descritivas",
    "href": "praticas/03_analise-exploratoria.html#calculando-estatísticas-descritivas",
    "title": "3  Análise exploratória de dados - Parte 1",
    "section": "3.5 Calculando estatísticas descritivas",
    "text": "3.5 Calculando estatísticas descritivas\nComo vimos acima, a função summary() nos dá um resumo de estatísticas descritivas para todas as colunas. Porém, podemos querer calcular estatísticas descritivas apenas para algum subconjunto dos dados.\nImagine que queremos calcular algumas estatísticas descritivas considerando cada UGRHI (Unidade de Gerenciamento de Recursos Hídricos) separadamente. Podemos fazer isso utilizando as funções group_by() e summarise().\n\ndados_cetesb |&gt;\n  # agrupar os dados pela coluna ugrhi\n  group_by(ugrhi) |&gt;\n  # calcular estatísticas descritivas para cada grupo\n  summarise(\n    quantidade_municipios = n(),\n    soma_populacao_urbana = sum(populacao_urbana),\n    media_atendimento_coleta_porc = mean(atendimento_coleta_porc, na.rm = TRUE),\n    mediana_atendimento_coleta_porc = median(atendimento_coleta_porc, na.rm = TRUE),\n    desvio_padrao_atendimento_coleta_porc = sd(atendimento_coleta_porc, na.rm = TRUE)\n  )\n\n# A tibble: 22 × 6\n   ugrhi quantidade_municipios soma_populacao_urbana media_atendimento_coleta_…¹\n   &lt;dbl&gt;                 &lt;int&gt;                 &lt;dbl&gt;                       &lt;dbl&gt;\n 1     1                     3                 61702                        65.8\n 2     2                    34               2124413                        84.2\n 3     3                     4                337159                        49.6\n 4     4                    23               1215586                        97.2\n 5     5                    57               5737151                        87.0\n 6     6                    34              21626154                        72.4\n 7     7                     9               1893370                        72.9\n 8     8                    22                707923                        98.1\n 9     9                    38               1542781                        97.0\n10    10                    33               1937230                        79.8\n# ℹ 12 more rows\n# ℹ abbreviated name: ¹​media_atendimento_coleta_porc\n# ℹ 2 more variables: mediana_atendimento_coleta_porc &lt;dbl&gt;,\n#   desvio_padrao_atendimento_coleta_porc &lt;dbl&gt;",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Análise exploratória de dados - Parte 1</span>"
    ]
  },
  {
    "objectID": "praticas/03_analise-exploratoria.html#visualizando-os-dados",
    "href": "praticas/03_analise-exploratoria.html#visualizando-os-dados",
    "title": "3  Análise exploratória de dados - Parte 1",
    "section": "3.6 Visualizando os dados",
    "text": "3.6 Visualizando os dados\nPara visualizar os dados, podemos utilizar a função ggplot() do pacote ggplot2, que também faz parte do tidyverse.\nPara quem está começando, recomendo utilizar o pacote esquisse, que facilita a criação de gráficos com o ggplot2.\n\ninstall.packages(\"esquisse\")\ninstall.packages(\"plotly\")\n\nDepois de instalar o pacote, podemos carregá-lo e utilizar a função esquisser() para criar gráficos interativos:\n\nlibrary(esquisse)\nesquisser(dados_cetesb)\n\nO esquisse oferece uma interface amigável para criar gráficos com o ggplot2, permitindo que você arraste e solte variáveis, escolha tipos de gráficos e customize os elementos do gráfico. Ao usar o esquisse, você pode gerar o código correspondente ao gráfico que está criando, e depois copiá-lo para o seu script R.\nPara criar um histograma simples, por exemplo, podemos usar o seguinte código:\n\n# inicia o gráfico com os dados `dados_cetesb`\nggplot(dados_cetesb) +\n  # define a variável que será plotada no eixo x\n  aes(x = atendimento_coleta_porc) +\n  # adiciona a geometria de histograma\n  geom_histogram() \n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\nPodemos criar também um boxplot com um código semelhante:\n\n# inicia o gráfico com os dados `dados_cetesb`\nggplot(dados_cetesb) +\n  # define a variável que será plotada no eixo y\n  aes(y = atendimento_coleta_porc) +\n  # adiciona a geometria de histograma\n  geom_boxplot() \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNota\n\n\n\nNesta aula, o objetivo foi apresentar algumas funções básicas que veremos outras vezes ao longo do curso. Não se preocupe se não entendeu tudo agora, pois iremos aprofundar esses conceitos em aulas futuras.\nSe você quiser praticar mais, recomendo que explore os materiais complementares.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Análise exploratória de dados - Parte 1</span>"
    ]
  },
  {
    "objectID": "praticas/03_analise-exploratoria.html#materiais-complementares",
    "href": "praticas/03_analise-exploratoria.html#materiais-complementares",
    "title": "3  Análise exploratória de dados - Parte 1",
    "section": "3.7 Materiais complementares",
    "text": "3.7 Materiais complementares\n\nMateriais do curso Introdução à análise de dados no R:\n\nDiretório de trabalho e projetos\nImportando dados\nConhecendo a base de dados",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Análise exploratória de dados - Parte 1</span>"
    ]
  },
  {
    "objectID": "praticas/03_analise-exploratoria.html#footnotes",
    "href": "praticas/03_analise-exploratoria.html#footnotes",
    "title": "3  Análise exploratória de dados - Parte 1",
    "section": "",
    "text": "CETESB - Companhia Ambiental do Estado de São Paulo.↩︎",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Análise exploratória de dados - Parte 1</span>"
    ]
  },
  {
    "objectID": "apendices/00_erros_frequentes.html",
    "href": "apendices/00_erros_frequentes.html",
    "title": "4  Erros e warnings frequentes",
    "section": "",
    "text": "4.1 Instalação\nA lista a seguir apresenta alguns erros e warnings mais comuns.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Erros e *warnings* frequentes</span>"
    ]
  },
  {
    "objectID": "apendices/00_erros_frequentes.html#instalação",
    "href": "apendices/00_erros_frequentes.html#instalação",
    "title": "4  Erros e warnings frequentes",
    "section": "",
    "text": "4.1.1 RTools\nPara pessoas que utilizam o sistema operacional Windows, a aviso (warning) abaixo pode aparecer em alguns contextos:\nWARNING: Rtools is required to build R packages but is not currently installed.\nPlease download and install the appropriate version of Rtools before proceeding:\n\nhttps://cran.rstudio.com/bin/windows/Rtools/\nInstalando pacote em ‘C:/Users/.../AppData/Local/R/win-library/4.4’\n(como ‘lib’ não foi especificado)\nPara que esse aviso não apareça mais, você pode instalar o Rtools no seu computador. O RTools é um software (não é um pacote do R), portanto você precisa fazer o download da versão compatível com a versão do R que você está utilizando, e instalar no seu computador.\nPara fazer o download, acesse o link https://cran.rstudio.com/bin/windows/Rtools/, e escolha a versão do RTools compatível com a versão do R que você está utilizando:\n\n\n\nCaptura de tela: página de download do RTools\n\n\nPara consultar a versão do R que você está utilizando, você pode rodar o seguinte comando no console do R:\n\nR.version.string\n\n[1] \"R version 4.5.0 (2025-04-11)\"",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Erros e *warnings* frequentes</span>"
    ]
  },
  {
    "objectID": "apendices/00_erros_frequentes.html#conceitos-básicos",
    "href": "apendices/00_erros_frequentes.html#conceitos-básicos",
    "title": "4  Erros e warnings frequentes",
    "section": "4.2 Conceitos básicos",
    "text": "4.2 Conceitos básicos\n\n4.2.1 Instalando pacotes\nO erro a seguir ocorre quando o usuário tenta instalar um pacote sem aspas. O correto é colocar o nome do pacote entre aspas.\n\n# O código abaixo gerará um erro:\ninstall.packages(janitor)\n\nError in eval(call, envir = parent.frame()): object 'janitor' not found\n\n\nA função deve receber o nome do pacote entre aspas, pois é um texto:\n\n# O código abaixo funcionará:\ninstall.packages(\"janitor\")\n\n\n\n4.2.2 Pacote não encontrado\nO erro a seguir ocorre quando tentamos carregar um pacote que não foi instalado anteriormente. Para resolver, precisamos instalar o pacote.\n\n# O código abaixo gerará um erro:\nlibrary(quarto)                   \n\nPara que consiga acessar, é necessário instalar o pacote, e depois carregá-lo:\n\ninstall.packages(\"quarto\")\nlibrary(quarto)\n\n\n\n4.2.3 Objeto não encontrado\nO erro a seguir ocorre quando tentamos acessar um objeto que não consta no painel Environment. Existe alguns motivos para isso acontecer:\n\nO objeto não foi criado (provavelmente precisa executar o código que cria o objeto);\nO objeto existe no painel Environment, mas estamos tentando acessá-lo com o nome incorreto.\n\nNo exemplo a seguir, o código gerará um erro pois o objeto que estamos tentando acessar ainda não foi criado:\n\n# O código abaixo gerará um erro:\nlength(estados_sudeste)\n\nError: object 'estados_sudeste' not found\n\n\nApós criar o objeto, conseguimos utilizá-lo:\n\nestados_sudeste &lt;- c(\"SP\", \"RJ\", \"MG\", \"ES\")\nlength(estados_sudeste)\n\n[1] 4\n\n\n\n\n4.2.4 Função não encontrada\nO erro could not find function ocorre quando tentamos acessar uma função que não está sendo encontrada. Isso pode acontecer por alguns motivos:\n\nA função faz parte de um pacote que não foi carregado (precisamos carregar o pacote antes);\nA função foi escrita de forma incorreta (por exemplo, com letras maiúsculas ou minúsculas incorretas).\n\n\n4.2.4.1 Pacote não carregado\nNo exemplo a seguir, queremos limpar o nome das colunas do data frame iris:\n\nhead(iris)\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n\n\nO código a seguir gerará um erro pois a função clean_names() faz parte do pacote janitor, mas o pacote não foi carregado:\n\nclean_names(iris)\n\nError in clean_names(iris): could not find function \"clean_names\"\n\n\nPara corrigir, precisamos carregar o pacote janitor:\n\nlibrary(janitor)\niris_nome_limpo &lt;- clean_names(iris)\nhead(iris_nome_limpo)\n\n  sepal_length sepal_width petal_length petal_width species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n\n\n\n\n4.2.4.2 Erro de digitação\nNo exemplo a seguir, o código gerará um erro pois a função length() está escrito de forma incorreta:\n\n# O código abaixo gerará um erro:\nlenght(letters)\n\nError in lenght(letters): could not find function \"lenght\"\n\n\nPara corrigir, precisamos escrever a função corretamente:\n\nlength(letters)\n\n[1] 26",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Erros e *warnings* frequentes</span>"
    ]
  }
]