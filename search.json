[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Análise de dados para o Planejamento Territorial",
    "section": "",
    "text": "Introdução\nBoas vindas!\nEste site apresenta o material de apoio para aulas práticas das disciplinas “Análise de dados para o Planejamento Territorial” e “Métodos Quantitativos para Pesquisa em PGT”, oferecidas no segundo quadrimestre de 2025 na Universidade Federal do ABC (UFABC).\nO conteúdo das aulas teóricas está disponível no Moodle.",
    "crumbs": [
      "Introdução"
    ]
  },
  {
    "objectID": "index.html#introdução",
    "href": "index.html#introdução",
    "title": "Análise de dados para o Planejamento Territorial",
    "section": "",
    "text": "Importante\n\n\n\nEste material foi feito para guiar as aulas práticas, mas você verá que ele está bem detalhado. Dessa forma, você pode usá-lo para revisar os conceitos e praticar as atividades (dentro e fora do horário das aulas).",
    "crumbs": [
      "Introdução"
    ]
  },
  {
    "objectID": "index.html#calendário",
    "href": "index.html#calendário",
    "title": "Análise de dados para o Planejamento Territorial",
    "section": "Calendário",
    "text": "Calendário\n\n\n\nSemana\nPeríodo\nPráticas\n\n\n\n\n1\n02/06/2025 - 08/06/2025\nIntrodução ao R e RStudio\n\n\n2\n09/06/2025 - 15/06/2025\nLinguagem R\n\n\n2\n09/06/2025 - 15/06/2025\nAnálise exploratória de dados - Parte 1\n\n\n3\n16/06/2025 - 22/06/2025\nFocar no trabalho da disciplina (semana com feriado)\n\n\n4\n23/06/2025 - 29/06/2025\nAnálise exploratória de dados - Parte 2",
    "crumbs": [
      "Introdução"
    ]
  },
  {
    "objectID": "index.html#sobre-este-material",
    "href": "index.html#sobre-este-material",
    "title": "Análise de dados para o Planejamento Territorial",
    "section": "Sobre este material",
    "text": "Sobre este material\nEste material contém partes adaptadas de:\n\nMaterial criado por Luis Felipe Bortolatto Cunha, que atuou como professor Assistente (estágio docência) em oferecimentos anteriores da disciplina.\nMaterial do curso Introdução à análise de dados no R, ministrado por Beatriz Milz, Pedro Cavalcanti e Rafael Pereira.\n\n\nLicença\nEsse material está disponível sob a licença CC BY-SA 4.0.",
    "crumbs": [
      "Introdução"
    ]
  },
  {
    "objectID": "praticas/01_intro_r_rstudio.html",
    "href": "praticas/01_intro_r_rstudio.html",
    "title": "1  Introdução ao R e RStudio",
    "section": "",
    "text": "1.1 Introdução\nAo longo deste curso, os softwares R e RStudio serão usados como uma ferramenta para auxiliar na análise de dados para o planejamento territorial.\nÉ importante ressaltar o uso do R e do RStudio não pode ser dissociado do processo de pesquisa, que envolve a observação, formulação de hipóteses, coleta de dados e análise de dados, sendo este o foco deste curso.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introdução ao R e RStudio</span>"
    ]
  },
  {
    "objectID": "praticas/01_intro_r_rstudio.html#o-que-é-o-r",
    "href": "praticas/01_intro_r_rstudio.html#o-que-é-o-r",
    "title": "1  Introdução ao R e RStudio",
    "section": "1.2 O que é o R?",
    "text": "1.2 O que é o R?\nR é uma linguagem de programação com o foco em estatística, análise e visualização de dados.\nEla é uma linguagem de código aberto, o que significa que qualquer pessoa pode utilizá-la gratuitamente. Além disso, as pessoas com mais experiência na linguagem podem contribuir com o desenvolvimento de novas funcionalidades e pacotes.\nCaso queira saber mais sobre a linguagem R, acesse o site oficial (R-Project).\nAo instalar o R, você terá acesso a um programa chamado “R Console” que permite escrever e executar códigos em R:\n\n\n\nCaptura de tela do R Console no Windows\n\n\nPorém o R Console não é muito amigável para escrever códigos complexos ou realizar análises de dados. Por isso, é recomendado utilizar um ambiente de desenvolvimento integrado (IDE). A IDE mais utilizada por pessoas que programam em R é o RStudio.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introdução ao R e RStudio</span>"
    ]
  },
  {
    "objectID": "praticas/01_intro_r_rstudio.html#o-que-é-o-rstudio",
    "href": "praticas/01_intro_r_rstudio.html#o-que-é-o-rstudio",
    "title": "1  Introdução ao R e RStudio",
    "section": "1.3 O que é o RStudio?",
    "text": "1.3 O que é o RStudio?\n\nO RStudio é um IDE focada em programação em R, e é desenvolvido pela Posit. Ele facilita a escrita de códigos, execução de scripts, e visualização dos resultados.\nExistem algumas versões do RStudio. Neste curso, utilizaremos o RStudio Desktop, pois é a versão de código aberto (portanto é gratuita). Daqui em diante, sempre que mencionarmos “RStudio”, estaremos nos referindo ao RStudio Desktop.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introdução ao R e RStudio</span>"
    ]
  },
  {
    "objectID": "praticas/01_intro_r_rstudio.html#instalando-o-r-e-o-rstudio",
    "href": "praticas/01_intro_r_rstudio.html#instalando-o-r-e-o-rstudio",
    "title": "1  Introdução ao R e RStudio",
    "section": "1.4 Instalando o R e o RStudio",
    "text": "1.4 Instalando o R e o RStudio\nDurante as aulas, utilizaremos os computadores do laboratório da universidade. Porém, caso você tenha acesso a um computador pessoal, recomendamos que instale o R e o RStudio nele, para praticar fora do período das aulas.\n\n1.4.1 Instalação do R\nPara instalar o R, acesse o site CRAN e escolha o link de download de acordo com o seu sistema operacional:\n\n\n\n\n\n\n\nCaptura de tela do site CRAN\n\n\nInstale o R utilizando o instalador baixado.\n\n\n1.4.2 Instalação do RStudio\nApós instalar o R, acesse o site RStudio Desktop e escolha o link de download de acordo com o seu sistema operacional:\n\n\n\n\n\n\n\nCaptura de tela do site RStudio Desktop\n\n\nInstale o RStudio utilizando o instalador baixado.\n\n\n\n\n\n\nDica\n\n\n\nCaso o seu computador tenha limitações para instalação de programas, você pode utilizar o Posit Cloud, uma versão online do RStudio. Entretanto, a versão gratuita do Posit Cloud tem algumas limitações, como limite de tempo de uso (25 horas por mês) e de memória RAM (1 GB).\nO vídeo abaixo apresenta um tutorial sobre como utilizar o Posit Cloud:",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introdução ao R e RStudio</span>"
    ]
  },
  {
    "objectID": "praticas/01_intro_r_rstudio.html#conhecendo-o-rstudio",
    "href": "praticas/01_intro_r_rstudio.html#conhecendo-o-rstudio",
    "title": "1  Introdução ao R e RStudio",
    "section": "1.5 Conhecendo o RStudio",
    "text": "1.5 Conhecendo o RStudio\nAo abrir o RStudio, veremos a seguinte tela:\n Aos poucos, conheceremos os painéis e funcionalidades do RStudio. Neste momento, podemos destacar os três painéis que são apresentados:\n\nConsole: painel onde os códigos são executados. É similar ao “R Console”, citado anteriormente.\nEnvironment: painel onde as variáveis e dados carregados ficam listados.\nFiles: painel onde podemos navegar por arquivos no computador. A página inicial é o diretório de trabalho: esse conceito será explicado mais adiante.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introdução ao R e RStudio</span>"
    ]
  },
  {
    "objectID": "praticas/01_intro_r_rstudio.html#scripts",
    "href": "praticas/01_intro_r_rstudio.html#scripts",
    "title": "1  Introdução ao R e RStudio",
    "section": "1.6 Scripts",
    "text": "1.6 Scripts\nNo RStudio, podemos escrever e executar códigos no Console, porém os códigos são perdidos quando fechamos o programa. Para salvar os códigos e reutilizá-los posteriormente, utilizamos scripts.\nOs scripts são arquivos de texto onde podemos escrever códigos R e salvá-los para utilizar posteriormente. É recomendado que qualquer código que você deseje reutilizar ou que seja importante para a análise que você fizer seja salvo em um script.\nExistem algumas formas de criar um novo script:\n\nNo menu superior, clicando em File &gt; New File &gt; R Script.\nUtilizando o atalho Ctrl + Shift + N (Windows) ou Cmd + Shift + N (Mac).\nClicando no ícone de um arquivo com um sinal de + no canto superior esquerdo do RStudio e selecionando R Script:\n\n\n\n\nCaptura de tela do RStudio: Opção para criar novo Script\n\n\nApós abrir um script, o RStudio exibirá 4 paineis:\n\n\n\nCaptura de tela do RStudio\n\n\n\n\n\n\n\n\nDica\n\n\n\nO script é um arquivo salvo no nosso computador. Lembre-se de salvar os scripts com frequência para evitar perder o nosso trabalho.\nPodemos salvar um script de algumas formas, como:\n\nClicando em File &gt; Save no menu superior.\nClicando no ícone do disquete ().\nUtilizando o atalho Ctrl + S (Windows) ou Cmd + S (Mac).\n\n\n\n\n1.6.1 Como executar os códigos?\nPodemos escrever e executar códigos no Console ou em um script.\nNo Console, escrevemos o código diretamente e pressionamos Enter para executá-lo.\nEm um Script, escrevemos o código e podemos executá-lo de algumas formas:\n\nSelecionando o trecho de código que queremos executar e clicando no botão Run do RStudio, ou utilizando o atalho Ctrl + Enter (Windows) ou Cmd + Enter (Mac).\nClicando no trecho que queremos executar e clicando no botão Run do RStudio, ou utilizando o atalho Ctrl + Enter (Windows) ou Cmd + Enter (Mac).\n\n\n\n1.6.2 Comentários\nComentários são textos que não são executados pelo R. Podemos usar comentários para explicar o que um bloco de código faz, para anotar ideias e explicar escolhas feitas, ou para desativar temporariamente um trecho de código.\nNo R, todo texto em uma linha após um hashtag (#) é um comentário. Por exemplo:\n\n# Este é um comentário",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introdução ao R e RStudio</span>"
    ]
  },
  {
    "objectID": "praticas/01_intro_r_rstudio.html#funções",
    "href": "praticas/01_intro_r_rstudio.html#funções",
    "title": "1  Introdução ao R e RStudio",
    "section": "1.7 Funções",
    "text": "1.7 Funções\nAgora que já sabemos onde escrever nossos códigos em R (no Console ou em um script), é importante entender o conceito de funções.\nUma função é tipo de objeto no R, que quando executado, executa um bloco de código específico. As funções são úteis para evitar repetição de códigos e organizar o nosso trabalho.\nNo R, existem muitas funções prontas que podemos utilizar. Por exemplo, a função Sys.Date() retorna a data atual do sistema:\n\n# Consutar a data atual do sistema (computador)\nSys.Date()\n\n[1] \"2025-06-30\"\n\n\nPara utilizar uma função, escrevemos o nome dela seguido de parênteses. Dentro dos parênteses, podemos colocar dados e informações úteis para a função executar a tarefa desejada, e são chamados de argumentos.\nPor exemplo, a função sqrt() calcula a raiz quadrada de um número. Para utilizá-la, podemos escrever sqrt() e informar esse número entre parênteses:\n\n# Calcular a raiz quadrada de 25\nsqrt(25)\n\n[1] 5\n\n\nAlgumas funções podem receber mais de um argumento. Por exemplo, a função round() arredonda um número para um determinado número de casas decimais. Para utilizá-la, podemos escrever round() e informar o número e o número de casas decimais entre parênteses:\n\npi\n\n[1] 3.141593\n\n# Sem argumentos: arredondar o número pi para um número inteiro (0 casas decimais)\nround(pi)\n\n[1] 3\n\n# Com argumentos: arredondar o número pi para 2 casas decimais\nround(pi, digits = 2)\n\n[1] 3.14\n\n\nPodemos consultar a documentação de uma função para entender como ela funciona, quais argumentos ela aceita e como utilizá-la. Falaremos mais sobre isso na seção de documentação.\n\n\n\n\n\n\nDica\n\n\n\nAo adquirir experiência com o R, podemos criar nossas próprias funções. Isso é útil para automatizar tarefas repetitivas e para organizar o código.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introdução ao R e RStudio</span>"
    ]
  },
  {
    "objectID": "praticas/01_intro_r_rstudio.html#pacotes",
    "href": "praticas/01_intro_r_rstudio.html#pacotes",
    "title": "1  Introdução ao R e RStudio",
    "section": "1.8 Pacotes",
    "text": "1.8 Pacotes\nPacotes do R são coleções de funções, dados e documentação que estendem a funcionalidade básica da linguagem.\nPara instalar um pacote, utilizamos a função install.packages() e informando o nome do pacote como texto entre aspas. Por exemplo, para instalar o pacote {tidyverse}, utilizamos o seguinte comando:\n\n# Instalar o pacote tidyverse\ninstall.packages(\"tidyverse\") \n\nApenas precisamos instalar um pacote uma vez.\nDepois de instalado, podemos carregá-lo com a função library(), para que as funções do pacote fiquem disponíveis para uso:\n\n# Carregar o pacote tidyverse\nlibrary(tidyverse) \n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nPrecisamos carregar o pacote sempre que abrirmos um novo script, ou quando reiniciamos o RStudio. Uma pratica frequente é carregar os principais pacotes necessários no início do script.\n\n\n\n\n\n\nCuidado\n\n\n\nUma outra forma de acessar uma função é utilizando o operador ::. Por exemplo, para acessar a função read_csv() do pacote {readr}, podemos escrever readr::read_csv().\nEssa sintaxe é menos frequente, porém útil para evitar problemas de conflito de funções com o mesmo nome em pacotes diferentes. Esse problema acontece mais frequentemente quando carregamos muitos pacotes em um mesmo script.\nPor exemplo: o pacote {dplyr} apresenta uma função filter(), e o pacote {stats} também apresenta uma função filter(). Se não usarmos o operador ::, a função utilizada será a do pacote que foi carregado por último. Usando o operador ::, podemos escolher qual função queremos utilizar.\n\n\n\n1.8.1 Repositório de pacotes\nExistem diferentes repositórios de pacotes do R, que são locais onde os pacotes são armazenados e disponibilizados para instalação.\nO CRAN (Comprehensive R Archive Network) é o repositório oficial de pacotes do R. Ele contém milhares de pacotes que podem ser instalados e utilizados gratuitamente. Em maio de 2025, o CRAN continha mais de 22.000 pacotes disponíveis. Para que um pacote seja adicionado ao CRAN, ele deve atender a critérios de qualidade de software.\nA rOpenSci é uma organização que mantêm uma coleção de pacotes que foram revisados por pares e que atendem a critérios de qualidade. Esses pacotes são voltados para pesquisa, ciência aberta e reprodutibilidade.\n\n\n\nCaptura de tela da página da rOpenSci: página de pacotes no tema Geoespacial\n\n\nA rOpenSci também mantém o R-universe, uma plataforma que permite que pacotes sejam publicados e compartilhados de forma mais fácil. O R Universe é uma alternativa ao CRAN, e permite que pacotes sejam publicados sem a necessidade de passar pelo processo de revisão do CRAN.\n\n\n\nCaptura de tela da página do R-Universe\n\n\nOutros repositórios de pacotes também existem, como o Bioconductor, que é voltado para análise de dados biológicos e genômicos.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introdução ao R e RStudio</span>"
    ]
  },
  {
    "objectID": "praticas/01_intro_r_rstudio.html#documentação",
    "href": "praticas/01_intro_r_rstudio.html#documentação",
    "title": "1  Introdução ao R e RStudio",
    "section": "1.9 Documentação",
    "text": "1.9 Documentação\nAs funções e pacotes do R apresentam textos com explicações e exemplos de uso, chamados de documentação.\nAs documentações podem ser acessadas online, ou diretamente no RStudio.\n\n1.9.1 Documentação no RStudio\nNo RStudio, podemos acessar a documentação de uma função ou pacote das seguintes formas:\n\nPara buscar informações sobre funções de pacotes já carregados (com library), podemos utilizar a função help(), informando o nome da função que queremos buscar como argumento (ex: help(mean)), ou utilizar o operador ?, seguido do nome da função (ex: ?mean).\n\n\n# Abrir a documentação da função mean()\nhelp(mean)\n?mean  \n\n\nPara fazer uma por funções presentes em todos os pacotes instalados no computador, podemos utilizar o operador ??, seguido pelo termo que queremos buscar (ex: ??mean). Essa é uma busca mais ampla, que procura pelo termo no nome e na descrição das funções.\n\n\n# Buscar por funções que contenham o termo \"mean\"\n??mean \n\n\nPodemos utilizar o painel Help para buscar informações sobre funções e pacotes:\n\n\n\n\nCaptura de tela do RStudio: Painel Help\n\n\nAlém disso, a maioria dos pacotes vem com textos explicativos sobre como usá-los, chamadas de vignettes. Elas estão disponíveis online, mas também podem ser acessadas diretamente no RStudio.\nPara acessar no RStudio, podemos usar a função browseVignettes() para listar as vignettes disponíveis para um pacote específico. A lista será apresentada em uma janela do navegador (ex: Google Chrome, Firefox, Safari, etc):\n\n# Listar as vignettes do pacote dplyr\nbrowseVignettes(\"dplyr\")\n\n\n\n\nCaptura de tela: Lista de Vignettes do pacote dplyr\n\n\n\n\n1.9.2 Documentação online\nComo citado anteriormente, é possível acessar a documentação dos pacotes diretamente no RStudio e também online. No geral, o conteúdo disponível online é igual ao disponível no RStudio, mas pode ser mais fácil de buscar e navegar.\nUma forma de acessar a documentação online é fazendo uma busca no Google com os termos “R documentation {nome da função}”. Por exemplo: “R documentation mean()”.\nAlguns pacotes apresentam também sites próprios com documentações e vignettes.\nPor exemplo, o pacote {dplyr} (que usaremos no curso) tem um site próprio onde conseguimos acessar a documentação. Os pacotes do tidyverse apresentam sites similares, com páginas com os seguintes conteúdos:\n\nEm Get started encontramos uma introdução ao pacote, e exemplos de uso para quem quer aprender a usá-lo.\nEm Reference, encontramos a lista de funções disponíveis no pacote, e podemos acessar a documentação de cada uma delas:\n\n\n\n\nCaptura de tela: Site do pacote dplyr - Reference\n\n\n\nEm Articles podemos acessar as vignettes:\n\n\n\n\nCaptura de tela: Site do pacote dplyr - Vignettes\n\n\n\n\n1.9.3 Cheatsheets\nAs cheatsheets (ou folhas de cola) são documentos resumidos com informações sobre funções e pacotes. Elas são úteis para consulta rápida.\nA Posit (empresa que desenvolve o RStudio) disponibiliza cheatsheets para diversos pacotes e tópicos. Elas podem ser acessadas no site Posit Cheatsheets.\nA lista a seguir apresenta algumas cheatsheets sobre temas que serão abordados ao longo do curso:\n\nRStudio IDE\nImportação de dados com o tidyverse\nTransformação de dados com dplyr\nVisualização de dados com ggplot2\nArrumando dados com tidyr",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introdução ao R e RStudio</span>"
    ]
  },
  {
    "objectID": "praticas/01_intro_r_rstudio.html#materiais-complementares",
    "href": "praticas/01_intro_r_rstudio.html#materiais-complementares",
    "title": "1  Introdução ao R e RStudio",
    "section": "1.10 Materiais complementares",
    "text": "1.10 Materiais complementares\n\nMateriais do curso Introdução à análise de dados no R:\n\nInstalação\nConhecendo o R e o RStudio\n\nLivro R para Ciência de Dados 2ed:\n\nIntrodução &gt; Pré-requisitos em diante\nFluxo de Trabalho: obtendo ajuda",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introdução ao R e RStudio</span>"
    ]
  },
  {
    "objectID": "praticas/02_conceitos-basicos-r.html",
    "href": "praticas/02_conceitos-basicos-r.html",
    "title": "2  Conceitos básicos do R",
    "section": "",
    "text": "2.1 Operações matemáticas\nExistem muitos conceitos básicos que são fundamentais para quem está começando a programar em R.\nNesta aula, vamos abordar alguns conceitos considerados mais importantes para as próximas aulas.\nO R permite realizar operações matemáticas básicas, como soma, subtração, multiplicação, divisão, potenciação, entre outras.\n1 + 1 # Soma\n\n[1] 2\n\n1 - 1 # Subtração\n\n[1] 0\n\n2 * 3 # Multiplicação\n\n[1] 6\n\n10 / 2 # Divisão\n\n[1] 5\n\n2 ^ 3 # Potenciação\n\n[1] 8\nA ordem matemática das operações também vale no R. Por exemplo, a expressão 2 + 3 * 4 será calculada como 2 + (3 * 4):\n2 + 3 * 4\n\n[1] 14",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Conceitos básicos do R</span>"
    ]
  },
  {
    "objectID": "praticas/02_conceitos-basicos-r.html#objetos",
    "href": "praticas/02_conceitos-basicos-r.html#objetos",
    "title": "2  Conceitos básicos do R",
    "section": "2.2 Objetos",
    "text": "2.2 Objetos\nNo R, um objeto é uma estrutura de dados que armazena valores: podemos armazenar um valor único, um conjunto de valores, uma base de dados, entre outros.\nÉ muito útil armazenar valores em objetos, pois podemos reutilizá-los em diferentes partes do código, sem precisar digitar o valor novamente.\n\n2.2.1 Objetos existentes no R\nExistem alguns objetos já criados no R, como por exemplo o objeto letters, que armazena as letras do alfabeto:\n\npi\n\n[1] 3.141593\n\nletters\n\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n[20] \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\"\n\n\n\n\n\n\n\n\nAviso\n\n\n\nO R é case-sensitive, ou seja, ele diferencia letras maiúsculas de minúsculas. Portanto, nome é diferente de Nome.\nPor exemplo, o objeto pi armazena o valor de π (com um número limitado de casas decimais). O nome do objeto é escrito em minúsculas:\n\npi\n\n[1] 3.141593\n\n\nSe tentarmos acessar o objeto com o nome em maiúsculas, o R irá retornar um erro, pois esse objeto não existe:\n\nPi\n\nError: object 'Pi' not found\n\n\n\n\n\n\n2.2.2 Criando um objeto\nPara criar um objeto, precisamos definir um nome, e atribuir um valor à este nome. Para isso, usamos o operador de atribuição: &lt;-. Um atalho para esse operador é o Ctrl + - no Windows, ou Option + - no Mac .\nNo exemplo a seguir, criamos um objeto chamado nome_do_curso e atribuímos a ele o texto \"Universidade Federal do ABC\":\n\nnome_do_curso &lt;- \"Universidade Federal do ABC\"\n\nPodemos acessar o valor armazenado em um objeto digitando o nome do objeto:\n\nnome_do_curso\n\n[1] \"Universidade Federal do ABC\"\n\n\nO objeto apenas será alterado se utilizarmos o operador de atribuição novamente. Por exemplo, a função tolower() transforma todas as letras de um texto em minúsculas:\n\ntolower(nome_do_curso)\n\n[1] \"universidade federal do abc\"\n\n\nMas como não utilizamos a atribuição, o objeto nome_do_curso não foi alterado:\n\nnome_do_curso\n\n[1] \"Universidade Federal do ABC\"\n\n\nPara alterar o objeto, precisamos atribuir o resultado da função tolower() ao objeto nome_do_curso:\n\nnome_do_curso &lt;- tolower(nome_do_curso)\n\nAgora, o objeto nome_do_curso foi alterado:\n\nnome_do_curso\n\n[1] \"universidade federal do abc\"\n\n\nPortanto, cuidado: ao criar um objeto com nome igual à outro objeto existente, o objeto anterior será substituído pelo novo objeto.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Conceitos básicos do R</span>"
    ]
  },
  {
    "objectID": "praticas/02_conceitos-basicos-r.html#tipos-de-objetos",
    "href": "praticas/02_conceitos-basicos-r.html#tipos-de-objetos",
    "title": "2  Conceitos básicos do R",
    "section": "2.3 Tipos de objetos",
    "text": "2.3 Tipos de objetos\nExistem diferentes tipos de objetos no R, e cada tipo de objeto possui diferentes propriedades. Os principais tipos de objetos que utilizaremos ao longo do curso são: vetores e data.frames.\n\n2.3.1 Vetores\nVetores armazenam um conjunto de valores de uma dimensão. Eles podem ser criados com a função c(), que significa combine (combinar). Por exemplo, para criar um vetor com os números de 1 a 5:\n\nvetor_de_numeros &lt;- c(1, 2, 3, 4, 5)\n\nOs vetores podem armazenar diferentes tipos de dados, como números, textos, fatores, entre outros. Porém cada vetor pode armazenar apenas um tipo de dado. Por exemplo, se tentarmos criar um vetor que armazena números e textos, o R irá converter todos os valores para texto. Essa propriedade é chamada de coerção.\n\nvetor_misto &lt;- c(1, 2, \"três\", 4, 5)\nclass(vetor_misto)\n\n[1] \"character\"\n\nvetor_misto\n\n[1] \"1\"    \"2\"    \"três\" \"4\"    \"5\"   \n\n\nNo geral, podemos converter dados sem perder informação seguindo essa ordem: Lógico &gt; Inteiro &gt; Numérico &gt; Texto.\n\n\n2.3.2 Data.frames\nOs data.frames são conjuntos de valores com duas dimensões: linhas e colunas. Porém, diferente do que vimos para as matrizes, os data.frames podem armazenar diferentes tipos de dados em cada coluna.\nEsse é o principal tipo de objeto que utilizaremos nesse curso, pois ele é muito útil para armazenar dados tabulares.\nExistem alguns data.frames já criados no R, como o airquality, que armazena dados sobre a qualidade do ar na cidade de Nova York, em 1973. Essas são as primeiras linhas do data.frame airquality:\n\nhead(airquality)\n\n  Ozone Solar.R Wind Temp Month Day\n1    41     190  7.4   67     5   1\n2    36     118  8.0   72     5   2\n3    12     149 12.6   74     5   3\n4    18     313 11.5   62     5   4\n5    NA      NA 14.3   56     5   5\n6    28      NA 14.9   66     5   6\n\n\nPara criar um data.frame, podemos usar a função data.frame(). Entretanto, o mais comum é importar dados de arquivos, como CSV, Excel, ou de bancos de dados. Falaremos sobre como importar dados na próxima aula.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Conceitos básicos do R</span>"
    ]
  },
  {
    "objectID": "praticas/02_conceitos-basicos-r.html#materiais-complementares",
    "href": "praticas/02_conceitos-basicos-r.html#materiais-complementares",
    "title": "2  Conceitos básicos do R",
    "section": "2.4 Materiais complementares",
    "text": "2.4 Materiais complementares\n\nMateriais do curso Introdução à análise de dados no R:\n\nDiretório de trabalho e projetos\nLinguagem R",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Conceitos básicos do R</span>"
    ]
  },
  {
    "objectID": "praticas/03_analise-exploratoria.html",
    "href": "praticas/03_analise-exploratoria.html",
    "title": "3  Análise exploratória de dados - Parte 1",
    "section": "",
    "text": "3.1 Criando um projeto\nNesta aula, vamos conhecer algumas funções do R e do pacote tidyverse que nos ajudam a fazer uma análise exploratória dos dados.\nO RStudio possui uma funcionalidade chamada projetos. Quando criamos um projeto no RStudio, uma nova pasta é criada no computador, e o RStudio define essa pasta como o diretório de trabalho. Além disso, o RStudio também cria um arquivo com a extensão .Rproj dentro dessa pasta, que contém informações sobre o projeto.\nÉ recomendado que sempre trabalhemos em projetos no RStudio, pois isso facilita a organização dos arquivos e a reprodução do código.\nÉ recomendado também salvar os arquivos referentes ao projeto (como scripts, bases de dados, resultados, etc) dentro do projeto. Isso não significa que precisamos colocar todos os arquivos dentro da pasta principal do projeto: podemos criar sub-pastas para organizar os arquivos.\nPara criar um projeto no RStudio, primeiro precisamos acessar o menu de criação de projetos (New project Wizard). Podemos fazer isso de três formas:\nDepois, escolhemos o tipo de projeto que queremos criar. No geral, escolhemos a opção New Directory, para criar uma nova pasta no computador:\nDepois, escolhemos o tipo de projeto que queremos criar. Cada tipo de projeto apresenta arquivos específicos de template. O RStudio apresenta algumas opções de projeto, porém é possível adicionar novos tipos de projeto instalandos pacotes específicos.\nNo geral, escolhemos a opção New Project, para criar um projeto simples:\nNa tela seguinte, precisamos informar o nome do projeto (no campo Directory name) e o diretório onde ele será criado (no campo Create project as subdirectory of):\nApós preencher as informações solicitadas, clicamos em Create Project. O RStudio criará o projeto e o abrirá:",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Análise exploratória de dados - Parte 1</span>"
    ]
  },
  {
    "objectID": "praticas/03_analise-exploratoria.html#criando-um-projeto",
    "href": "praticas/03_analise-exploratoria.html#criando-um-projeto",
    "title": "3  Análise exploratória de dados - Parte 1",
    "section": "",
    "text": "No menu superior, clicando em File &gt; New Project...\nClicando no ícone de novo projeto na barra de ferramentas do RStudio: \nNo canto superior esquerdo, clicando no botão referente à projetos, e depois em New Project...:\n\n\n\n\nCaptura de tela do RStudio: Menu de projetos\n\n\n\n\n\n\nCaptura de tela do RStudio: Criando um projeto\n\n\n\n\n\n\n\nCaptura de tela do RStudio: Escolhendo o tipo de projeto\n\n\n\n\n\n\nCaptura de tela do RStudio: Nomeando o projeto\n\n\n\n\n\n\nCaptura de tela do RStudio: projeto criado\n\n\n\n\n\n\n\n\nDica\n\n\n\nNote que o nome do projeto que criamos aparece no canto superior direito do RStudio.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Análise exploratória de dados - Parte 1</span>"
    ]
  },
  {
    "objectID": "praticas/03_analise-exploratoria.html#salvando-os-dados-no-projeto",
    "href": "praticas/03_analise-exploratoria.html#salvando-os-dados-no-projeto",
    "title": "3  Análise exploratória de dados - Parte 1",
    "section": "3.2 Salvando os dados no projeto",
    "text": "3.2 Salvando os dados no projeto\nPara facilitar o trabalho, vamos salvar os dados que utilizaremos nesta aula dentro do projeto que acabamos de criar.\nPrimeiro, vamos criar uma pasta chamada dados dentro do projeto:\n\ndir.create(\"dados\")\n\nDepois, vamos baixar os dados da CETESB e salvar na pasta dados que acabamos de criar:\n\ndownload.file(\n  url = \"https://raw.githubusercontent.com/beatrizmilz/cetesb_saneamento/refs/heads/main/data-raw/dados-cetesb-tidy/2022.csv\",\n  destfile = \"dados/dados-cetesb-2022.csv\"\n)\n\nConfira se o arquivo foi baixado corretamente, e se está na pasta dados do projeto.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Análise exploratória de dados - Parte 1</span>"
    ]
  },
  {
    "objectID": "praticas/03_analise-exploratoria.html#importando-os-dados",
    "href": "praticas/03_analise-exploratoria.html#importando-os-dados",
    "title": "3  Análise exploratória de dados - Parte 1",
    "section": "3.3 Importando os dados",
    "text": "3.3 Importando os dados\nPara importar os dados que acabamos de baixar, vamos utilizar a função read_csv() do pacote readr, que faz parte do tidyverse.\nLembre-se de carregar o pacote tidyverse antes de utilizar a função read_csv():\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nAgora, podemos importar os dados:\n\ndados_cetesb &lt;- read_csv(\"dados/dados-cetesb-2022.csv\")\n\nRows: 645 Columns: 12\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): uf, municipio\ndbl (10): ano, ugrhi, codigo_ibge, populacao_urbana, atendimento_coleta_porc...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nVamos conferir se os dados foram importados corretamente, utilizando a função glimpse():\n\nglimpse(dados_cetesb)\n\nRows: 645\nColumns: 12\n$ ano                           &lt;dbl&gt; 2022, 2022, 2022, 2022, 2022, 2022, 2022…\n$ uf                            &lt;chr&gt; \"SP\", \"SP\", \"SP\", \"SP\", \"SP\", \"SP\", \"SP\"…\n$ ugrhi                         &lt;dbl&gt; 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2…\n$ municipio                     &lt;chr&gt; \"Campos do Jordão\", \"Santo Antônio do Pi…\n$ codigo_ibge                   &lt;dbl&gt; 3509700, 3548203, 3548609, 3502507, 3503…\n$ populacao_urbana              &lt;dbl&gt; 52384, 4067, 5251, 35684, 1844, 2619, 88…\n$ atendimento_coleta_porc       &lt;dbl&gt; 52.6, 46.7, 98.0, 70.0, 95.6, 100.0, 88.…\n$ atendimento_tratamento_porc   &lt;dbl&gt; 100.0, 100.0, 100.0, 0.0, 95.6, 0.0, 100…\n$ eficiencia                    &lt;dbl&gt; 93.0, 80.0, 91.3, 0.0, 99.0, 0.0, 75.0, …\n$ carga_poluidora_potencial     &lt;dbl&gt; 2829, 220, 284, 1927, 100, 141, 476, 442…\n$ carga_poluidora_remancescente &lt;dbl&gt; 1445, 138, 30, 1927, 9, 141, 161, 1858, …\n$ ictem                         &lt;dbl&gt; 5.97, 4.63, 9.97, 1.55, 9.86, 1.50, 7.61…\n\n\nA função View() também pode ser utilizada para visualizar os dados em uma tabela interativa:\n\nView(dados_cetesb)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Análise exploratória de dados - Parte 1</span>"
    ]
  },
  {
    "objectID": "praticas/03_analise-exploratoria.html#conhecendo-a-base-de-dados",
    "href": "praticas/03_analise-exploratoria.html#conhecendo-a-base-de-dados",
    "title": "3  Análise exploratória de dados - Parte 1",
    "section": "3.4 Conhecendo a base de dados",
    "text": "3.4 Conhecendo a base de dados\nPara conhecer melhor a base de dados, podemos utilizar algumas funções para explorar as colunas e os tipos de dados.\nA função nrow() nos mostra o número de linhas da base de dados, e a função ncol() nos mostra o número de colunas:\n\nnrow(dados_cetesb)\n\n[1] 645\n\nncol(dados_cetesb)\n\n[1] 12\n\n\nA função colnames() nos mostra os nomes das colunas:\n\ncolnames(dados_cetesb)\n\n [1] \"ano\"                           \"uf\"                           \n [3] \"ugrhi\"                         \"municipio\"                    \n [5] \"codigo_ibge\"                   \"populacao_urbana\"             \n [7] \"atendimento_coleta_porc\"       \"atendimento_tratamento_porc\"  \n [9] \"eficiencia\"                    \"carga_poluidora_potencial\"    \n[11] \"carga_poluidora_remancescente\" \"ictem\"                        \n\n\nSegue abaixo uma tabela com os nomes das colunas e suas descrições2:\n\n\n\nNome da coluna\nDescrição\n\n\n\n\nano\nAno de referência dos dados\n\n\nuf\nUnidade da Federação (estado)\n\n\nugrhi\nUnidade de Gerenciamento de Recursos Hídricos\n\n\nmunicipio\nNome do município\n\n\ncodigo_ibge\nCódigo do município no IBGE\n\n\npopulacao_urbana\nPopulação urbana do município\n\n\natendimento_coleta_porc\nPercentual de atendimento da coleta de esgoto\n\n\natendimento_tratamento_porc\nPercentual de atendimento do tratamento de esgoto, para o esgoto coletado\n\n\neficiencia\nEficiência do sistema de esgoto\n\n\ncarga_poluidora_potencial\nCarga poluidora potencial do esgoto coletado\n\n\ncarga_poluidora_remancescente\nCarga poluidora remanescente do esgoto coletado\n\n\nictem\nIndicador de Coleta e Tratabilidade de Esgoto da População Urbana de Município (ICTEM)\n\n\n\nA função head() nos mostra as primeiras linhas da base de dados, e a função tail() nos mostra as últimas linhas:\n\nhead(dados_cetesb)\n\n# A tibble: 6 × 12\n    ano uf    ugrhi municipio               codigo_ibge populacao_urbana\n  &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt;                         &lt;dbl&gt;            &lt;dbl&gt;\n1  2022 SP        1 Campos do Jordão            3509700            52384\n2  2022 SP        1 Santo Antônio do Pinhal     3548203             4067\n3  2022 SP        1 São Bento do Sapucaí        3548609             5251\n4  2022 SP        2 Aparecida                   3502507            35684\n5  2022 SP        2 Arapeí                      3503158             1844\n6  2022 SP        2 Areias                      3503505             2619\n# ℹ 6 more variables: atendimento_coleta_porc &lt;dbl&gt;,\n#   atendimento_tratamento_porc &lt;dbl&gt;, eficiencia &lt;dbl&gt;,\n#   carga_poluidora_potencial &lt;dbl&gt;, carga_poluidora_remancescente &lt;dbl&gt;,\n#   ictem &lt;dbl&gt;\n\ntail(dados_cetesb)\n\n# A tibble: 6 × 12\n    ano uf    ugrhi municipio       codigo_ibge populacao_urbana\n  &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt;                 &lt;dbl&gt;            &lt;dbl&gt;\n1  2022 SP       22 Rosana              3544251            12828\n2  2022 SP       22 Sandovalina         3545506             3074\n3  2022 SP       22 Santo Anastácio     3547700            19434\n4  2022 SP       22 Taciba              3552908             5410\n5  2022 SP       22 Tarabai             3553906             7035\n6  2022 SP       22 Teodoro Sampaio     3554300            18996\n# ℹ 6 more variables: atendimento_coleta_porc &lt;dbl&gt;,\n#   atendimento_tratamento_porc &lt;dbl&gt;, eficiencia &lt;dbl&gt;,\n#   carga_poluidora_potencial &lt;dbl&gt;, carga_poluidora_remancescente &lt;dbl&gt;,\n#   ictem &lt;dbl&gt;\n\n\nA função summary() nos mostra um resumo de estatísticas descritivas para todas as colunas. Mas cuidado: nem todos os resultados fazem sentido (exemplo: a coluna codigo_ibge é um identificador, e não devemos calcular estatísticas descritivas para ela).\n\nsummary(dados_cetesb)\n\n      ano            uf                ugrhi        municipio        \n Min.   :2022   Length:645         Min.   : 1.00   Length:645        \n 1st Qu.:2022   Class :character   1st Qu.: 7.00   Class :character  \n Median :2022   Mode  :character   Median :13.00   Mode  :character  \n Mean   :2022                      Mean   :12.38                     \n 3rd Qu.:2022                      3rd Qu.:17.00                     \n Max.   :2022                      Max.   :22.00                     \n                                                                     \n  codigo_ibge      populacao_urbana   atendimento_coleta_porc\n Min.   :3500105   Min.   :     653   Min.   : 12.80         \n 1st Qu.:3514601   1st Qu.:    4498   1st Qu.: 88.30         \n Median :3528700   Median :   11524   Median : 98.70         \n Mean   :3528698   Mean   :   69406   Mean   : 91.06         \n 3rd Qu.:3543204   3rd Qu.:   39045   3rd Qu.:100.00         \n Max.   :3557303   Max.   :12284940   Max.   :100.00         \n                                                             \n atendimento_tratamento_porc   eficiencia    carga_poluidora_potencial\n Min.   :  0.00              Min.   : 0.00   Min.   :    35           \n 1st Qu.:100.00              1st Qu.:74.97   1st Qu.:   243           \n Median :100.00              Median :83.45   Median :   622           \n Mean   : 89.73              Mean   :77.04   Mean   :  3748           \n 3rd Qu.:100.00              3rd Qu.:88.80   3rd Qu.:  2108           \n Max.   :100.00              Max.   :99.10   Max.   :663387           \n NA's   :5                   NA's   :5                                \n carga_poluidora_remancescente     ictem      \n Min.   :     1.0              Min.   : 0.75  \n 1st Qu.:    49.0              1st Qu.: 6.78  \n Median :   156.0              Median : 8.21  \n Mean   :  1409.2              Mean   : 7.76  \n 3rd Qu.:   617.8              3rd Qu.: 9.94  \n Max.   :231038.0              Max.   :10.00  \n NA's   :5",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Análise exploratória de dados - Parte 1</span>"
    ]
  },
  {
    "objectID": "praticas/03_analise-exploratoria.html#calculando-estatísticas-descritivas",
    "href": "praticas/03_analise-exploratoria.html#calculando-estatísticas-descritivas",
    "title": "3  Análise exploratória de dados - Parte 1",
    "section": "3.5 Calculando estatísticas descritivas",
    "text": "3.5 Calculando estatísticas descritivas\nComo vimos acima, a função summary() nos dá um resumo de estatísticas descritivas para todas as colunas.\nTambém podemos calcular estatísticas descritivas específicas para colunas numéricas, como média, mediana, desvio padrão, entre outras.\n\n\n\nfunção\ndescrição\n\n\n\n\nsum()\ncalcula a soma dos valores\n\n\nmean()\ncalcula a média\n\n\nmedian()\ncalcula a mediana\n\n\nvar()\ncalcula a variância\n\n\nsd()\ncalcula o desvio padrão\n\n\nmin()\ncalcula o valor mínimo\n\n\nmax()\ncalcula o valor máximo\n\n\nquantile()\ncalcula os quantis (percentis)\n\n\n\n\n\n\n\n\n\nO operador $\n\n\n\nQuando estamos trabalhando com data.frames (ou tibbles) podemos utilizar o operador $ para acessar uma coluna específica. O resultado será um vetor com os valores dessa coluna.\nPor exemplo, para acessar a coluna atendimento_coleta_porc, podemos fazer:\n\ndados_cetesb$atendimento_coleta_porc \n\n  [1]  52.6  46.7  98.0  70.0  95.6 100.0  88.1 100.0 100.0  84.6  74.3  90.0\n [13]  60.4  98.2  30.7  98.2 100.0  83.5  73.2  99.6  84.4  96.0  68.0 100.0\n [25]  84.3  85.0  77.2  44.3  93.6  64.0  57.3  84.7  94.4  88.3  95.9 100.0\n [37]  98.6  78.6  40.5  44.6  34.7 100.0  99.0 100.0  96.4 100.0  91.4  99.0\n [49]  85.2  88.5 100.0  99.0  99.5  99.2 100.0  96.2 100.0  96.9 100.0  92.8\n [61] 100.0 100.0  91.7 100.0  96.5  95.7  95.0  96.0  98.0  67.8  20.0  89.6\n [73]  96.3  60.2  95.0  86.9 100.0 100.0  98.0  94.6 100.0  95.2  97.7  90.5\n [85] 100.0  89.7  74.2  98.0  29.7  65.2  99.5 100.0  86.6 100.0  95.0  90.7\n [97]  89.9  12.8  96.2  94.9  70.6  99.0  96.0  52.9 100.0 100.0  99.8  99.0\n[109] 100.0  98.0  99.0 100.0 100.0 100.0  90.0  95.0  50.0  94.3  46.4  84.2\n[121]  91.5  71.5  83.5  53.1  74.0  74.4  69.8  54.0  97.5  72.3  40.5  82.7\n[133]  58.2  74.0  86.4  52.0  64.5  63.0  74.1  25.8  93.0  60.7  77.8  51.0\n[145]  96.8  71.2  50.2  77.3  46.9  99.5  92.3 100.0  89.5  94.5  89.5  66.0\n[157]  51.3  69.4  49.3  82.9  81.2  80.0  96.6  79.4 100.0  99.0  99.7  97.0\n[169] 100.0 100.0 100.0  96.9 100.0  98.8 100.0 100.0  87.5 100.0 100.0 100.0\n[181] 100.0  87.1  97.8  98.3 100.0  95.9  98.1  98.8  99.0 100.0 100.0 100.0\n[193]  97.0  99.1 100.0 100.0  93.7 100.0  99.8 100.0 100.0 100.0 100.0  70.0\n[205] 100.0  99.2  96.0 100.0 100.0 100.0  98.9  96.4 100.0 100.0  97.0 100.0\n[217] 100.0  96.3  92.4 100.0  78.3 100.0  77.5 100.0  56.2  70.9  86.9  42.1\n[229]  40.0  89.0  88.3 100.0  66.2  75.6  98.0 100.0  82.1  49.6  90.2 100.0\n[241]  90.0  96.4  77.0 100.0  73.8  79.7  99.9  69.2  98.9  48.5  58.0  99.0\n[253]  97.2  86.5  89.2  35.4  99.0  61.9  87.6  73.9  86.7  83.3  97.9  60.3\n[265]  44.5  67.9  61.5  82.1  38.3 100.0  83.0  16.6  86.6  93.9  58.3  99.6\n[277]  62.7  31.6  75.8  79.5  89.3 100.0  99.1 100.0 100.0 100.0  99.5  90.4\n[289] 100.0 100.0  93.1 100.0 100.0  99.7  77.0  99.2  98.8  99.0  98.3 100.0\n[301] 100.0 100.0 100.0 100.0  98.5 100.0 100.0  93.0 100.0  95.0 100.0 100.0\n[313]  95.0  87.5 100.0 100.0 100.0  97.0 100.0  98.8  96.0 100.0 100.0  99.1\n[325]  98.5 100.0  86.6  83.3  99.1 100.0  80.6  97.2  83.9  94.9  97.9 100.0\n[337]  78.9  85.8  99.0  88.1  83.5  95.9  87.8  89.5  91.2  90.0  64.1  70.3\n[349]  73.2 100.0  81.0 100.0  97.5  70.1  96.0 100.0 100.0  75.8  92.0  94.5\n[361] 100.0  99.0 100.0 100.0  99.9 100.0 100.0 100.0  99.1 100.0 100.0  99.5\n[373] 100.0 100.0 100.0 100.0 100.0  80.0 100.0  93.4 100.0  98.7 100.0  99.1\n[385]  98.6 100.0  80.0 100.0  99.8  97.7 100.0 100.0 100.0  92.1 100.0  98.5\n[397]  80.7 100.0 100.0  80.0 100.0 100.0 100.0 100.0 100.0 100.0 100.0  99.0\n[409] 100.0 100.0  71.0 100.0 100.0 100.0 100.0 100.0  98.2 100.0 100.0 100.0\n[421] 100.0 100.0 100.0  99.0 100.0  91.4 100.0 100.0  99.0 100.0 100.0 100.0\n[433] 100.0 100.0  98.9 100.0  83.4 100.0  99.0 100.0  87.3 100.0 100.0 100.0\n[445] 100.0  98.0 100.0 100.0  90.0 100.0 100.0  98.6  67.0 100.0 100.0  83.3\n[457] 100.0  73.2  99.0 100.0  99.8  99.0 100.0  99.6  92.0  90.0  99.0 100.0\n[469] 100.0 100.0  94.1 100.0  93.2 100.0 100.0 100.0  83.2 100.0 100.0  92.3\n[481]  98.1  93.1 100.0  99.3 100.0 100.0  70.5  95.3 100.0  87.5 100.0  95.3\n[493]  99.0  93.9  70.0 100.0 100.0 100.0 100.0 100.0 100.0  96.6 100.0 100.0\n[505]  98.8  91.5 100.0 100.0 100.0  95.0 100.0 100.0 100.0  90.1  79.7 100.0\n[517] 100.0 100.0 100.0 100.0 100.0  97.0  98.0 100.0  96.5  98.6  98.5 100.0\n[529]  99.0  92.4 100.0  98.0 100.0  89.2 100.0 100.0  94.9  82.1  85.4 100.0\n[541] 100.0  80.0  99.0 100.0 100.0  99.0 100.0  90.0 100.0 100.0  92.5 100.0\n[553]  76.9 100.0  99.0  94.0 100.0  99.0 100.0 100.0 100.0 100.0 100.0 100.0\n[565]  99.8  95.9  99.2  98.0 100.0  93.1 100.0  99.5  80.0  99.0  96.3  97.6\n[577] 100.0  97.9  86.4  99.0 100.0 100.0  72.9  92.8 100.0  60.0  97.1  95.0\n[589] 100.0 100.0  99.5  88.0  96.2  88.7 100.0 100.0 100.0  98.0 100.0  99.0\n[601] 100.0  99.0 100.0  90.6  98.7  89.4 100.0  98.5  97.0 100.0 100.0 100.0\n[613]  97.0  80.0 100.0 100.0  95.1 100.0  95.0  97.0 100.0  96.8  91.7  97.5\n[625] 100.0 100.0 100.0  86.6  95.0  97.0  84.1 100.0 100.0  94.5  81.6  93.1\n[637] 100.0  98.0 100.0  79.5  87.7  97.8 100.0  88.1 100.0\n\n\n\n\nVamos ver alguns exemplos de como calcular estatísticas descritivas utilizando as funções apresentadas acima:\n\n# Soma dos valores da coluna `populacao_urbana`\n# Ou seja, a população urbana total do estado de São Paulo\nsum(dados_cetesb$populacao_urbana)\n\n[1] 44767107\n\n\n\n# Média dos valores da coluna `ictem`\nmean(dados_cetesb$ictem)\n\n[1] 7.759767\n\n# Mediana dos valores da coluna `ictem`\nmedian(dados_cetesb$ictem)\n\n[1] 8.21\n\n# Variância dos valores da coluna `ictem`\nvar(dados_cetesb$ictem)\n\n[1] 6.09937\n\n# Desvio padrão dos valores da coluna `ictem`\nsd(dados_cetesb$ictem)\n\n[1] 2.46969\n\n# Valor mínimo da coluna `ictem`\nmin(dados_cetesb$ictem)\n\n[1] 0.75\n\n# Valor máximo da coluna `ictem`\nmax(dados_cetesb$ictem)\n\n[1] 10\n\n# Quantis dos valores da coluna `ictem`\nquantile(dados_cetesb$ictem)\n\n   0%   25%   50%   75%  100% \n 0.75  6.78  8.21  9.94 10.00 \n\n\nAtenção aos valores faltantes (NA): Por padrão, as funções acima consideram os valores faltantes (NA) no cálculo, e portanto, o resultado também será um valor faltante (NA). Veja esse exemplo:\n\nmean(dados_cetesb$eficiencia)\n\n[1] NA\n\n\nSe você quiser remover os valores faltantes, pode utilizar o argumento na.rm = TRUE nas funções. Por exemplo:\n\nmean(dados_cetesb$eficiencia, na.rm = TRUE)\n\n[1] 77.03656",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Análise exploratória de dados - Parte 1</span>"
    ]
  },
  {
    "objectID": "praticas/03_analise-exploratoria.html#visualizando-os-dados",
    "href": "praticas/03_analise-exploratoria.html#visualizando-os-dados",
    "title": "3  Análise exploratória de dados - Parte 1",
    "section": "3.6 Visualizando os dados",
    "text": "3.6 Visualizando os dados\nPara visualizar os dados, podemos utilizar a função ggplot() do pacote ggplot2, que também faz parte do tidyverse.\nPara quem está começando, recomendo utilizar o pacote esquisse, que facilita a criação de gráficos com o ggplot2.\n\ninstall.packages(\"esquisse\")\ninstall.packages(\"plotly\")\n\nDepois de instalar o pacote, podemos carregá-lo e utilizar a função esquisser() para criar gráficos interativos:\n\nlibrary(esquisse)\nesquisser(dados_cetesb)\n\nO esquisse oferece uma interface amigável para criar gráficos com o ggplot2, permitindo que você arraste e solte variáveis, escolha tipos de gráficos e customize os elementos do gráfico. Ao usar o esquisse, você pode gerar o código correspondente ao gráfico que está criando, e depois copiá-lo para o seu script R.\nPara criar um histograma simples, por exemplo, podemos usar o seguinte código:\n\n# inicia o gráfico com os dados `dados_cetesb`\nggplot(dados_cetesb) +\n  # define a variável que será plotada no eixo x\n  aes(x = ictem) +\n  # adiciona a geometria de histograma\n  geom_histogram() \n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\nPodemos criar também um boxplot com um código semelhante:\n\n# inicia o gráfico com os dados `dados_cetesb`\nggplot(dados_cetesb) +\n  # define a variável que será plotada no eixo y\n  aes(y = ictem) +\n  # adiciona a geometria de histograma\n  geom_boxplot() \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNota\n\n\n\nNesta aula, o objetivo foi apresentar algumas funções básicas que veremos outras vezes ao longo do curso. Não se preocupe se não entendeu tudo agora, pois iremos aprofundar esses conceitos em aulas futuras.\nSe você quiser praticar mais, recomendo que explore os materiais complementares.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Análise exploratória de dados - Parte 1</span>"
    ]
  },
  {
    "objectID": "praticas/03_analise-exploratoria.html#materiais-complementares",
    "href": "praticas/03_analise-exploratoria.html#materiais-complementares",
    "title": "3  Análise exploratória de dados - Parte 1",
    "section": "3.7 Materiais complementares",
    "text": "3.7 Materiais complementares\n\nMateriais do curso Introdução à análise de dados no R:\n\nDiretório de trabalho e projetos\nImportando dados\nConhecendo a base de dados",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Análise exploratória de dados - Parte 1</span>"
    ]
  },
  {
    "objectID": "praticas/03_analise-exploratoria.html#footnotes",
    "href": "praticas/03_analise-exploratoria.html#footnotes",
    "title": "3  Análise exploratória de dados - Parte 1",
    "section": "",
    "text": "O arquivo original não apresenta um dicionário de dados, portanto as descrições foram elaboradas com base no conteúdo do arquivo e na documentação do ICTEM (Indicador de Coleta e Tratabilidade de Esgoto da População Urbana de Município) disponível no site da CETESB.↩︎\nO arquivo original não apresenta um dicionário de dados, portanto as descrições foram elaboradas com base no conteúdo do arquivo e na documentação do ICTEM (Indicador de Coleta e Tratabilidade de Esgoto da População Urbana de Município) disponível no site da CETESB.↩︎",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Análise exploratória de dados - Parte 1</span>"
    ]
  },
  {
    "objectID": "praticas/04_analise-exploratoria-ii.html",
    "href": "praticas/04_analise-exploratoria-ii.html",
    "title": "4  Análise exploratória de dados - Parte 2",
    "section": "",
    "text": "4.1 Carregando pacotes\nNesta segunda parte da análise exploratória de dados, vamos conhecer as funções mais importantes do pacote dplyr para manipulação de dados.\nlibrary(tidyverse)",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Análise exploratória de dados - Parte 2</span>"
    ]
  },
  {
    "objectID": "praticas/04_analise-exploratoria-ii.html#carregando-os-dados",
    "href": "praticas/04_analise-exploratoria-ii.html#carregando-os-dados",
    "title": "4  Análise exploratória de dados - Parte 2",
    "section": "4.2 Carregando os dados",
    "text": "4.2 Carregando os dados\nVamos continuar trabalhando nos dados da CETESB, que já foram carregados na primeira parte da análise exploratória (aula passada). Caso você não tenha feito isso, recomendo que você siga as instruções da aula anterior antes de continuar a aula de hoje.\n\ndados_cetesb &lt;- read_csv(\"dados/dados-cetesb-2022.csv\")\n\nRows: 645 Columns: 12\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): uf, municipio\ndbl (10): ano, ugrhi, codigo_ibge, populacao_urbana, atendimento_coleta_porc...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nOutra forma de importar os dados é utilizando o link direto do repositório do GitHub onde os dados estão armazenados. Você pode fazer isso utilizando a função read_csv() do pacote readr:\n\ndados_cetesb &lt;- read_csv(\"https://raw.githubusercontent.com/beatrizmilz/ESHT011-21-analise-dados-planejamento-territorial/refs/heads/main/dados/dados-cetesb-2022.csv\")\n\nA função glimpse() do pacote dplyr, que conhecemos na aula passada, é uma forma rápida de visualizar a estrutura dos dados. Ela nos mostra o nome das colunas, o tipo de dado de cada coluna e os primeiros valores de cada coluna:\n\nglimpse(dados_cetesb)\n\nRows: 645\nColumns: 12\n$ ano                           &lt;dbl&gt; 2022, 2022, 2022, 2022, 2022, 2022, 2022…\n$ uf                            &lt;chr&gt; \"SP\", \"SP\", \"SP\", \"SP\", \"SP\", \"SP\", \"SP\"…\n$ ugrhi                         &lt;dbl&gt; 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2…\n$ municipio                     &lt;chr&gt; \"Campos do Jordão\", \"Santo Antônio do Pi…\n$ codigo_ibge                   &lt;dbl&gt; 3509700, 3548203, 3548609, 3502507, 3503…\n$ populacao_urbana              &lt;dbl&gt; 52384, 4067, 5251, 35684, 1844, 2619, 88…\n$ atendimento_coleta_porc       &lt;dbl&gt; 52.6, 46.7, 98.0, 70.0, 95.6, 100.0, 88.…\n$ atendimento_tratamento_porc   &lt;dbl&gt; 100.0, 100.0, 100.0, 0.0, 95.6, 0.0, 100…\n$ eficiencia                    &lt;dbl&gt; 93.0, 80.0, 91.3, 0.0, 99.0, 0.0, 75.0, …\n$ carga_poluidora_potencial     &lt;dbl&gt; 2829, 220, 284, 1927, 100, 141, 476, 442…\n$ carga_poluidora_remancescente &lt;dbl&gt; 1445, 138, 30, 1927, 9, 141, 161, 1858, …\n$ ictem                         &lt;dbl&gt; 5.97, 4.63, 9.97, 1.55, 9.86, 1.50, 7.61…",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Análise exploratória de dados - Parte 2</span>"
    ]
  },
  {
    "objectID": "praticas/04_analise-exploratoria-ii.html#conhecendo-o-operador-pipe",
    "href": "praticas/04_analise-exploratoria-ii.html#conhecendo-o-operador-pipe",
    "title": "4  Análise exploratória de dados - Parte 2",
    "section": "4.3 Conhecendo o operador pipe (|>)",
    "text": "4.3 Conhecendo o operador pipe (|&gt;)\nO operador pipe (|&gt; ou %&gt;%) permite encadear operações de forma mais legível e intuitiva.\nPor exemplo, podemos utilizar o operador pipe para aplicar a função glimpse() diretamente nos dados:\n\ndados_cetesb |&gt; \n  glimpse()\n\nRows: 645\nColumns: 12\n$ ano                           &lt;dbl&gt; 2022, 2022, 2022, 2022, 2022, 2022, 2022…\n$ uf                            &lt;chr&gt; \"SP\", \"SP\", \"SP\", \"SP\", \"SP\", \"SP\", \"SP\"…\n$ ugrhi                         &lt;dbl&gt; 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2…\n$ municipio                     &lt;chr&gt; \"Campos do Jordão\", \"Santo Antônio do Pi…\n$ codigo_ibge                   &lt;dbl&gt; 3509700, 3548203, 3548609, 3502507, 3503…\n$ populacao_urbana              &lt;dbl&gt; 52384, 4067, 5251, 35684, 1844, 2619, 88…\n$ atendimento_coleta_porc       &lt;dbl&gt; 52.6, 46.7, 98.0, 70.0, 95.6, 100.0, 88.…\n$ atendimento_tratamento_porc   &lt;dbl&gt; 100.0, 100.0, 100.0, 0.0, 95.6, 0.0, 100…\n$ eficiencia                    &lt;dbl&gt; 93.0, 80.0, 91.3, 0.0, 99.0, 0.0, 75.0, …\n$ carga_poluidora_potencial     &lt;dbl&gt; 2829, 220, 284, 1927, 100, 141, 476, 442…\n$ carga_poluidora_remancescente &lt;dbl&gt; 1445, 138, 30, 1927, 9, 141, 161, 1858, …\n$ ictem                         &lt;dbl&gt; 5.97, 4.63, 9.97, 1.55, 9.86, 1.50, 7.61…\n\n\nCom apenas uma função, não é tão óbvio o benefício do operador pipe. No entanto, quando começamos a encadear várias funções, ele se torna muito útil. Veremos exemplos disso ao longo desta aula!",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Análise exploratória de dados - Parte 2</span>"
    ]
  },
  {
    "objectID": "praticas/04_analise-exploratoria-ii.html#principais-funções-do-dplyr",
    "href": "praticas/04_analise-exploratoria-ii.html#principais-funções-do-dplyr",
    "title": "4  Análise exploratória de dados - Parte 2",
    "section": "4.4 Principais funções do dplyr",
    "text": "4.4 Principais funções do dplyr\nO pacote dplyr é uma das ferramentas mais poderosas para manipulação de dados no R. Ele oferece uma série de funções que facilitam a transformação e análise de dados. Vamos conhecer algumas das principais funções do dplyr:\n\nfilter(): filtra linhas com base em condições específicas.\nselect(): seleciona colunas específicas de um data frame.\nmutate(): adiciona ou modifica colunas.\narrange(): ordena as linhas de um data frame com base em uma ou mais colunas.\nsummarise(): resume os dados, calculando estatísticas agregadas.\ngroup_by(): agrupa os dados com base em uma ou mais colunas, permitindo aplicar funções de resumo a cada grupo.\n\nAo apresentar essas funções, não vamos abordar todos os casos de uso, mas sim o básico de cada uma delas. Você pode consultar os materiais listados no final da aula para aprender mais sobre cada função e suas possibilidades.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Análise exploratória de dados - Parte 2</span>"
    ]
  },
  {
    "objectID": "praticas/04_analise-exploratoria-ii.html#filtrando-dados-com-filter",
    "href": "praticas/04_analise-exploratoria-ii.html#filtrando-dados-com-filter",
    "title": "4  Análise exploratória de dados - Parte 2",
    "section": "4.5 Filtrando dados com filter()",
    "text": "4.5 Filtrando dados com filter()\nA A função filter() é utilizada para filtrar linhas de um data frame com base em condições específicas.\nPor exemplo, podemos filtrar os dados da CETESB para mostrar apenas os municípios que possuem uma população urbana maior que 1 milhão de habitantes:\n\ndados_cetesb |&gt;\n  filter(populacao_urbana &gt; 1000000)\n\n# A tibble: 3 × 12\n    ano uf    ugrhi municipio codigo_ibge populacao_urbana\n  &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt;           &lt;dbl&gt;            &lt;dbl&gt;\n1  2022 SP        5 Campinas      3509502          1202203\n2  2022 SP        6 Guarulhos     3518800          1404694\n3  2022 SP        6 São Paulo     3550308         12284940\n# ℹ 6 more variables: atendimento_coleta_porc &lt;dbl&gt;,\n#   atendimento_tratamento_porc &lt;dbl&gt;, eficiencia &lt;dbl&gt;,\n#   carga_poluidora_potencial &lt;dbl&gt;, carga_poluidora_remancescente &lt;dbl&gt;,\n#   ictem &lt;dbl&gt;\n\n\nPodemos também filtrar as linhas dos municípios do Grande ABC. Neste caso, é mais fácil criar um vetor com os nomes dos municípios, e utilizar o operador %in% para filtrar os dados:\n\nmunicipios_grande_abc &lt;- c(\"São Caetano do Sul\", \"São Bernardo do Campo\", \"Diadema\", \"Santo André\", \"Mauá\", \"Ribeirão Pires\", \"Rio Grande da Serra\")\n\ndados_cetesb |&gt;\n  filter(municipio %in% municipios_grande_abc)\n\n# A tibble: 7 × 12\n    ano uf    ugrhi municipio             codigo_ibge populacao_urbana\n  &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt;                       &lt;dbl&gt;            &lt;dbl&gt;\n1  2022 SP        6 Diadema                   3513801           429550\n2  2022 SP        6 Mauá                      3529401           481725\n3  2022 SP        6 Ribeirão Pires            3543303           125238\n4  2022 SP        6 Rio Grande da Serra       3544103            52009\n5  2022 SP        6 Santo André               3547809           723889\n6  2022 SP        6 São Bernardo do Campo     3548708           835657\n7  2022 SP        6 São Caetano do Sul        3548807           162763\n# ℹ 6 more variables: atendimento_coleta_porc &lt;dbl&gt;,\n#   atendimento_tratamento_porc &lt;dbl&gt;, eficiencia &lt;dbl&gt;,\n#   carga_poluidora_potencial &lt;dbl&gt;, carga_poluidora_remancescente &lt;dbl&gt;,\n#   ictem &lt;dbl&gt;\n\n\nPodemos também consultar quais são os municípios que coletam 100% do esgoto produzido:\n\ndados_cetesb |&gt; \n  filter(atendimento_coleta_porc == 100)\n\n# A tibble: 253 × 12\n     ano uf    ugrhi municipio          codigo_ibge populacao_urbana\n   &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt;                    &lt;dbl&gt;            &lt;dbl&gt;\n 1  2022 SP        2 Areias                 3503505             2619\n 2  2022 SP        2 Caçapava               3508504            81929\n 3  2022 SP        2 Cachoeira Paulista     3508603            27623\n 4  2022 SP        2 Jambeiro               3524907             3269\n 5  2022 SP        2 Pindamonhangaba        3538006           165703\n 6  2022 SP        2 Taubaté                3554102           313898\n 7  2022 SP        4 Altinópolis            3501004            14172\n 8  2022 SP        4 Caconde                3508702            12975\n 9  2022 SP        4 Casa Branca            3510807            25075\n10  2022 SP        4 Jardinópolis           3525102            43706\n# ℹ 243 more rows\n# ℹ 6 more variables: atendimento_coleta_porc &lt;dbl&gt;,\n#   atendimento_tratamento_porc &lt;dbl&gt;, eficiencia &lt;dbl&gt;,\n#   carga_poluidora_potencial &lt;dbl&gt;, carga_poluidora_remancescente &lt;dbl&gt;,\n#   ictem &lt;dbl&gt;\n\n\nDestes, podemos filtrar os que tratem 100% do esgoto coletado:\n\ndados_cetesb |&gt; \n  filter(atendimento_coleta_porc == 100, atendimento_tratamento_porc == 100)\n\n# A tibble: 218 × 12\n     ano uf    ugrhi municipio               codigo_ibge populacao_urbana\n   &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt;                         &lt;dbl&gt;            &lt;dbl&gt;\n 1  2022 SP        2 Cachoeira Paulista          3508603            27623\n 2  2022 SP        2 Jambeiro                    3524907             3269\n 3  2022 SP        2 Pindamonhangaba             3538006           165703\n 4  2022 SP        2 Taubaté                     3554102           313898\n 5  2022 SP        4 Altinópolis                 3501004            14172\n 6  2022 SP        4 Santa Cruz da Esperança     3546256             1467\n 7  2022 SP        4 Serrana                     3551504            45677\n 8  2022 SP        4 Tambaú                      3553302            20663\n 9  2022 SP        5 Corumbataí                  3512704             2200\n10  2022 SP        5 Holambra                    3519055            11303\n# ℹ 208 more rows\n# ℹ 6 more variables: atendimento_coleta_porc &lt;dbl&gt;,\n#   atendimento_tratamento_porc &lt;dbl&gt;, eficiencia &lt;dbl&gt;,\n#   carga_poluidora_potencial &lt;dbl&gt;, carga_poluidora_remancescente &lt;dbl&gt;,\n#   ictem &lt;dbl&gt;\n\n\nAs possibilidades são muitas! Podemos combinar várias condições utilizando os operadores lógicos (como o | (OU) e o ! (NEGAÇÃO).",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Análise exploratória de dados - Parte 2</span>"
    ]
  },
  {
    "objectID": "praticas/04_analise-exploratoria-ii.html#selecionando-colunas-com-select",
    "href": "praticas/04_analise-exploratoria-ii.html#selecionando-colunas-com-select",
    "title": "4  Análise exploratória de dados - Parte 2",
    "section": "4.6 Selecionando colunas com select()",
    "text": "4.6 Selecionando colunas com select()\nA função select() é utilizada para selecionar colunas específicas de um data frame.\nPor exemplo, podemos selecionar apenas as colunas municipio, populacao_urbana e atendimento_coleta_porc dos dados da CETESB:\n\ndados_cetesb |&gt;\n  select(municipio, populacao_urbana, atendimento_coleta_porc)\n\n# A tibble: 645 × 3\n   municipio               populacao_urbana atendimento_coleta_porc\n   &lt;chr&gt;                              &lt;dbl&gt;                   &lt;dbl&gt;\n 1 Campos do Jordão                   52384                    52.6\n 2 Santo Antônio do Pinhal             4067                    46.7\n 3 São Bento do Sapucaí                5251                    98  \n 4 Aparecida                          35684                    70  \n 5 Arapeí                              1844                    95.6\n 6 Areias                              2619                   100  \n 7 Bananal                             8808                    88.1\n 8 Caçapava                           81929                   100  \n 9 Cachoeira Paulista                 27623                   100  \n10 Canas                               4890                    84.6\n# ℹ 635 more rows\n\n\nPodemos também indicar quais colunas queremos excluir, utilizando o operador - antes do nome da coluna. Por exemplo, para excluir as colunas ano e uf, podemos fazer o seguinte:\n\ndados_cetesb |&gt;\n  select(-ano, -uf)\n\n# A tibble: 645 × 10\n   ugrhi municipio           codigo_ibge populacao_urbana atendimento_coleta_p…¹\n   &lt;dbl&gt; &lt;chr&gt;                     &lt;dbl&gt;            &lt;dbl&gt;                  &lt;dbl&gt;\n 1     1 Campos do Jordão        3509700            52384                   52.6\n 2     1 Santo Antônio do P…     3548203             4067                   46.7\n 3     1 São Bento do Sapuc…     3548609             5251                   98  \n 4     2 Aparecida               3502507            35684                   70  \n 5     2 Arapeí                  3503158             1844                   95.6\n 6     2 Areias                  3503505             2619                  100  \n 7     2 Bananal                 3504909             8808                   88.1\n 8     2 Caçapava                3508504            81929                  100  \n 9     2 Cachoeira Paulista      3508603            27623                  100  \n10     2 Canas                   3509957             4890                   84.6\n# ℹ 635 more rows\n# ℹ abbreviated name: ¹​atendimento_coleta_porc\n# ℹ 5 more variables: atendimento_tratamento_porc &lt;dbl&gt;, eficiencia &lt;dbl&gt;,\n#   carga_poluidora_potencial &lt;dbl&gt;, carga_poluidora_remancescente &lt;dbl&gt;,\n#   ictem &lt;dbl&gt;",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Análise exploratória de dados - Parte 2</span>"
    ]
  },
  {
    "objectID": "praticas/04_analise-exploratoria-ii.html#adicionando-ou-modificando-colunas-com-mutate",
    "href": "praticas/04_analise-exploratoria-ii.html#adicionando-ou-modificando-colunas-com-mutate",
    "title": "4  Análise exploratória de dados - Parte 2",
    "section": "4.7 Adicionando ou modificando colunas com mutate()",
    "text": "4.7 Adicionando ou modificando colunas com mutate()\nA função mutate() é utilizada para adicionar novas colunas ou modificar colunas existentes em um data frame.\nA sintaxe básica da função mutate() é:\n\nbase_de_dados |&gt; \n  mutate(nome_da_nova_coluna = o_que_queremos_que_seja_salvo_nela)\n\nPor exemplo, podemos criar uma coluna nova chamada populacao_urbana_mil que representa a população urbana em mil habitantes:\n\ndados_cetesb |&gt;\n  # selecionando as colunas municipio e populacao_urbana\n  # para facilitar a visualização\n  select(municipio, populacao_urbana) |&gt;\n  mutate(populacao_urbana_mil = populacao_urbana / 1000)\n\n# A tibble: 645 × 3\n   municipio               populacao_urbana populacao_urbana_mil\n   &lt;chr&gt;                              &lt;dbl&gt;                &lt;dbl&gt;\n 1 Campos do Jordão                   52384                52.4 \n 2 Santo Antônio do Pinhal             4067                 4.07\n 3 São Bento do Sapucaí                5251                 5.25\n 4 Aparecida                          35684                35.7 \n 5 Arapeí                              1844                 1.84\n 6 Areias                              2619                 2.62\n 7 Bananal                             8808                 8.81\n 8 Caçapava                           81929                81.9 \n 9 Cachoeira Paulista                 27623                27.6 \n10 Canas                               4890                 4.89\n# ℹ 635 more rows\n\n\nA função mutate() também pode ser utilizada para modificar colunas existentes. Por exemplo, podemos mudar a classe de algumas colunas:\n\ndados_cetesb |&gt;\n  mutate(\n    ugrhi = as.character(ugrhi),  # convertendo ugrhi para character\n    codigo_ibge = as.character(codigo_ibge)  # convertendo codigo_ibge para character\n  )\n\n# A tibble: 645 × 12\n     ano uf    ugrhi municipio               codigo_ibge populacao_urbana\n   &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;                   &lt;chr&gt;                  &lt;dbl&gt;\n 1  2022 SP    1     Campos do Jordão        3509700                52384\n 2  2022 SP    1     Santo Antônio do Pinhal 3548203                 4067\n 3  2022 SP    1     São Bento do Sapucaí    3548609                 5251\n 4  2022 SP    2     Aparecida               3502507                35684\n 5  2022 SP    2     Arapeí                  3503158                 1844\n 6  2022 SP    2     Areias                  3503505                 2619\n 7  2022 SP    2     Bananal                 3504909                 8808\n 8  2022 SP    2     Caçapava                3508504                81929\n 9  2022 SP    2     Cachoeira Paulista      3508603                27623\n10  2022 SP    2     Canas                   3509957                 4890\n# ℹ 635 more rows\n# ℹ 6 more variables: atendimento_coleta_porc &lt;dbl&gt;,\n#   atendimento_tratamento_porc &lt;dbl&gt;, eficiencia &lt;dbl&gt;,\n#   carga_poluidora_potencial &lt;dbl&gt;, carga_poluidora_remancescente &lt;dbl&gt;,\n#   ictem &lt;dbl&gt;",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Análise exploratória de dados - Parte 2</span>"
    ]
  },
  {
    "objectID": "praticas/04_analise-exploratoria-ii.html#ordenando-dados-com-arrange",
    "href": "praticas/04_analise-exploratoria-ii.html#ordenando-dados-com-arrange",
    "title": "4  Análise exploratória de dados - Parte 2",
    "section": "4.8 Ordenando dados com arrange()",
    "text": "4.8 Ordenando dados com arrange()\nA função arrange() é utilizada para ordenar as linhas de um data frame com base em uma ou mais colunas.\nPodemos ordenar os dados da CETESB pela coluna carga_poluidora_remancescente, em ordem crescente:\n\ndados_cetesb |&gt;\n  arrange(carga_poluidora_remancescente)\n\n# A tibble: 645 × 12\n     ano uf    ugrhi municipio              codigo_ibge populacao_urbana\n   &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt;                        &lt;dbl&gt;            &lt;dbl&gt;\n 1  2022 SP       14 Ribeirão Grande            3543253             2427\n 2  2022 SP       13 Trabiju                    3554755             1609\n 3  2022 SP       21 Borá                       3507209              653\n 4  2022 SP       15 Turmalina                  3555307             1186\n 5  2022 SP        2 Jambeiro                   3524907             3269\n 6  2022 SP       18 Santa Salete               3547650              882\n 7  2022 SP       18 Santana da Ponte Pensa     3547205              968\n 8  2022 SP       15 Mesópolis                  3529658             1481\n 9  2022 SP       18 Nova Canaã Paulista        3532843              759\n10  2022 SP       19 Turiúba                    3555208             1657\n# ℹ 635 more rows\n# ℹ 6 more variables: atendimento_coleta_porc &lt;dbl&gt;,\n#   atendimento_tratamento_porc &lt;dbl&gt;, eficiencia &lt;dbl&gt;,\n#   carga_poluidora_potencial &lt;dbl&gt;, carga_poluidora_remancescente &lt;dbl&gt;,\n#   ictem &lt;dbl&gt;\n\n\nTambém podemos ordenar os dados em ordem decrescente, utilizando a função desc():\n\ndados_cetesb |&gt;\n  arrange(desc(populacao_urbana))\n\n# A tibble: 645 × 12\n     ano uf    ugrhi municipio             codigo_ibge populacao_urbana\n   &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt;                       &lt;dbl&gt;            &lt;dbl&gt;\n 1  2022 SP        6 São Paulo                 3550308         12284940\n 2  2022 SP        6 Guarulhos                 3518800          1404694\n 3  2022 SP        5 Campinas                  3509502          1202203\n 4  2022 SP        6 São Bernardo do Campo     3548708           835657\n 5  2022 SP        6 Santo André               3547809           723889\n 6  2022 SP        2 São José dos Campos       3549904           722310\n 7  2022 SP        4 Ribeirão Preto            3543402           718072\n 8  2022 SP        6 Osasco                    3534401           701428\n 9  2022 SP       10 Sorocaba                  3552205           688252\n10  2022 SP        6 Mauá                      3529401           481725\n# ℹ 635 more rows\n# ℹ 6 more variables: atendimento_coleta_porc &lt;dbl&gt;,\n#   atendimento_tratamento_porc &lt;dbl&gt;, eficiencia &lt;dbl&gt;,\n#   carga_poluidora_potencial &lt;dbl&gt;, carga_poluidora_remancescente &lt;dbl&gt;,\n#   ictem &lt;dbl&gt;",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Análise exploratória de dados - Parte 2</span>"
    ]
  },
  {
    "objectID": "praticas/04_analise-exploratoria-ii.html#agrupando-dados-com-group_by",
    "href": "praticas/04_analise-exploratoria-ii.html#agrupando-dados-com-group_by",
    "title": "4  Análise exploratória de dados - Parte 2",
    "section": "4.9 Agrupando dados com group_by()",
    "text": "4.9 Agrupando dados com group_by()\nA função group_by() é utilizada para agrupar os dados com base em uma ou mais colunas. Isso é especialmente útil quando queremos aplicar funções de resumo a cada grupo.\nPor exemplo, podemos agrupar os dados da CETESB pela coluna ugrhi (Unidade de Gerenciamento de Recursos Hídricos) e calcular a soma da população urbana para cada UGRHI:\n\ndados_cetesb |&gt;\n  group_by(ugrhi) \n\n# A tibble: 645 × 12\n# Groups:   ugrhi [22]\n     ano uf    ugrhi municipio               codigo_ibge populacao_urbana\n   &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt;                         &lt;dbl&gt;            &lt;dbl&gt;\n 1  2022 SP        1 Campos do Jordão            3509700            52384\n 2  2022 SP        1 Santo Antônio do Pinhal     3548203             4067\n 3  2022 SP        1 São Bento do Sapucaí        3548609             5251\n 4  2022 SP        2 Aparecida                   3502507            35684\n 5  2022 SP        2 Arapeí                      3503158             1844\n 6  2022 SP        2 Areias                      3503505             2619\n 7  2022 SP        2 Bananal                     3504909             8808\n 8  2022 SP        2 Caçapava                    3508504            81929\n 9  2022 SP        2 Cachoeira Paulista          3508603            27623\n10  2022 SP        2 Canas                       3509957             4890\n# ℹ 635 more rows\n# ℹ 6 more variables: atendimento_coleta_porc &lt;dbl&gt;,\n#   atendimento_tratamento_porc &lt;dbl&gt;, eficiencia &lt;dbl&gt;,\n#   carga_poluidora_potencial &lt;dbl&gt;, carga_poluidora_remancescente &lt;dbl&gt;,\n#   ictem &lt;dbl&gt;\n\n\nA função group_by() não altera os dados, mas prepara o data frame para que possamos aplicar funções de resumo a cada grupo. Portanto, ela é frequentemente utilizada em conjunto com a função summarise().",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Análise exploratória de dados - Parte 2</span>"
    ]
  },
  {
    "objectID": "praticas/04_analise-exploratoria-ii.html#resumindo-dados-com-summarise",
    "href": "praticas/04_analise-exploratoria-ii.html#resumindo-dados-com-summarise",
    "title": "4  Análise exploratória de dados - Parte 2",
    "section": "4.10 Resumindo dados com summarise()",
    "text": "4.10 Resumindo dados com summarise()\nA função summarise() é utilizada para resumir os dados, calculando estatísticas agregadas. Ela é frequentemente utilizada em conjunto com a função group_by().\nComo vimos na aula anterior, a função summary() nos dá um resumo de estatísticas descritivas para todas as colunas. Porém, podemos querer calcular estatísticas descritivas apenas para algum subconjunto dos dados.\nImagine que queremos calcular algumas estatísticas descritivas considerando cada UGRHI (Unidade de Gerenciamento de Recursos Hídricos) separadamente. Podemos fazer isso utilizando as funções group_by() e summarise().\n\nestatisticas_descritivas &lt;- dados_cetesb |&gt;\n  # agrupar os dados pela coluna ugrhi\n  group_by(ugrhi) |&gt;\n  # calcular estatísticas descritivas para cada grupo\n  summarise(\n    quantidade_municipios = n(),\n    soma_populacao_urbana = sum(populacao_urbana),\n    media_ictem = mean(ictem) |&gt; round(2),\n    mediana_ictem = median(ictem) |&gt; round(2),\n    desvio_padrao_ictem = sd(ictem) |&gt; round(2)\n  )\n\nknitr::kable(estatisticas_descritivas)\n\n\n\n\n\n\n\n\n\n\n\n\nugrhi\nquantidade_municipios\nsoma_populacao_urbana\nmedia_ictem\nmediana_ictem\ndesvio_padrao_ictem\n\n\n\n\n1\n3\n61702\n6.86\n5.97\n2.78\n\n\n2\n34\n2124413\n5.87\n6.98\n3.30\n\n\n3\n4\n337159\n5.10\n4.66\n1.74\n\n\n4\n23\n1215586\n7.09\n8.12\n2.83\n\n\n5\n57\n5737151\n7.10\n7.85\n2.99\n\n\n6\n34\n21626154\n4.93\n5.03\n2.39\n\n\n7\n9\n1893370\n5.01\n5.09\n1.22\n\n\n8\n22\n707923\n9.18\n9.98\n1.34\n\n\n9\n38\n1542781\n6.91\n7.64\n3.02\n\n\n10\n33\n1937230\n7.05\n7.10\n2.66\n\n\n11\n23\n273446\n7.10\n7.09\n1.87\n\n\n12\n12\n346186\n7.92\n8.45\n2.59\n\n\n13\n34\n1608773\n7.94\n8.08\n2.29\n\n\n14\n34\n631467\n8.01\n8.20\n1.84\n\n\n15\n64\n1289129\n8.77\n9.89\n1.66\n\n\n16\n33\n520262\n8.36\n9.70\n2.24\n\n\n17\n42\n666615\n8.88\n9.75\n1.23\n\n\n18\n25\n212661\n9.01\n10.00\n1.63\n\n\n19\n42\n772089\n8.31\n8.15\n1.54\n\n\n20\n32\n348271\n8.69\n8.57\n1.34\n\n\n21\n26\n444578\n8.96\n9.70\n1.80\n\n\n22\n21\n470161\n9.09\n9.70\n1.01\n\n\n\n\n\nPodemos salvar o resultado em um arquivo CSV ou Excel, utilizando as funções readr::write_csv() ou writexl::write_excel_csv():\n\nwrite_csv(estatisticas_descritivas,\n          \"dados/estatisticas-descritivas-ugrhi.csv\")\n\nwritexl::write_xlsx(estatisticas_descritivas,\n                    \"dados/estatisticas-descritivas-ugrhi.xlsx\")",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Análise exploratória de dados - Parte 2</span>"
    ]
  },
  {
    "objectID": "praticas/04_analise-exploratoria-ii.html#unindo-tabelas-com-left_join",
    "href": "praticas/04_analise-exploratoria-ii.html#unindo-tabelas-com-left_join",
    "title": "4  Análise exploratória de dados - Parte 2",
    "section": "4.11 Unindo tabelas com left_join()",
    "text": "4.11 Unindo tabelas com left_join()\nA função left_join() é utilizada para unir duas tabelas com base em uma ou mais colunas em comum (chamada de chave - key).\nPara este exemplo, vamos importar uma tabela que contém informações sobre o IDH (Índice de Desenvolvimento Humano) dos municípios de São Paulo, referente ao ano de 2010. Esses dados são baseados no Censo, mas ainda não temos o IDH calculado para o ano de 2022.\n\ndados_idhm &lt;- read_csv(\"https://raw.githubusercontent.com/beatrizmilz/ESHT011-21-analise-dados-planejamento-territorial/refs/heads/main/praticas/dados/idhm_sp_2010.csv\")\n\nRows: 645 Columns: 15\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (3): muni_nm, uf_sigla, regiao_nm\ndbl (12): ano, muni_id, idhm, idhm_e, idhm_l, idhm_r, espvida, rdpc, gini, p...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nPara fazer o join, precisamos garantir que as colunas que vamos utilizar como chave estejam no mesmo formato. Neste caso, vamos utilizar a coluna referente ao código do IBGE como chave para unir as duas tabelas:\n\nnames(dados_idhm)\n\n [1] \"ano\"       \"muni_id\"   \"muni_nm\"   \"uf_sigla\"  \"regiao_nm\" \"idhm\"     \n [7] \"idhm_e\"    \"idhm_l\"    \"idhm_r\"    \"espvida\"   \"rdpc\"      \"gini\"     \n[13] \"pop\"       \"lat\"       \"lon\"      \n\nnames(dados_cetesb)\n\n [1] \"ano\"                           \"uf\"                           \n [3] \"ugrhi\"                         \"municipio\"                    \n [5] \"codigo_ibge\"                   \"populacao_urbana\"             \n [7] \"atendimento_coleta_porc\"       \"atendimento_tratamento_porc\"  \n [9] \"eficiencia\"                    \"carga_poluidora_potencial\"    \n[11] \"carga_poluidora_remancescente\" \"ictem\"                        \n\n\nÉ importante que a variável que usaremos como chave esteja no mesmo formato nas duas tabelas. Usamos a função class() para verificar o tipo de dado de cada coluna:\n\nclass(dados_cetesb$codigo_ibge)\n\n[1] \"numeric\"\n\nclass(dados_idhm$muni_id)\n\n[1] \"numeric\"\n\n\nObs: caso as colunas não estejam no mesmo formato, podemos utilizar a função mutate() para alterar o tipo de dado de uma das colunas, junto com funções como as.character() ou as.numeric(), dependendo da classe de dado que queremos.\nAgora podemos unir as duas tabelas utilizando a função left_join(). Essa função irá manter todas as linhas da tabela da esquerda (dados_cetesb) e adicionar as colunas da tabela da direita (dados_idhm) onde houver correspondência na chave especificada.\n\ndados_unidos &lt;- left_join(\n  # tabela da esquerda\n  dados_cetesb, \n  # tabela da direita\n  dados_idhm, \n  # o argumento `by` especifica as colunas que serão utilizadas como chave para o join\n  by = c(\"codigo_ibge\" = \"muni_id\")\n  )\n\nA nova tabela dados_unidos agora contém todas as colunas de ambas as tabelas, com os dados do IDH adicionados aos municípios correspondentes. Se um município não tiver um valor correspondente na tabela de IDH, as colunas relacionadas ao IDH terão valores NA.\n\nglimpse(dados_unidos)\n\nRows: 645\nColumns: 26\n$ ano.x                         &lt;dbl&gt; 2022, 2022, 2022, 2022, 2022, 2022, 2022…\n$ uf                            &lt;chr&gt; \"SP\", \"SP\", \"SP\", \"SP\", \"SP\", \"SP\", \"SP\"…\n$ ugrhi                         &lt;dbl&gt; 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2…\n$ municipio                     &lt;chr&gt; \"Campos do Jordão\", \"Santo Antônio do Pi…\n$ codigo_ibge                   &lt;dbl&gt; 3509700, 3548203, 3548609, 3502507, 3503…\n$ populacao_urbana              &lt;dbl&gt; 52384, 4067, 5251, 35684, 1844, 2619, 88…\n$ atendimento_coleta_porc       &lt;dbl&gt; 52.6, 46.7, 98.0, 70.0, 95.6, 100.0, 88.…\n$ atendimento_tratamento_porc   &lt;dbl&gt; 100.0, 100.0, 100.0, 0.0, 95.6, 0.0, 100…\n$ eficiencia                    &lt;dbl&gt; 93.0, 80.0, 91.3, 0.0, 99.0, 0.0, 75.0, …\n$ carga_poluidora_potencial     &lt;dbl&gt; 2829, 220, 284, 1927, 100, 141, 476, 442…\n$ carga_poluidora_remancescente &lt;dbl&gt; 1445, 138, 30, 1927, 9, 141, 161, 1858, …\n$ ictem                         &lt;dbl&gt; 5.97, 4.63, 9.97, 1.55, 9.86, 1.50, 7.61…\n$ ano.y                         &lt;dbl&gt; 2010, 2010, 2010, 2010, 2010, 2010, 2010…\n$ muni_nm                       &lt;chr&gt; \"CAMPOS DO JORDÃO\", \"SANTO ANTÔNIO DO PI…\n$ uf_sigla                      &lt;chr&gt; \"SP\", \"SP\", \"SP\", \"SP\", \"SP\", \"SP\", \"SP\"…\n$ regiao_nm                     &lt;chr&gt; \"Sudeste\", \"Sudeste\", \"Sudeste\", \"Sudest…\n$ idhm                          &lt;dbl&gt; 0.749, 0.706, 0.720, 0.755, 0.680, 0.697…\n$ idhm_e                        &lt;dbl&gt; 0.648, 0.632, 0.638, 0.706, 0.612, 0.672…\n$ idhm_l                        &lt;dbl&gt; 0.852, 0.812, 0.812, 0.828, 0.812, 0.803…\n$ idhm_r                        &lt;dbl&gt; 0.761, 0.685, 0.719, 0.735, 0.634, 0.627…\n$ espvida                       &lt;dbl&gt; 76.10, 73.69, 73.69, 74.67, 73.72, 73.18…\n$ rdpc                          &lt;dbl&gt; 911.40, 569.08, 701.89, 775.17, 414.19, …\n$ gini                          &lt;dbl&gt; 0.59, 0.47, 0.55, 0.46, 0.39, 0.44, 0.51…\n$ pop                           &lt;dbl&gt; 47287, 6450, 10370, 34630, 2481, 3632, 1…\n$ lat                           &lt;dbl&gt; -22.739, -22.827, -22.689, -22.847, -22.…\n$ lon                           &lt;dbl&gt; -45.591, -45.663, -45.731, -45.230, -44.…\n\n\nPodemos salvar os dados unidos em um arquivo CSV ou Excel, utilizando as funções readr::write_csv() ou writexl::write_excel_csv():\n\nwrite_csv(dados_unidos,\n          \"dados/dados-join-cetesb-idhm.csv\")\n\nEste caso é um exemplo de um join bem simples, onde temos uma chave única em cada tabela. No entanto, existem outros tipos de joins, como inner_join(), right_join(), full_join(), que podem ser utilizados dependendo da situação.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Análise exploratória de dados - Parte 2</span>"
    ]
  },
  {
    "objectID": "praticas/04_analise-exploratoria-ii.html#materiais-complementares",
    "href": "praticas/04_analise-exploratoria-ii.html#materiais-complementares",
    "title": "4  Análise exploratória de dados - Parte 2",
    "section": "4.12 Materiais complementares",
    "text": "4.12 Materiais complementares\n\nMateriais do curso Introdução à análise de dados no R:\n\nTransformando dados\nAnálise exploratória de dados",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Análise exploratória de dados - Parte 2</span>"
    ]
  },
  {
    "objectID": "praticas/05_intervalo-de-confianca.html",
    "href": "praticas/05_intervalo-de-confianca.html",
    "title": "5  Prática - Intervalo de confiança",
    "section": "",
    "text": "5.1 Carregar pacotes\nNesta prática, vamos imaginar a seguinte situação: queremos saber qual é a média das alturas das pessoas que estão matriculadas nessa disciplina, considerando o sexo biológico. Para isso, criamos um formulário do Google Forms e solicitamos que as pessoas respondessem. Entretanto, nem todas as pessoas responderam, e só temos uma amostra.\nRevisando alguns conceitos apresentados em aula: neste exemplo…\nlibrary(tidyverse)\nlibrary(janitor)",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Prática - Intervalo de confiança</span>"
    ]
  },
  {
    "objectID": "praticas/05_intervalo-de-confianca.html#importar-os-dados",
    "href": "praticas/05_intervalo-de-confianca.html#importar-os-dados",
    "title": "5  Prática - Intervalo de confiança",
    "section": "5.2 Importar os dados",
    "text": "5.2 Importar os dados\nOs dados estão disponíveis em um formulário do Google. Podemos importá-los de duas formas: - usando o pacote googlesheets4 (requer autenticação) - baixar o arquivo CSV exportado do Google Forms e ler com read_csv(). Salve o arquivo CSV na pasta dados/ do seu projeto.\nNeste exemplo, vamos importar o arquivo CSV exportado do Google Forms. O CSV que será utilizado é um recorte do arquivo completo, pois removemos as colunas de nome e email.\nSe você fez o download do arquivo CSV, coloque-o na pasta dados/ do seu projeto. Caso contrário, você pode usar o link direto para o arquivo CSV no GitHub.\n\n# leitura do CSV exportado do Google Forms\ndados_brutos &lt;- read_csv(\"dados/respostas_forms_altura.csv\")\n\n\n# leitura de uma cópia dos dados que está salva no GitHub\ndados_brutos &lt;- read_csv(\"https://raw.githubusercontent.com/beatrizmilz/ESHT011-21-analise-dados-planejamento-territorial/refs/heads/main/praticas/dados/respostas_forms_altura.csv\")\n\nRows: 33 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): Sexo biológico, Turma\ndbl  (2): Idade, Altura (em metros)\ndttm (1): Carimbo de data/hora\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nVamos dar uma olhada nos dados que importamos:\n\nglimpse(dados_brutos)\n\nRows: 33\nColumns: 5\n$ `Carimbo de data/hora` &lt;dttm&gt; 2025-06-23 10:04:10, 2025-06-23 10:08:13, 2025…\n$ Idade                  &lt;dbl&gt; 36, 43, 20, 56, 42, 35, 36, 26, 21, 28, 29, 31,…\n$ `Sexo biológico`       &lt;chr&gt; \"Feminino\", \"Feminino\", \"Masculino\", \"Masculino…\n$ `Altura (em metros)`   &lt;dbl&gt; 1.58, 1.68, 1.73, 1.73, 1.69, 1.68, 1.94, 1.76,…\n$ Turma                  &lt;chr&gt; \"Pós-graduação - Matutino\", \"Pós-graduação - Ma…\n\n\nAlgo que podemos fazer é limpar os nomes das colunas, pois eles podem conter espaços, caracteres especiais ou estarem em letras maiúsculas. Vamos usar a função clean_names() do pacote janitor para isso.\n\ndados &lt;- clean_names(dados_brutos)\n\nAgora podemos verificar os nomes das colunas novamente para garantir que estão limpos e prontos para uso:\n\nglimpse(dados)\n\nRows: 33\nColumns: 5\n$ carimbo_de_data_hora &lt;dttm&gt; 2025-06-23 10:04:10, 2025-06-23 10:08:13, 2025-0…\n$ idade                &lt;dbl&gt; 36, 43, 20, 56, 42, 35, 36, 26, 21, 28, 29, 31, 4…\n$ sexo_biologico       &lt;chr&gt; \"Feminino\", \"Feminino\", \"Masculino\", \"Masculino\",…\n$ altura_em_metros     &lt;dbl&gt; 1.58, 1.68, 1.73, 1.73, 1.69, 1.68, 1.94, 1.76, 1…\n$ turma                &lt;chr&gt; \"Pós-graduação - Matutino\", \"Pós-graduação - Matu…",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Prática - Intervalo de confiança</span>"
    ]
  },
  {
    "objectID": "praticas/05_intervalo-de-confianca.html#conhecendo-os-dados",
    "href": "praticas/05_intervalo-de-confianca.html#conhecendo-os-dados",
    "title": "5  Prática - Intervalo de confiança",
    "section": "5.3 Conhecendo os dados",
    "text": "5.3 Conhecendo os dados\nVamos começar visualizando a distribuição das alturas por sexo biológico. Para isso, podemos criar um histograma para cada grupo de sexo biológico.\n\ndados |&gt; \nggplot(aes(x = altura_em_metros, fill = sexo_biologico)) +\n  geom_histogram(binwidth = 0.05, color = \"black\", show.legend = FALSE) +\n  labs(y = \"Quantidade de pessoas\",\n        x = \"Altura (m)\") +\n  scale_x_continuous(breaks = seq(1.50, 2.1, by = 0.05)) +\n  theme_minimal() +\n  facet_wrap(~ sexo_biologico , nrow = 2\n             ) +\n  scale_fill_brewer(palette = \"Set2\", direction = -1)\n\n\n\n\n\n\n\n\nVamos criar um box-plot para visualizar a distribuição das alturas por sexo biológico. Isso nos ajudará a entender como as alturas estão distribuídas em cada grupo.\n\ndados |&gt; \nggplot(aes(x = sexo_biologico, y = altura_em_metros)) +\n  geom_boxplot(aes(fill = sexo_biologico), show.legend = FALSE) +\n  geom_jitter(show.legend = FALSE, alpha = 0.5) +\n  labs(x = \"Sexo Biológico\",\n       y = \"Altura (m)\") +\n  scale_y_continuous(breaks = seq(1.5, 2.1, by = 0.05)) +\n  theme_minimal( )+\n  scale_fill_brewer(palette = \"Set2\", direction = -1)\n\n\n\n\n\n\n\n\nOutro ponto importante é saber o tamanho da nossa amostra. E atenção: neste caso, queremos calcular o intervalo de confiança para a média de dois grupos (sexo biológico), então precisamos calcular a amostra separadamente para cada grupo.\n\ntabyl(dados, sexo_biologico) |&gt; # criando uma tabela de frequências\n  adorn_totals(\"row\") |&gt;  # adicionando a linha de total\n  adorn_pct_formatting() # formatando os percentuais\n\n sexo_biologico  n percent\n       Feminino 13   39.4%\n      Masculino 20   60.6%\n          Total 33  100.0%",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Prática - Intervalo de confiança</span>"
    ]
  },
  {
    "objectID": "praticas/05_intervalo-de-confianca.html#calcular-a-média-desvio-padrão-e-número-de-respostas",
    "href": "praticas/05_intervalo-de-confianca.html#calcular-a-média-desvio-padrão-e-número-de-respostas",
    "title": "5  Prática - Intervalo de confiança",
    "section": "5.4 Calcular a média, desvio padrão e número de respostas",
    "text": "5.4 Calcular a média, desvio padrão e número de respostas\nPara calcular o intervalo de confiança da média das alturas por sexo biológico, precisamos primeiro calcular a média, o desvio padrão e o tamanho da amostra.\nPara isso, podemos usar a função group_by() do dplyr para agrupar os dados por sexo biológico e, em seguida, usar a função summarise() para calcular as estatísticas desejadas. Essas funções foram abordadas na prática anterior.\nPara calcular a média, utilizamos a função mean(), para o desvio padrão usamos sd() e para o tamanho da amostra usamos n(). Lembrando que, caso a variável tenha valores ausente (NA), devemos usar o argumento na.rm = TRUE para ignorá-los nos cálculos.\n\ndados |&gt; \n  group_by(sexo_biologico) |&gt;\n  summarise(\n    media = mean(altura_em_metros, na.rm = TRUE),\n    desvio_padrao = sd(altura_em_metros, na.rm = TRUE),\n    tamanho_amostra_n = n(),\n  )\n\n# A tibble: 2 × 4\n  sexo_biologico media desvio_padrao tamanho_amostra_n\n  &lt;chr&gt;          &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;\n1 Feminino        1.67        0.0485                13\n2 Masculino       1.77        0.0784                20",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Prática - Intervalo de confiança</span>"
    ]
  },
  {
    "objectID": "praticas/05_intervalo-de-confianca.html#calcular-o-erro-padrão",
    "href": "praticas/05_intervalo-de-confianca.html#calcular-o-erro-padrão",
    "title": "5  Prática - Intervalo de confiança",
    "section": "5.5 Calcular o erro padrão",
    "text": "5.5 Calcular o erro padrão\nCom essas informações, podemos calcular o erro padrão (Standard Error - SE) amostral da média:\n\\[SE = \\frac{s}{\\sqrt{n}}\\]\nOnde \\(s\\) é o desvio padrão amostral e \\(n\\) é o tamanho da amostra. Lembrando que o erro padrão nos dá uma medida da precisão da média amostral como estimativa da média populacional.\n\ndados |&gt; \n  group_by(sexo_biologico) |&gt;\n  summarise(\n    media = mean(altura_em_metros, na.rm = TRUE),\n    desvio_padrao = sd(altura_em_metros, na.rm = TRUE),\n    tamanho_amostra_n = n(),\n    erro_padrao = desvio_padrao / sqrt(tamanho_amostra_n)\n  )\n\n# A tibble: 2 × 5\n  sexo_biologico media desvio_padrao tamanho_amostra_n erro_padrao\n  &lt;chr&gt;          &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;dbl&gt;\n1 Feminino        1.67        0.0485                13      0.0134\n2 Masculino       1.77        0.0784                20      0.0175",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Prática - Intervalo de confiança</span>"
    ]
  },
  {
    "objectID": "praticas/05_intervalo-de-confianca.html#definindo-o-valor-crítico",
    "href": "praticas/05_intervalo-de-confianca.html#definindo-o-valor-crítico",
    "title": "5  Prática - Intervalo de confiança",
    "section": "5.6 Definindo o valor crítico",
    "text": "5.6 Definindo o valor crítico\nO intervalo de confiança é dado pela fórmula:\n\\[\nIC = \\bar{x} \\pm (z \\times SE)\n\\]\nOnde \\(\\bar{x}\\) é a média amostral, \\(z\\) é o valor crítico (para um IC de 95%, \\(z \\approx 1.96\\), quando a amostra é grande ou a variável tem distribuição aproximadamente normal) e \\(SE\\) é o erro padrão.\nUsar um intervalo de confiança de 95% significa que queremos encontrar uma faixa de valores onde acreditamos, com 95% de confiança, que está a média verdadeira da população.\nEsse valor de \\(z \\approx 1.96\\) é usado apenas quando usamos a distribuição normal. No entanto, como estamos trabalhando com amostras pequenas, utilizamos a distribuição t de Student, e o valor crítico \\(t\\) (que substitui o \\(z\\)) é calculado com a função qt(). Neste caso, o valor muda conforme o tamanho da amostra (n) e é calculado com base nos graus de liberdade (n − 1).\n\n5.6.1 Como calcular o valor crítico para um intervalo de confiança de 95% com a distribuição t de Student?\nPodemos usar a função qt() do R, que calcula o quantil da distribuição t de Student. Para um intervalo de confiança de 95%, precisamos calcular o quantil para 0.975 (ou seja, 1 - 0.025, já que estamos considerando os dois lados da distribuição).\n\ndados |&gt; \n  group_by(sexo_biologico) |&gt;\n  summarise(\n    media = mean(altura_em_metros, na.rm = TRUE),\n    desvio_padrao = sd(altura_em_metros, na.rm = TRUE),\n    tamanho_amostra_n = n(),\n    erro_padrao = desvio_padrao / sqrt(tamanho_amostra_n),\n    valor_t = qt(p = 0.975, df = tamanho_amostra_n - 1) # valor crítico t para IC de 95%\n  )\n\n# A tibble: 2 × 6\n  sexo_biologico media desvio_padrao tamanho_amostra_n erro_padrao valor_t\n  &lt;chr&gt;          &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;dbl&gt;   &lt;dbl&gt;\n1 Feminino        1.67        0.0485                13      0.0134    2.18\n2 Masculino       1.77        0.0784                20      0.0175    2.09",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Prática - Intervalo de confiança</span>"
    ]
  },
  {
    "objectID": "praticas/05_intervalo-de-confianca.html#calcular-o-intervalo-de-confiança",
    "href": "praticas/05_intervalo-de-confianca.html#calcular-o-intervalo-de-confiança",
    "title": "5  Prática - Intervalo de confiança",
    "section": "5.7 Calcular o intervalo de confiança",
    "text": "5.7 Calcular o intervalo de confiança\n\nic_altura &lt;- dados |&gt; \n  group_by(sexo_biologico) |&gt; \n  summarise(\n    media = mean(altura_em_metros, na.rm = TRUE),\n    desvio_padrao = sd(altura_em_metros, na.rm = TRUE),\n    tamanho_amostra_n = n(),\n    erro_padrao = desvio_padrao / sqrt(tamanho_amostra_n),\n    valor_t = qt(p = 0.975, df = tamanho_amostra_n - 1),\n    ic_inferior = media - (valor_t * erro_padrao),\n    ic_superior = media + (valor_t * erro_padrao)\n  )\n\nknitr::kable(ic_altura)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsexo_biologico\nmedia\ndesvio_padrao\ntamanho_amostra_n\nerro_padrao\nvalor_t\nic_inferior\nic_superior\n\n\n\n\nFeminino\n1.668462\n0.0484503\n13\n0.0134377\n2.178813\n1.639183\n1.697740\n\n\nMasculino\n1.767000\n0.0784119\n20\n0.0175334\n2.093024\n1.730302\n1.803698\n\n\n\n\n\nCom o intervalo de confiança calculado, podemos visualizar os resultados em um gráfico. Vamos criar um gráfico de pontos com barras de erro para representar o intervalo de confiança.\n\nggplot(ic_altura,\n       aes(x = sexo_biologico, y = media, color = sexo_biologico)) +\n  geom_point(show.legend = FALSE) +\n  geom_errorbar(aes(ymin = ic_inferior, ymax = ic_superior),\n                width = 0.2,\n                show.legend = FALSE) +\n  labs(x = \"Sexo Biológico\", y = \"Altura Média (m)\") +\n  scale_color_brewer(palette = \"Set2\", direction = -1) +\n  scale_y_continuous(breaks = seq(1.5, 2.1, by = 0.01)) +\n  theme_minimal()\n\n\n\n\n\n\n\n\nPara discussão:\n\nO intervalo de confiança dos dois grupos se sobrepõe? O que isso pode significar?\nComo o tamanho da amostra (n) afetou o intervalo de confiança?\nComo a variação nas alturas (desvio padrão) influenciou o intervalo de confiança? ## Materiais complementares\n\n\nMateriais da disciplina Ciência de Dados Aplicada ao Direito II:\n\nTestes de hipóteses",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Prática - Intervalo de confiança</span>"
    ]
  },
  {
    "objectID": "praticas/06_correlacao.html",
    "href": "praticas/06_correlacao.html",
    "title": "6  Prática - Correlação",
    "section": "",
    "text": "6.1 Carregando os pacotes\nOs pacotes necessários para essa prática são:\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(corrplot)\n\ncorrplot 0.95 loaded\n\nlibrary(GGally)\n\nRegistered S3 method overwritten by 'GGally':\n  method from   \n  +.gg   ggplot2",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Prática - Correlação</span>"
    ]
  },
  {
    "objectID": "praticas/06_correlacao.html#carregando-os-pacotes",
    "href": "praticas/06_correlacao.html#carregando-os-pacotes",
    "title": "6  Prática - Correlação",
    "section": "",
    "text": "tidyverse: para manipulação e visualização de dados;\ncorrplot e GGally: para visualização de matrizes de correlação;",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Prática - Correlação</span>"
    ]
  },
  {
    "objectID": "praticas/06_correlacao.html#importando-os-dados",
    "href": "praticas/06_correlacao.html#importando-os-dados",
    "title": "6  Prática - Correlação",
    "section": "6.2 Importando os dados",
    "text": "6.2 Importando os dados\nPara executar a análise de correlação vamos utilizar dados demográficos e de consumo de água de 2010, para uma amostra de municípios, extraídos do Censo Demográfico (IBGE) e do Sistema Nacional de Informações sobre Saneamento (SNIS), para investigar se o consumo de água está correlacionado com a renda, conforme análise apresentada por Carmo et al., 2013.\nDownload: Clique aqui caso queira fazer o download dos dados\nAtenção: os dados estão no formato CSV, que é um formato de texto separado por vírgulas. O read_csv2 é usado para ler arquivos CSV que usam ponto e vírgula (;) como separador de campos, o que é o caso deste arquivo.\n\ndados &lt;- read_csv2(\"https://raw.githubusercontent.com/beatrizmilz/ESHT011-21-analise-dados-planejamento-territorial/refs/heads/main/praticas/dados/agua_rede1.csv\") \n\nℹ Using \"','\" as decimal and \"'.'\" as grouping mark. Use `read_delim()` for more control.\n\n\nRows: 5566 Columns: 19\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \";\"\nchr  (4): nome_mun, uf, regiao, idh_class\ndbl (15): id_ibge, domicil, rede, proprede, id_snis, pib, rendapita, gini, i...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nVamos dar uma olhada para conhecer a estrutura dos dados e as variáveis disponíveis.\n\nglimpse(dados)\n\nRows: 5,566\nColumns: 19\n$ id_ibge   &lt;dbl&gt; 3548807, 4214904, 3303302, 3205309, 3547304, 4205407, 314480…\n$ domicil   &lt;dbl&gt; 50492, 1312, 169237, 108515, 31610, 147437, 24203, 508456, 7…\n$ rede      &lt;dbl&gt; 50472, 412, 164768, 107715, 28728, 137984, 22436, 505149, 73…\n$ proprede  &lt;dbl&gt; 0.9996038976, 0.3140243902, 0.9735932450, 0.9926277473, 0.90…\n$ id_snis   &lt;dbl&gt; 354880, 421490, 330330, 320530, 354730, 420540, 314480, 4314…\n$ nome_mun  &lt;chr&gt; \"São Caetano do Sul\", \"Rio Fortuna\", \"Niterói\", \"Vitória\", \"…\n$ uf        &lt;chr&gt; \"SP\", \"SC\", \"RJ\", \"ES\", \"SP\", \"SC\", \"MG\", \"RS\", \"DF\", \"SP\", …\n$ regiao    &lt;chr&gt; \"Sudeste\", \"Sul\", \"Sudeste\", \"Sudeste\", \"Sudeste\", \"Sul\", \"S…\n$ pib       &lt;dbl&gt; 6694384.00, 39035.65, 5831066.00, 9270129.00, 1085714.00, 42…\n$ rendapita &lt;dbl&gt; 2008.98, 1570.54, 1951.11, 1820.97, 1798.50, 1770.29, 1709.8…\n$ gini      &lt;dbl&gt; 0.5480, 0.5638, 0.5983, 0.6124, 0.6858, 0.5474, 0.6914, 0.61…\n$ idh       &lt;dbl&gt; 0.919, 0.822, 0.886, 0.856, 0.853, 0.875, 0.821, 0.865, 0.84…\n$ idh_class &lt;chr&gt; \"Muito alto\", \"Alto\", \"Alto\", \"Alto\", \"Alto\", \"Alto\", \"Alto\"…\n$ ge012     &lt;dbl&gt; 149263, 4446, 487562, 327801, 108813, 421240, 80998, 1409351…\n$ ag001     &lt;dbl&gt; 149263, 1774, 487562, 327801, 102006, 413263, 79232, 1409351…\n$ ag020     &lt;dbl&gt; 9666.74, 58.94, 31499.85, 19825.98, 6207.20, 18464.15, 4185.…\n$ ag022     &lt;dbl&gt; 56873, 501, 154431, 108174, 30583, 156279, 25012, 518953, 85…\n$ consumo1  &lt;dbl&gt; 64.763136, 13.256860, 64.606860, 60.481756, 57.044655, 43.83…\n$ consumo2  &lt;dbl&gt; 64.76314, 33.22435, 64.60686, 60.48176, 60.85132, 44.67893, …\n\n\nA tabela abaixo apresenta uma descrição de cada variável.\n\n\n\n\n\n\n\nCódigo\nDescrição\n\n\n\n\nid_ibge\nCódigo IBGE (7 dígitos)\n\n\ndomicil\nQuantidade de Domicílios\n\n\nrede\nQuantidade de Domicílios com Acesso à Rede Geral de Água\n\n\nproprede\nProporção de Domicílios com com Acesso à Rede Geral de Água (REDE/DOMICIL)\n\n\nid_snins\nCódigo IBGE (6 dígitos)\n\n\nNOME_MUN\nNome do Município\n\n\nuf\nUnidade da Federação\n\n\nregiao\nRegião do País\n\n\npib\nProduto Interno Bruto 2010\n\n\nrendapita\nRenda per Capita 2010\n\n\ngini\nÍndice GINI 2010\n\n\nidh\nÍndice de Desenvolvimento Humano 2010\n\n\nidh_class\nClassificação do Índice de Desenvolvimento Humano 2010: Muito Alto &gt;= 0,9; Alto &gt;= 0,8; Médio &gt;= 0,5; Baixo &lt; 0,5.\n\n\nge012\nPopulação Total Residente no Município\n\n\nag001\nPopulação Total Atendida com Abastecimento de Água\n\n\nag020\nVolume Micromedido nas Economias Residenciais Ativas de Agua - 1.000 m3/ano\n\n\nag022\nQuantidade de Economias Residenciais Ativas Micromedidas\n\n\nconsumo1\nConsumo de Água per capita - População Total - m3/ano (AG020/GE012)\n\n\nconsumo2\nConsumo de Água per capita - População Atendida - m3/ano (AG020/AG001)",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Prática - Correlação</span>"
    ]
  },
  {
    "objectID": "praticas/06_correlacao.html#pergunta-norteadora",
    "href": "praticas/06_correlacao.html#pergunta-norteadora",
    "title": "6  Prática - Correlação",
    "section": "6.3 Pergunta norteadora",
    "text": "6.3 Pergunta norteadora\nA pergunta que vamos investigar é: o consumo de água (per capita) está correlacionado com a renda (per capita)?\nAs variáveis que vamos utilizar para responder a essa pergunta são:\n\nconsumo1: Consumo de água per capita - População Total - m3/ano (AG020/GE012);\nrendapita: Renda per capita.\n\nImportante: a correlação é utilizada para investigar a relação entre duas variáveis numéricas.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Prática - Correlação</span>"
    ]
  },
  {
    "objectID": "praticas/06_correlacao.html#gráfico-de-dispersão",
    "href": "praticas/06_correlacao.html#gráfico-de-dispersão",
    "title": "6  Prática - Correlação",
    "section": "6.4 Gráfico de dispersão",
    "text": "6.4 Gráfico de dispersão\nO gráfico de dispersão é uma representação gráfica que mostra a relação entre duas variáveis numéricas. Cada ponto no gráfico representa um par de valores das duas variáveis.\nPor exemplo, podemos representar\n\ndados |&gt;\n  ggplot(aes(x = rendapita, y = consumo1)) +\n  geom_point() +\n  labs(\n    tite = \"Relação entre Renda per Capita e Consumo de Água per Capita\",\n    subtitle = \"Dados de 2010 para Municípios Brasileiros\",\n    caption = \"Fonte: SNIS e IBGE\",\n    x = \"Renda per capita (R$)\",\n    y = \"Consumo de água per capita (m³/ano)\"\n  ) +\n  theme_minimal()\n\nWarning: Removed 1149 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAviso\n\n\n\nVeja que o ggplot apresentou um aviso (warning):\n\nWarning: Removed 1149 rows containing missing values or values outside the scale range (geom_point()).\n\nQuando estamos criando um gráfico de dispersão, precisamos que ambas as variáveis estejam presentes para cada ponto. Se uma das variáveis tiver valores ausentes (NA) ou fora do intervalo esperado, esses pontos serão removidos do gráfico. Isso é normal e esperado, pois o ggplot não pode plotar pontos com valores ausentes.\n\n\nInterpretando o gráfico, podemos observar que há uma tendência de que, à medida que a renda per capita aumenta, o consumo de água per capita também tende a aumentar.\nNo entanto, essa relação não é perfeita e existem pontos que se desviam dessa tendência. Por exemplo: alguns municípios apresentam maiores valores de consumo de água per capita, mesmo com rendas per capita mais baixas, enquanto outros municípios com rendas mais altas apresentam consumos de água per capita mais baixos.\nPorém, o foco neste momento é visualizar as tendências.\nPara quantificar essa relação, podemos calcular a correlação entre as duas variáveis.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Prática - Correlação</span>"
    ]
  },
  {
    "objectID": "praticas/06_correlacao.html#correlação",
    "href": "praticas/06_correlacao.html#correlação",
    "title": "6  Prática - Correlação",
    "section": "6.5 Correlação",
    "text": "6.5 Correlação\nA correlação é uma medida estatística que indica a força e a direção de uma relação linear entre duas variáveis numéricas. o coeficiente de correlação de Pearson apresenta valores entre -1 e 1, onde:\n\n1 indica uma correlação positiva perfeita (quando uma variável aumenta, a outra também aumenta);\n-1 indica uma correlação negativa perfeita (quando uma variável aumenta, a outra diminui);\n0 indica que não há correlação linear entre as variáveis.\n\n\n\n\n\n\n\nNota\n\n\n\nUm site divertido para brincar com correlações é o Guess the Correlation. Ele apresenta gráficos de dispersão e você deve adivinhar o coeficiente de correlação!\n\n\n\nPara calcular a correlação entre as variáveis consumo1 e rendapita, podemos usar a função cor() do R, que calcula o coeficiente de correlação, e podemos indicar alguns argumentos:\n\nx e y: as duas variáveis numéricas que queremos correlacionar;\nmethod: o método de correlação a ser utilizado (por padrão, é o coeficiente de correlação de Pearson, porém também é possível calcular utilizando os métodos \"spearman\" e \"kendall\");\nuse: como lidar com valores ausentes (NA). Por exemplo, podemos usar use = \"complete.obs\" para remover os casos com valores ausentes antes de calcular a correlação.\n\n\ncorrelacao &lt;- cor(x = dados$rendapita, # variável \n                  y = dados$consumo1,  # variável\n                  method = \"pearson\", # método de correlação\n                  use = \"complete.obs\" # usar apenas observações completas\n                  )\n\ncorrelacao\n\n[1] 0.6012537\n\n\nA correlação entre as variáveis renda e o consumo de água per capita é de 0.6, indicando a mesma correlação positiva que o gráfico de dispersão permitiu visualizar.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Prática - Correlação</span>"
    ]
  },
  {
    "objectID": "praticas/06_correlacao.html#matriz-de-correlação",
    "href": "praticas/06_correlacao.html#matriz-de-correlação",
    "title": "6  Prática - Correlação",
    "section": "6.6 Matriz de correlação",
    "text": "6.6 Matriz de correlação\nAté agora, calculamos a correlação entre duas variáveis específicas. No entanto, podemos calcular a correlação entre várias variáveis numéricas de uma vez, criando uma matriz de correlação.\nVamos recapitular alguns cuidados: - Correlação deve ser usada apenas com variáveis numéricas; - Não devemos usar variáveis de identificação, como códigos IBGE, nomes de municípios, etc;\nPara construir uma matriz de correlação, primeiro é necessário selecionar as variáveis que desejamos investigar (com a função select()), para depois calcular o coeficiente de correlação entre cada dupla de variáveis (com a função cor()).\nVamos criar um objeto com as variáveis que queremos investigar:\n\ndados_selecionados &lt;- dados |&gt;\n  select(rendapita, pib, gini, idh, consumo1, consumo2, proprede)\n\nAgora podemos calcular a matriz de correlação entre essas variáveis, utilizando a função cor():\n\ndados_selecionados |&gt;\n  cor(method = \"pearson\", use = \"complete.obs\")\n\n           rendapita        pib        gini        idh   consumo1    consumo2\nrendapita  1.0000000 0.22623371 -0.21476760  0.7415117  0.6012537  0.49269163\npib        0.2262337 1.00000000  0.09083846  0.1190256  0.1176077  0.06518107\ngini      -0.2147676 0.09083846  1.00000000 -0.3259986 -0.2680246 -0.25814509\nidh        0.7415117 0.11902559 -0.32599859  1.0000000  0.5143510  0.42554311\nconsumo1   0.6012537 0.11760770 -0.26802459  0.5143510  1.0000000  0.85700512\nconsumo2   0.4926916 0.06518107 -0.25814509  0.4255431  0.8570051  1.00000000\nproprede   0.4012507 0.11643021 -0.17370841  0.3731320  0.6117510  0.35458719\n            proprede\nrendapita  0.4012507\npib        0.1164302\ngini      -0.1737084\nidh        0.3731320\nconsumo1   0.6117510\nconsumo2   0.3545872\nproprede   1.0000000\n\n\nEsse resultado pode ser mais fácil de ser interpretado caso os valores sejam arredondados. Podemos fazer isso com a função round():\n\ndados_selecionados |&gt;\n  cor(method = \"pearson\", use = \"complete.obs\") |&gt; \n  round(2)\n\n          rendapita  pib  gini   idh consumo1 consumo2 proprede\nrendapita      1.00 0.23 -0.21  0.74     0.60     0.49     0.40\npib            0.23 1.00  0.09  0.12     0.12     0.07     0.12\ngini          -0.21 0.09  1.00 -0.33    -0.27    -0.26    -0.17\nidh            0.74 0.12 -0.33  1.00     0.51     0.43     0.37\nconsumo1       0.60 0.12 -0.27  0.51     1.00     0.86     0.61\nconsumo2       0.49 0.07 -0.26  0.43     0.86     1.00     0.35\nproprede       0.40 0.12 -0.17  0.37     0.61     0.35     1.00\n\n\n\n6.6.1 Visualizando a matriz de correlação\nTambém é possível visualizar a matriz de correlação construindo um gráfico, usando a função corrplot() do pacote corrplot.\n\ndados_selecionados |&gt;\n  cor(method = \"pearson\",\n    use = \"complete.obs\") |&gt; \n  corrplot(method = \"color\")\n\n\n\n\n\n\n\n\nOutra forma de visualizar a matriz de correlação é utilizando a função ggpairs() do pacote GGally, que cria uma matriz de gráficos de dispersão, histogramas e correlações entre as variáveis selecionadas:\n\nplot_ggpair &lt;- dados |&gt; \n  select(rendapita, gini, idh, consumo2) |&gt; \n  GGally::ggpairs()\n\nplot_ggpair",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Prática - Correlação</span>"
    ]
  },
  {
    "objectID": "praticas/06_correlacao.html#extra-teste-de-significância",
    "href": "praticas/06_correlacao.html#extra-teste-de-significância",
    "title": "6  Prática - Correlação",
    "section": "6.7 EXTRA: Teste de significância",
    "text": "6.7 EXTRA: Teste de significância\nSerá que 0.6 é significativo? Se fosse -0.3, seria significativo? E se fosse 0.1? Uma forma de verificar isso é através de um teste de hipótese. Nesse teste, avaliamos se a correlação observada é tão próxima de zero que podemos considerar que o que observamos é fruto do acaso.\nPara testar a significância da correlação entre duas variáveis, podemos usar o teste de hipótese para o coeficiente de correlação de Pearson. Esse teste nos dá um guia para avaliar se a correlação observada é significativa.\nÉ importante definir antes de realizar o teste de significância qual é a hipótese nula e a hipótese alternativa:\n\nHipótese nula (H0): Não há correlação entre as duas variáveis (coeficiente de correlação é igual a zero).\nHipótese alternativa (H1): Há correlação entre as duas variáveis (coeficiente de correlação é diferente de zero, podendo ser positivo ou negativo).\n\nPara testar a significâcia do coeficiente de correlação de Pearson podemos usar a função cor.test(), especificando os argumentos:\n\nx e y: as duas variáveis numéricas que queremos correlacionar;\nmethod: o método de correlação a ser utilizado. Por padrão, é o coeficiente de correlação de Pearson, mas também é possível calcular utilizando os métodos \"spearman\" e \"kendall\". Ao mudar o método, também mudamos o teste de hipótese realizado;\nalternative: o tipo de teste de hipótese a ser realizado. Os valores possíveis são \"two.sided\" (bilateral), \"less\" (unilateral à esquerda: valor negativo) e \"greater\" (unilateral à direita: valor positivo).\nconf.level: o nível de confiança para o intervalo de confiança do coeficiente de correlação (por padrão, é 0.95, ou seja, 95% de confiança).\n\n\nresultado_cor_test &lt;- cor.test(x = dados$rendapita, # variável \n                  y = dados$consumo1,  # variável\n                  method = \"pearson\", # método de correlação\n                  alternative = \"two.sided\", # teste bilateral\n                  conf.level = 0.95, # nível de confiança\n                  )\n\nresultado_cor_test\n\n\n    Pearson's product-moment correlation\n\ndata:  dados$rendapita and dados$consumo1\nt = 49.997, df = 4415, p-value &lt; 2.2e-16\nalternative hypothesis: true correlation is not equal to 0\n95 percent confidence interval:\n 0.5820832 0.6197561\nsample estimates:\n      cor \n0.6012537 \n\n\n\nbroom::tidy(resultado_cor_test)\n\n# A tibble: 1 × 8\n  estimate statistic p.value parameter conf.low conf.high method     alternative\n     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;     &lt;int&gt;    &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      \n1    0.601      50.0       0      4415    0.582     0.620 Pearson's… two.sided  \n\n\nOs resultados de testes estatísticos no R são confusos no início. O objeto criado é uma lista, e podemos acessar os componentes dessa lista para obter informações específicas utilizando o operador $.\n\nnames(resultado_cor_test)\n\n[1] \"statistic\"   \"parameter\"   \"p.value\"     \"estimate\"    \"null.value\" \n[6] \"alternative\" \"method\"      \"data.name\"   \"conf.int\"   \n\n\n\n6.7.1 statistic\nO componente statistic é o valor do teste estatístico usado para calcular o valor-p. No caso da correlação de Pearson, esse valor é calculado com base no valor de t, por conta das propriedades da estatística de Pearson. Esses valores não costumam ser interpretados isoladamente neste contexto.\n\nresultado_cor_test$statistic\n\n       t \n49.99709 \n\n\n\n\n6.7.2 parameter\nO componente parameter indica os parâmetros associados ao teste. No caso da correlação de Pearson, são os graus de liberdade, que é calculado como n - 2, onde n é o número de observações completas (ou seja, o número de pares de valores das duas variáveis). Isso acontece porque estamos calculando duas variâncias, o que diminui os graus de liberdade disponíveis para o teste em 2.\n\nresultado_cor_test$parameter\n\n  df \n4415 \n\n\nPodemos conferir isso contando o número de observações completas (ou seja, sem valores ausentes) nas duas variáveis que estamos correlacionando:\n\ndados |&gt; \n  drop_na(rendapita, consumo1) |&gt; \n  nrow()\n\n[1] 4417\n\n\n\n\n6.7.3 p.value ou valor-p\nO valor-p (ou p-value) indica a probabilidade de observar um valor tão ou mais extremo quanto o observado, assumindo que a hipótese nula (correlação = 0) seja verdadeira. Em uma linguagem mais simples, o valor-p nos diz a probabilidade de obtermos o resultado observado ao acaso. Neste contexto, é usado como guia para decidir se a correlação observada é estatisticamente significante.\n\n\n\n\n\n\nAviso\n\n\n\nALERTA: O R arredonda os valores por padrão para algumas casas. Por isso, eu prefiro interpretar o valor-p a partir do resultado completo do teste apresentado no console (e não usando o valor da lista, ex. resultado_cor_test$p.value).\n\n\nNeste caso, o resultado encontrado foi muito baixo, p &lt; 2.2e-16, indicando que é altamente improvável obter esse resultado se a correlação verdadeira fosse zero (ou seja, se não houvesse correlação entre as variáveis).\nIsso significa que podemos rejeitar a hipótese nula (H0) de que não há correlação entre as duas variáveis.\n\n\n6.7.4 estimate\nÉ a estimativa do parâmetro de interesse. No caso do teste de correlação de Pearson, é o coeficiente de correlação calculado entre as duas variáveis. Esse valor é o mesmo que calculamos anteriormente com a função cor().\n\nresultado_cor_test$estimate\n\n      cor \n0.6012537 \n\n\n\n\n6.7.5 null.value\nO componente null.value indica o valor do parâmetro sob a hipótese nula. No caso do teste de correlação de Pearson, esse valor é zero, pois a hipótese nula afirma que não há correlação entre as duas variáveis. Em usos mais avançados, poderíamos alterar esse valor, para verificar se a correlação é diferente de um valor específico.\n\nresultado_cor_test$null.value\n\ncorrelation \n          0 \n\n\n\n\n6.7.6 alternative\nO componente alternative indica qual foi a hipótese alternativa testada. No caso do teste de correlação de Pearson, o valor padrão é \"two.sided\", o que significa que estamos testando se a correlação é diferente de zero (ou seja, se há uma correlação positiva ou negativa).\n\nresultado_cor_test$alternative\n\n[1] \"two.sided\"\n\n\n\n\n6.7.7 method\nO componente method indica o método utilizado para calcular a correlação. No caso do teste de correlação de Pearson, o valor é \"Pearson\".\n\nresultado_cor_test$method\n\n[1] \"Pearson's product-moment correlation\"\n\n\n\n\n6.7.8 data.name\nO componente data.name indica o nome dos dados utilizados no teste. No caso do teste de correlação de Pearson, é uma string que contém os nomes das duas variáveis que foram correlacionadas.\n\nresultado_cor_test$data.name\n\n[1] \"dados$rendapita and dados$consumo1\"\n\n\n\n\n6.7.9 conf.int\nO componente conf.int contém o intervalo de confiança para o coeficiente de correlação. Esse intervalo é calculado com base no nível de confiança especificado (por padrão, 95%) e fornece uma faixa de valores que esperamos que contenham o verdadeiro coeficiente de correlação (lembrando que temos uma amostra de municípios, já que não temos dados para todos eles).\nAlém disso, esse elemento também indica qual foi o nível de confiança (conf.level) utilizado para calcular o intervalo de confiança.\n\nresultado_cor_test$conf.int\n\n[1] 0.5820832 0.6197561\nattr(,\"conf.level\")\n[1] 0.95",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Prática - Correlação</span>"
    ]
  },
  {
    "objectID": "praticas/06_correlacao.html#materiais-complementares",
    "href": "praticas/06_correlacao.html#materiais-complementares",
    "title": "6  Prática - Correlação",
    "section": "6.8 Materiais complementares",
    "text": "6.8 Materiais complementares\n\nMateriais da disciplina Ciência de Dados Aplicada ao Direito II:\n\nCorrelação e regressão\n\nVídeo: Correlação linear bivariada no R por Fernanda Peres:",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Prática - Correlação</span>"
    ]
  },
  {
    "objectID": "apendices/00_erros_frequentes.html",
    "href": "apendices/00_erros_frequentes.html",
    "title": "Apêndice A — Erros e warnings frequentes",
    "section": "",
    "text": "A.1 Instalação\nA lista a seguir apresenta alguns erros e warnings mais comuns.",
    "crumbs": [
      "Apêndices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Erros e *warnings* frequentes</span>"
    ]
  },
  {
    "objectID": "apendices/00_erros_frequentes.html#instalação",
    "href": "apendices/00_erros_frequentes.html#instalação",
    "title": "Apêndice A — Erros e warnings frequentes",
    "section": "",
    "text": "A.1.1 RTools\nPara pessoas que utilizam o sistema operacional Windows, a aviso (warning) abaixo pode aparecer em alguns contextos:\nWARNING: Rtools is required to build R packages but is not currently installed.\nPlease download and install the appropriate version of Rtools before proceeding:\n\nhttps://cran.rstudio.com/bin/windows/Rtools/\nInstalando pacote em ‘C:/Users/.../AppData/Local/R/win-library/4.4’\n(como ‘lib’ não foi especificado)\nPara que esse aviso não apareça mais, você pode instalar o Rtools no seu computador. O RTools é um software (não é um pacote do R), portanto você precisa fazer o download da versão compatível com a versão do R que você está utilizando, e instalar no seu computador.\nPara fazer o download, acesse o link https://cran.rstudio.com/bin/windows/Rtools/, e escolha a versão do RTools compatível com a versão do R que você está utilizando:\n\n\n\nCaptura de tela: página de download do RTools\n\n\nPara consultar a versão do R que você está utilizando, você pode rodar o seguinte comando no console do R:\n\nR.version.string\n\n[1] \"R version 4.5.1 (2025-06-13)\"",
    "crumbs": [
      "Apêndices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Erros e *warnings* frequentes</span>"
    ]
  },
  {
    "objectID": "apendices/00_erros_frequentes.html#conceitos-básicos",
    "href": "apendices/00_erros_frequentes.html#conceitos-básicos",
    "title": "Apêndice A — Erros e warnings frequentes",
    "section": "A.2 Conceitos básicos",
    "text": "A.2 Conceitos básicos\n\nA.2.1 Instalando pacotes\nO erro a seguir ocorre quando o usuário tenta instalar um pacote sem aspas. O correto é colocar o nome do pacote entre aspas.\n\n# O código abaixo gerará um erro:\ninstall.packages(janitor)\n\nError in eval(call, envir = parent.frame()): object 'janitor' not found\n\n\nA função deve receber o nome do pacote entre aspas, pois é um texto:\n\n# O código abaixo funcionará:\ninstall.packages(\"janitor\")\n\n\n\nA.2.2 Pacote não encontrado\nO erro a seguir ocorre quando tentamos carregar um pacote que não foi instalado anteriormente. Para resolver, precisamos instalar o pacote.\n\n# O código abaixo gerará um erro:\nlibrary(quarto)                   \n\nPara que consiga acessar, é necessário instalar o pacote, e depois carregá-lo:\n\ninstall.packages(\"quarto\")\nlibrary(quarto)\n\n\n\nA.2.3 Objeto não encontrado\nO erro a seguir ocorre quando tentamos acessar um objeto que não consta no painel Environment. Existe alguns motivos para isso acontecer:\n\nO objeto não foi criado (provavelmente precisa executar o código que cria o objeto);\nO objeto existe no painel Environment, mas estamos tentando acessá-lo com o nome incorreto.\n\nNo exemplo a seguir, o código gerará um erro pois o objeto que estamos tentando acessar ainda não foi criado:\n\n# O código abaixo gerará um erro:\nlength(estados_sudeste)\n\nError: object 'estados_sudeste' not found\n\n\nApós criar o objeto, conseguimos utilizá-lo:\n\nestados_sudeste &lt;- c(\"SP\", \"RJ\", \"MG\", \"ES\")\nlength(estados_sudeste)\n\n[1] 4\n\n\n\n\nA.2.4 Função não encontrada\nO erro could not find function ocorre quando tentamos acessar uma função que não está sendo encontrada. Isso pode acontecer por alguns motivos:\n\nA função faz parte de um pacote que não foi carregado (precisamos carregar o pacote antes);\nA função foi escrita de forma incorreta (por exemplo, com letras maiúsculas ou minúsculas incorretas).\n\n\nA.2.4.1 Pacote não carregado\nNo exemplo a seguir, queremos limpar o nome das colunas do data frame iris:\n\nhead(iris)\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n\n\nO código a seguir gerará um erro pois a função clean_names() faz parte do pacote janitor, mas o pacote não foi carregado:\n\nclean_names(iris)\n\nError in clean_names(iris): could not find function \"clean_names\"\n\n\nPara corrigir, precisamos carregar o pacote janitor:\n\nlibrary(janitor)\niris_nome_limpo &lt;- clean_names(iris)\nhead(iris_nome_limpo)\n\n  sepal_length sepal_width petal_length petal_width species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n\n\n\n\nA.2.4.2 Erro de digitação\nNo exemplo a seguir, o código gerará um erro pois a função length() está escrito de forma incorreta:\n\n# O código abaixo gerará um erro:\nlenght(letters)\n\nError in lenght(letters): could not find function \"lenght\"\n\n\nPara corrigir, precisamos escrever a função corretamente:\n\nlength(letters)\n\n[1] 26",
    "crumbs": [
      "Apêndices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Erros e *warnings* frequentes</span>"
    ]
  },
  {
    "objectID": "apendices/00_sugestao-videos.html",
    "href": "apendices/00_sugestao-videos.html",
    "title": "Apêndice B — Sugestão de vídeos, posts, e outros materiais",
    "section": "",
    "text": "B.1 Estatística básica\nNesta página, reunimos alguns vídeos, posts e outros materiais que podem ser úteis para complementar os estudos!",
    "crumbs": [
      "Apêndices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Sugestão de vídeos, posts, e outros materiais</span>"
    ]
  },
  {
    "objectID": "apendices/00_sugestao-videos.html#estatística-básica",
    "href": "apendices/00_sugestao-videos.html#estatística-básica",
    "title": "Apêndice B — Sugestão de vídeos, posts, e outros materiais",
    "section": "",
    "text": "Como calcular variância, desvio padrão e coeficiente de variação (manualmente e no Excel) - por Fernanda Peres. A Fernanda também escreveu um texto sobre o assunto.\n\n\n\n\n\n\nO segredo da MERITOCRARIA - por Atila Iamarino. Este vídeo aborda o tabuleiro de Galton (até cerca de 5 min), que conecta com os conceitos de distribuição normal, média, valores extremos.\n\n\n\n\n\n\nSerá que você nasceu inteligente? - por Atila Iamarino. Este vídeo complementa os conceitos apresentados no vídeo anterior: tabuleiro de Galton, distribuição normal, média, valores extremos.\n\n\n\n\n\n\nUma doutora toma chá: entendendo teste de hipóteses, valor de p e nível de significância alfa - por Fernanda Peres. A Fernanda também escreveu um texto sobre o assunto, e alguns outros posts complementares: Valor de p, nível de significância e testes uni vs. bicaudais, As falácias do valor de p.\n\n\n\n\n\n\nTexto: Como interpretar o intervalo de confiança? - por Fernanda Peres.\nPlaylist: Estatística Aplicada no R - por Fernanda Peres.",
    "crumbs": [
      "Apêndices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Sugestão de vídeos, posts, e outros materiais</span>"
    ]
  },
  {
    "objectID": "apendices/00_sugestao-videos.html#organização-dos-dados",
    "href": "apendices/00_sugestao-videos.html#organização-dos-dados",
    "title": "Apêndice B — Sugestão de vídeos, posts, e outros materiais",
    "section": "B.2 Organização dos dados",
    "text": "B.2 Organização dos dados\n\nComo organizar sua base de dados para análises estatísticas? - por Fernanda Peres.",
    "crumbs": [
      "Apêndices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Sugestão de vídeos, posts, e outros materiais</span>"
    ]
  },
  {
    "objectID": "apendices/00_sugestao-videos.html#gráficos",
    "href": "apendices/00_sugestao-videos.html#gráficos",
    "title": "Apêndice B — Sugestão de vídeos, posts, e outros materiais",
    "section": "B.3 Gráficos",
    "text": "B.3 Gráficos\n\nEntendendo o gráfico boxplot - por Fernanda Peres. A Fernanda também escreveu um texto sobre o assunto.",
    "crumbs": [
      "Apêndices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Sugestão de vídeos, posts, e outros materiais</span>"
    ]
  },
  {
    "objectID": "apendices/00_sugestao-videos.html#sobre-os-canais-citados",
    "href": "apendices/00_sugestao-videos.html#sobre-os-canais-citados",
    "title": "Apêndice B — Sugestão de vídeos, posts, e outros materiais",
    "section": "B.4 Sobre os canais citados",
    "text": "B.4 Sobre os canais citados\n\nB.4.1 Dr. Atila Iamarino\n\nYoutube\nInstagram\n\n\n\nB.4.2 Dra. Fernanda Peres\n\nYoutube\nInstagram\nBlog",
    "crumbs": [
      "Apêndices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Sugestão de vídeos, posts, e outros materiais</span>"
    ]
  }
]